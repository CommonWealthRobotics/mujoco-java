//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.3.0 
// See <a href="https://javaee.github.io/jaxb-v2/">https://javaee.github.io/jaxb-v2/</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2024.03.13 at 04:32:01 PM EDT 
//


package org.mujoco.xml.statistic;

import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeSupport;
import java.beans.PropertyVetoException;
import java.beans.VetoableChangeListener;
import java.beans.VetoableChangeSupport;
import java.math.BigDecimal;
import java.util.HashMap;
import java.util.Map;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlType;
import com.kscs.util.jaxb.Buildable;
import com.kscs.util.jaxb.Copyable;
import com.kscs.util.jaxb.PartialCopyable;
import com.kscs.util.jaxb.PropertyTree;
import com.kscs.util.jaxb.PropertyTreeUse;
import com.kscs.util.jaxb.PropertyVisitor;


/**
 * <p>Java class for statisticType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="statisticType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;attribute name="meanmass" type="{http://www.w3.org/2001/XMLSchema}decimal" /&gt;
 *       &lt;attribute name="meaninertia" type="{http://www.w3.org/2001/XMLSchema}decimal" /&gt;
 *       &lt;attribute name="meansize" type="{http://www.w3.org/2001/XMLSchema}decimal" /&gt;
 *       &lt;attribute name="extent" type="{http://www.w3.org/2001/XMLSchema}decimal" /&gt;
 *       &lt;attribute name="center" type="{attributeTypes}threeRealsType" /&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "statisticType")
public class StatisticType implements Cloneable, Copyable, PartialCopyable
{

    @XmlAttribute(name = "meanmass")
    protected BigDecimal meanmass;
    @XmlAttribute(name = "meaninertia")
    protected BigDecimal meaninertia;
    @XmlAttribute(name = "meansize")
    protected BigDecimal meansize;
    @XmlAttribute(name = "extent")
    protected BigDecimal extent;
    @XmlAttribute(name = "center")
    protected String center;
    protected final transient VetoableChangeSupport vetoableChange__Support = new VetoableChangeSupport(this);
    protected final transient PropertyChangeSupport propertyChange__Support = new PropertyChangeSupport(this);

    /**
     * Generated by copy-constructor plugin, JAXB requires public no-arg constructor.
     * 
     */
    public StatisticType() {
        // Generated by copy-constructor plugin, JAXB requires public no-arg constructor.
    }

    /**
     * Instantiates a StatisticType copying the state of another StatisticType
     * 
     * @param _other
     *     The original StatisticType from which to copy state.
     */
    public StatisticType(final StatisticType _other) {
        this.meanmass = _other.meanmass;
        this.meaninertia = _other.meaninertia;
        this.meansize = _other.meansize;
        this.extent = _other.extent;
        this.center = _other.center;
    }

    /**
     * Instantiates a StatisticType copying the state of another StatisticType
     * 
     * @param _propertyTreeUse
     *     Meaning of the {@link PropertyPath}: Exclude or include members contained in property path.
     * @param _propertyTree
     *     A restricting {@link PropertyPath} that defines which nodes of the source object tree should actually be copied.
     * @param _other
     *     The original StatisticType from which to copy state.
     */
    public StatisticType(final StatisticType _other, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        final PropertyTree meanmassPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("meanmass"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(meanmassPropertyTree!= null):((meanmassPropertyTree == null)||(!meanmassPropertyTree.isLeaf())))) {
            this.meanmass = _other.meanmass;
        }
        final PropertyTree meaninertiaPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("meaninertia"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(meaninertiaPropertyTree!= null):((meaninertiaPropertyTree == null)||(!meaninertiaPropertyTree.isLeaf())))) {
            this.meaninertia = _other.meaninertia;
        }
        final PropertyTree meansizePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("meansize"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(meansizePropertyTree!= null):((meansizePropertyTree == null)||(!meansizePropertyTree.isLeaf())))) {
            this.meansize = _other.meansize;
        }
        final PropertyTree extentPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("extent"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(extentPropertyTree!= null):((extentPropertyTree == null)||(!extentPropertyTree.isLeaf())))) {
            this.extent = _other.extent;
        }
        final PropertyTree centerPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("center"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(centerPropertyTree!= null):((centerPropertyTree == null)||(!centerPropertyTree.isLeaf())))) {
            this.center = _other.center;
        }
    }

    /**
     * Gets the value of the meanmass property.
     * 
     * @return
     *     possible object is
     *     {@link BigDecimal }
     *     
     */
    public BigDecimal getMeanmass() {
        return meanmass;
    }

    /**
     * Gets the value of the meaninertia property.
     * 
     * @return
     *     possible object is
     *     {@link BigDecimal }
     *     
     */
    public BigDecimal getMeaninertia() {
        return meaninertia;
    }

    /**
     * Gets the value of the meansize property.
     * 
     * @return
     *     possible object is
     *     {@link BigDecimal }
     *     
     */
    public BigDecimal getMeansize() {
        return meansize;
    }

    /**
     * Gets the value of the extent property.
     * 
     * @return
     *     possible object is
     *     {@link BigDecimal }
     *     
     */
    public BigDecimal getExtent() {
        return extent;
    }

    /**
     * Gets the value of the center property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getCenter() {
        return center;
    }

    public void addVetoableChangeListener(final VetoableChangeListener vetoableChangeListener) {
        this.vetoableChange__Support.addVetoableChangeListener(vetoableChangeListener);
    }

    public void removeVetoableChangeListener(final VetoableChangeListener vetoableChangeListener) {
        this.vetoableChange__Support.removeVetoableChangeListener(vetoableChangeListener);
    }

    public StatisticType withVetoableChangeListener(final VetoableChangeListener vetoableChangeListener) {
        addVetoableChangeListener(vetoableChangeListener);
        return this;
    }

    public void addPropertyChangeListener(final PropertyChangeListener propertyChangeListener) {
        this.propertyChange__Support.addPropertyChangeListener(propertyChangeListener);
    }

    public void removePropertyChangeListener(final PropertyChangeListener propertyChangeListener) {
        this.propertyChange__Support.removePropertyChangeListener(propertyChangeListener);
    }

    public StatisticType withPropertyChangeListener(final PropertyChangeListener propertyChangeListener) {
        addPropertyChangeListener(propertyChangeListener);
        return this;
    }

    public void setMeanmass(final BigDecimal value) {
        final BigDecimal __oldValue = this.meanmass;
        try {
            this.vetoableChange__Support.fireVetoableChange("meanmass", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.meanmass = value;
        this.propertyChange__Support.firePropertyChange("meanmass", __oldValue, value);
    }

    public void setMeaninertia(final BigDecimal value) {
        final BigDecimal __oldValue = this.meaninertia;
        try {
            this.vetoableChange__Support.fireVetoableChange("meaninertia", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.meaninertia = value;
        this.propertyChange__Support.firePropertyChange("meaninertia", __oldValue, value);
    }

    public void setMeansize(final BigDecimal value) {
        final BigDecimal __oldValue = this.meansize;
        try {
            this.vetoableChange__Support.fireVetoableChange("meansize", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.meansize = value;
        this.propertyChange__Support.firePropertyChange("meansize", __oldValue, value);
    }

    public void setExtent(final BigDecimal value) {
        final BigDecimal __oldValue = this.extent;
        try {
            this.vetoableChange__Support.fireVetoableChange("extent", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.extent = value;
        this.propertyChange__Support.firePropertyChange("extent", __oldValue, value);
    }

    public void setCenter(final String value) {
        final String __oldValue = this.center;
        try {
            this.vetoableChange__Support.fireVetoableChange("center", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.center = value;
        this.propertyChange__Support.firePropertyChange("center", __oldValue, value);
    }

    @Override
    public StatisticType clone() {
        final StatisticType _newObject;
        try {
            _newObject = ((StatisticType) super.clone());
        } catch (CloneNotSupportedException e) {
            throw new RuntimeException(e);
        }
        return _newObject;
    }

    @Override
    public StatisticType createCopy() {
        final StatisticType _newObject;
        try {
            _newObject = ((StatisticType) super.clone());
        } catch (CloneNotSupportedException e) {
            throw new RuntimeException(e);
        }
        _newObject.meanmass = this.meanmass;
        _newObject.meaninertia = this.meaninertia;
        _newObject.meansize = this.meansize;
        _newObject.extent = this.extent;
        _newObject.center = this.center;
        return _newObject;
    }

    @Override
    public StatisticType createCopy(final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        final StatisticType _newObject;
        try {
            _newObject = ((StatisticType) super.clone());
        } catch (CloneNotSupportedException e) {
            throw new RuntimeException(e);
        }
        final PropertyTree meanmassPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("meanmass"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(meanmassPropertyTree!= null):((meanmassPropertyTree == null)||(!meanmassPropertyTree.isLeaf())))) {
            _newObject.meanmass = this.meanmass;
        }
        final PropertyTree meaninertiaPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("meaninertia"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(meaninertiaPropertyTree!= null):((meaninertiaPropertyTree == null)||(!meaninertiaPropertyTree.isLeaf())))) {
            _newObject.meaninertia = this.meaninertia;
        }
        final PropertyTree meansizePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("meansize"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(meansizePropertyTree!= null):((meansizePropertyTree == null)||(!meansizePropertyTree.isLeaf())))) {
            _newObject.meansize = this.meansize;
        }
        final PropertyTree extentPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("extent"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(extentPropertyTree!= null):((extentPropertyTree == null)||(!extentPropertyTree.isLeaf())))) {
            _newObject.extent = this.extent;
        }
        final PropertyTree centerPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("center"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(centerPropertyTree!= null):((centerPropertyTree == null)||(!centerPropertyTree.isLeaf())))) {
            _newObject.center = this.center;
        }
        return _newObject;
    }

    @Override
    public StatisticType copyExcept(final PropertyTree _propertyTree) {
        return createCopy(_propertyTree, PropertyTreeUse.EXCLUDE);
    }

    @Override
    public StatisticType copyOnly(final PropertyTree _propertyTree) {
        return createCopy(_propertyTree, PropertyTreeUse.INCLUDE);
    }

    /**
     * Copies all state of this object to a builder. This method is used by the {@link #copyOf} method and should not be called directly by client code.
     * 
     * @param _other
     *     A builder instance to which the state of this object will be copied.
     */
    public<_B >void copyTo(final StatisticType.Builder<_B> _other) {
        _other.meanmass = this.meanmass;
        _other.meaninertia = this.meaninertia;
        _other.meansize = this.meansize;
        _other.extent = this.extent;
        _other.center = this.center;
    }

    public<_B >StatisticType.Builder<_B> newCopyBuilder(final _B _parentBuilder) {
        return new StatisticType.Builder<_B>(_parentBuilder, this, true);
    }

    public StatisticType.Builder<Void> newCopyBuilder() {
        return newCopyBuilder(null);
    }

    public static StatisticType.Builder<Void> builder() {
        return new StatisticType.Builder<Void>(null, null, false);
    }

    public static<_B >StatisticType.Builder<_B> copyOf(final StatisticType _other) {
        final StatisticType.Builder<_B> _newBuilder = new StatisticType.Builder<_B>(null, null, false);
        _other.copyTo(_newBuilder);
        return _newBuilder;
    }

    /**
     * Copies all state of this object to a builder. This method is used by the {@link #copyOf} method and should not be called directly by client code.
     * 
     * @param _other
     *     A builder instance to which the state of this object will be copied.
     */
    public<_B >void copyTo(final StatisticType.Builder<_B> _other, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        final PropertyTree meanmassPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("meanmass"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(meanmassPropertyTree!= null):((meanmassPropertyTree == null)||(!meanmassPropertyTree.isLeaf())))) {
            _other.meanmass = this.meanmass;
        }
        final PropertyTree meaninertiaPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("meaninertia"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(meaninertiaPropertyTree!= null):((meaninertiaPropertyTree == null)||(!meaninertiaPropertyTree.isLeaf())))) {
            _other.meaninertia = this.meaninertia;
        }
        final PropertyTree meansizePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("meansize"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(meansizePropertyTree!= null):((meansizePropertyTree == null)||(!meansizePropertyTree.isLeaf())))) {
            _other.meansize = this.meansize;
        }
        final PropertyTree extentPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("extent"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(extentPropertyTree!= null):((extentPropertyTree == null)||(!extentPropertyTree.isLeaf())))) {
            _other.extent = this.extent;
        }
        final PropertyTree centerPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("center"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(centerPropertyTree!= null):((centerPropertyTree == null)||(!centerPropertyTree.isLeaf())))) {
            _other.center = this.center;
        }
    }

    public<_B >StatisticType.Builder<_B> newCopyBuilder(final _B _parentBuilder, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        return new StatisticType.Builder<_B>(_parentBuilder, this, true, _propertyTree, _propertyTreeUse);
    }

    public StatisticType.Builder<Void> newCopyBuilder(final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        return newCopyBuilder(null, _propertyTree, _propertyTreeUse);
    }

    public static<_B >StatisticType.Builder<_B> copyOf(final StatisticType _other, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        final StatisticType.Builder<_B> _newBuilder = new StatisticType.Builder<_B>(null, null, false);
        _other.copyTo(_newBuilder, _propertyTree, _propertyTreeUse);
        return _newBuilder;
    }

    public static StatisticType.Builder<Void> copyExcept(final StatisticType _other, final PropertyTree _propertyTree) {
        return copyOf(_other, _propertyTree, PropertyTreeUse.EXCLUDE);
    }

    public static StatisticType.Builder<Void> copyOnly(final StatisticType _other, final PropertyTree _propertyTree) {
        return copyOf(_other, _propertyTree, PropertyTreeUse.INCLUDE);
    }

    public StatisticType visit(final PropertyVisitor _visitor_) {
        _visitor_.visit(this);
        return this;
    }

    public static class Builder<_B >implements Buildable
    {

        protected final _B _parentBuilder;
        private BigDecimal meanmass;
        private BigDecimal meaninertia;
        private BigDecimal meansize;
        private BigDecimal extent;
        private String center;

        public Builder(final _B _parentBuilder, final StatisticType _other, final boolean _copy) {
            this._parentBuilder = _parentBuilder;
            if (_other!= null) {
                this.meanmass = _other.meanmass;
                this.meaninertia = _other.meaninertia;
                this.meansize = _other.meansize;
                this.extent = _other.extent;
                this.center = _other.center;
            }
        }

        public Builder(final _B _parentBuilder, final StatisticType _other, final boolean _copy, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
            this._parentBuilder = _parentBuilder;
            if (_other!= null) {
                final PropertyTree meanmassPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("meanmass"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(meanmassPropertyTree!= null):((meanmassPropertyTree == null)||(!meanmassPropertyTree.isLeaf())))) {
                    this.meanmass = _other.meanmass;
                }
                final PropertyTree meaninertiaPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("meaninertia"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(meaninertiaPropertyTree!= null):((meaninertiaPropertyTree == null)||(!meaninertiaPropertyTree.isLeaf())))) {
                    this.meaninertia = _other.meaninertia;
                }
                final PropertyTree meansizePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("meansize"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(meansizePropertyTree!= null):((meansizePropertyTree == null)||(!meansizePropertyTree.isLeaf())))) {
                    this.meansize = _other.meansize;
                }
                final PropertyTree extentPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("extent"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(extentPropertyTree!= null):((extentPropertyTree == null)||(!extentPropertyTree.isLeaf())))) {
                    this.extent = _other.extent;
                }
                final PropertyTree centerPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("center"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(centerPropertyTree!= null):((centerPropertyTree == null)||(!centerPropertyTree.isLeaf())))) {
                    this.center = _other.center;
                }
            }
        }

        public _B end() {
            return this._parentBuilder;
        }

        protected<_P extends StatisticType >_P init(final _P _product) {
            _product.meanmass = this.meanmass;
            _product.meaninertia = this.meaninertia;
            _product.meansize = this.meansize;
            _product.extent = this.extent;
            _product.center = this.center;
            return _product;
        }

        /**
         * Sets the new value of "meanmass" (any previous value will be replaced)
         * 
         * @param meanmass
         *     New value of the "meanmass" property.
         */
        public StatisticType.Builder<_B> withMeanmass(final BigDecimal meanmass) {
            this.meanmass = meanmass;
            return this;
        }

        /**
         * Sets the new value of "meaninertia" (any previous value will be replaced)
         * 
         * @param meaninertia
         *     New value of the "meaninertia" property.
         */
        public StatisticType.Builder<_B> withMeaninertia(final BigDecimal meaninertia) {
            this.meaninertia = meaninertia;
            return this;
        }

        /**
         * Sets the new value of "meansize" (any previous value will be replaced)
         * 
         * @param meansize
         *     New value of the "meansize" property.
         */
        public StatisticType.Builder<_B> withMeansize(final BigDecimal meansize) {
            this.meansize = meansize;
            return this;
        }

        /**
         * Sets the new value of "extent" (any previous value will be replaced)
         * 
         * @param extent
         *     New value of the "extent" property.
         */
        public StatisticType.Builder<_B> withExtent(final BigDecimal extent) {
            this.extent = extent;
            return this;
        }

        /**
         * Sets the new value of "center" (any previous value will be replaced)
         * 
         * @param center
         *     New value of the "center" property.
         */
        public StatisticType.Builder<_B> withCenter(final String center) {
            this.center = center;
            return this;
        }

        @Override
        public StatisticType build() {
            return this.init(new StatisticType());
        }

        public StatisticType.Builder<_B> copyOf(final StatisticType _other) {
            _other.copyTo(this);
            return this;
        }

        public StatisticType.Builder<_B> copyOf(final StatisticType.Builder _other) {
            return copyOf(_other.build());
        }

    }

    public static class PropInfo {

        public final static transient String MEANMASS = "meanmass";
        public final static transient String MEANINERTIA = "meaninertia";
        public final static transient String MEANSIZE = "meansize";
        public final static transient String EXTENT = "extent";
        public final static transient String CENTER = "center";

    }

    public static class Select
        extends StatisticType.Selector<StatisticType.Select, Void>
    {


        Select() {
            super(null, null, null);
        }

        public static StatisticType.Select _root() {
            return new StatisticType.Select();
        }

    }

    public static class Selector<TRoot extends com.kscs.util.jaxb.Selector<TRoot, ?> , TParent >
        extends com.kscs.util.jaxb.Selector<TRoot, TParent>
    {

        private com.kscs.util.jaxb.Selector<TRoot, StatisticType.Selector<TRoot, TParent>> meanmass = null;
        private com.kscs.util.jaxb.Selector<TRoot, StatisticType.Selector<TRoot, TParent>> meaninertia = null;
        private com.kscs.util.jaxb.Selector<TRoot, StatisticType.Selector<TRoot, TParent>> meansize = null;
        private com.kscs.util.jaxb.Selector<TRoot, StatisticType.Selector<TRoot, TParent>> extent = null;
        private com.kscs.util.jaxb.Selector<TRoot, StatisticType.Selector<TRoot, TParent>> center = null;

        public Selector(final TRoot root, final TParent parent, final String propertyName) {
            super(root, parent, propertyName);
        }

        @Override
        public Map<String, PropertyTree> buildChildren() {
            final Map<String, PropertyTree> products = new HashMap<String, PropertyTree>();
            products.putAll(super.buildChildren());
            if (this.meanmass!= null) {
                products.put("meanmass", this.meanmass.init());
            }
            if (this.meaninertia!= null) {
                products.put("meaninertia", this.meaninertia.init());
            }
            if (this.meansize!= null) {
                products.put("meansize", this.meansize.init());
            }
            if (this.extent!= null) {
                products.put("extent", this.extent.init());
            }
            if (this.center!= null) {
                products.put("center", this.center.init());
            }
            return products;
        }

        public com.kscs.util.jaxb.Selector<TRoot, StatisticType.Selector<TRoot, TParent>> meanmass() {
            return ((this.meanmass == null)?this.meanmass = new com.kscs.util.jaxb.Selector<TRoot, StatisticType.Selector<TRoot, TParent>>(this._root, this, "meanmass"):this.meanmass);
        }

        public com.kscs.util.jaxb.Selector<TRoot, StatisticType.Selector<TRoot, TParent>> meaninertia() {
            return ((this.meaninertia == null)?this.meaninertia = new com.kscs.util.jaxb.Selector<TRoot, StatisticType.Selector<TRoot, TParent>>(this._root, this, "meaninertia"):this.meaninertia);
        }

        public com.kscs.util.jaxb.Selector<TRoot, StatisticType.Selector<TRoot, TParent>> meansize() {
            return ((this.meansize == null)?this.meansize = new com.kscs.util.jaxb.Selector<TRoot, StatisticType.Selector<TRoot, TParent>>(this._root, this, "meansize"):this.meansize);
        }

        public com.kscs.util.jaxb.Selector<TRoot, StatisticType.Selector<TRoot, TParent>> extent() {
            return ((this.extent == null)?this.extent = new com.kscs.util.jaxb.Selector<TRoot, StatisticType.Selector<TRoot, TParent>>(this._root, this, "extent"):this.extent);
        }

        public com.kscs.util.jaxb.Selector<TRoot, StatisticType.Selector<TRoot, TParent>> center() {
            return ((this.center == null)?this.center = new com.kscs.util.jaxb.Selector<TRoot, StatisticType.Selector<TRoot, TParent>>(this._root, this, "center"):this.center);
        }

    }

}
