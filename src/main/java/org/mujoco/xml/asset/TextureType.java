//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.3.0 
// See <a href="https://javaee.github.io/jaxb-v2/">https://javaee.github.io/jaxb-v2/</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2024.01.14 at 10:23:33 PM EST 
//


package org.mujoco.xml.asset;

import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeSupport;
import java.beans.PropertyVetoException;
import java.beans.VetoableChangeListener;
import java.beans.VetoableChangeSupport;
import java.math.BigDecimal;
import java.util.HashMap;
import java.util.Map;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlType;
import com.kscs.util.jaxb.Buildable;
import com.kscs.util.jaxb.Copyable;
import com.kscs.util.jaxb.PartialCopyable;
import com.kscs.util.jaxb.PropertyTree;
import com.kscs.util.jaxb.PropertyTreeUse;
import com.kscs.util.jaxb.PropertyVisitor;
import org.mujoco.xml.attributetypes.BuiltinType;
import org.mujoco.xml.attributetypes.MarkType;


/**
 * <p>Java class for textureType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="textureType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;attribute name="name" type="{http://www.w3.org/2001/XMLSchema}string" /&gt;
 *       &lt;attribute name="type" type="{attributeTypes}texturetypeType" default="cube" /&gt;
 *       &lt;attribute name="file" type="{http://www.w3.org/2001/XMLSchema}string" /&gt;
 *       &lt;attribute name="gridsize" type="{attributeTypes}twoIntsType" default="1 1" /&gt;
 *       &lt;attribute name="gridlayout" type="{http://www.w3.org/2001/XMLSchema}string" default="............" /&gt;
 *       &lt;attribute name="fileright" type="{http://www.w3.org/2001/XMLSchema}string" /&gt;
 *       &lt;attribute name="fileleft" type="{http://www.w3.org/2001/XMLSchema}string" /&gt;
 *       &lt;attribute name="fileup" type="{http://www.w3.org/2001/XMLSchema}string" /&gt;
 *       &lt;attribute name="filedown" type="{http://www.w3.org/2001/XMLSchema}string" /&gt;
 *       &lt;attribute name="filefront" type="{http://www.w3.org/2001/XMLSchema}string" /&gt;
 *       &lt;attribute name="fileback" type="{http://www.w3.org/2001/XMLSchema}string" /&gt;
 *       &lt;attribute name="builtin" type="{attributeTypes}builtinType" default="none" /&gt;
 *       &lt;attribute name="rgb1" type="{attributeTypes}threeRealsType" default="0.8 0.8 0.8" /&gt;
 *       &lt;attribute name="rgb2" type="{attributeTypes}threeRealsType" default="0.5 0.5 0.5" /&gt;
 *       &lt;attribute name="mark" type="{attributeTypes}markType" default="none" /&gt;
 *       &lt;attribute name="markrgb" type="{attributeTypes}threeRealsType" default="0 0 0" /&gt;
 *       &lt;attribute name="random" type="{http://www.w3.org/2001/XMLSchema}decimal" default="0.01" /&gt;
 *       &lt;attribute name="width" type="{http://www.w3.org/2001/XMLSchema}int" default="0" /&gt;
 *       &lt;attribute name="height" type="{http://www.w3.org/2001/XMLSchema}int" default="0" /&gt;
 *       &lt;attribute name="hflip" type="{http://www.w3.org/2001/XMLSchema}boolean" default="false" /&gt;
 *       &lt;attribute name="vflip" type="{http://www.w3.org/2001/XMLSchema}boolean" default="false" /&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "textureType")
public class TextureType implements Cloneable, Copyable, PartialCopyable
{

    @XmlAttribute(name = "name")
    protected String name;
    @XmlAttribute(name = "type")
    protected String type;
    @XmlAttribute(name = "file")
    protected String file;
    @XmlAttribute(name = "gridsize")
    protected String gridsize;
    @XmlAttribute(name = "gridlayout")
    protected String gridlayout;
    @XmlAttribute(name = "fileright")
    protected String fileright;
    @XmlAttribute(name = "fileleft")
    protected String fileleft;
    @XmlAttribute(name = "fileup")
    protected String fileup;
    @XmlAttribute(name = "filedown")
    protected String filedown;
    @XmlAttribute(name = "filefront")
    protected String filefront;
    @XmlAttribute(name = "fileback")
    protected String fileback;
    @XmlAttribute(name = "builtin")
    protected BuiltinType builtin;
    @XmlAttribute(name = "rgb1")
    protected String rgb1;
    @XmlAttribute(name = "rgb2")
    protected String rgb2;
    @XmlAttribute(name = "mark")
    protected MarkType mark;
    @XmlAttribute(name = "markrgb")
    protected String markrgb;
    @XmlAttribute(name = "random")
    protected BigDecimal random;
    @XmlAttribute(name = "width")
    protected Integer width;
    @XmlAttribute(name = "height")
    protected Integer height;
    @XmlAttribute(name = "hflip")
    protected Boolean hflip;
    @XmlAttribute(name = "vflip")
    protected Boolean vflip;
    protected final transient VetoableChangeSupport vetoableChange__Support = new VetoableChangeSupport(this);
    protected final transient PropertyChangeSupport propertyChange__Support = new PropertyChangeSupport(this);

    /**
     * Generated by copy-constructor plugin, JAXB requires public no-arg constructor.
     * 
     */
    public TextureType() {
        // Generated by copy-constructor plugin, JAXB requires public no-arg constructor.
    }

    /**
     * Instantiates a TextureType copying the state of another TextureType
     * 
     * @param _other
     *     The original TextureType from which to copy state.
     */
    public TextureType(final TextureType _other) {
        this.name = _other.name;
        this.type = _other.type;
        this.file = _other.file;
        this.gridsize = _other.gridsize;
        this.gridlayout = _other.gridlayout;
        this.fileright = _other.fileright;
        this.fileleft = _other.fileleft;
        this.fileup = _other.fileup;
        this.filedown = _other.filedown;
        this.filefront = _other.filefront;
        this.fileback = _other.fileback;
        this.builtin = _other.builtin;
        this.rgb1 = _other.rgb1;
        this.rgb2 = _other.rgb2;
        this.mark = _other.mark;
        this.markrgb = _other.markrgb;
        this.random = _other.random;
        this.width = _other.width;
        this.height = _other.height;
        this.hflip = _other.hflip;
        this.vflip = _other.vflip;
    }

    /**
     * Instantiates a TextureType copying the state of another TextureType
     * 
     * @param _propertyTreeUse
     *     Meaning of the {@link PropertyPath}: Exclude or include members contained in property path.
     * @param _propertyTree
     *     A restricting {@link PropertyPath} that defines which nodes of the source object tree should actually be copied.
     * @param _other
     *     The original TextureType from which to copy state.
     */
    public TextureType(final TextureType _other, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        final PropertyTree namePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("name"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(namePropertyTree!= null):((namePropertyTree == null)||(!namePropertyTree.isLeaf())))) {
            this.name = _other.name;
        }
        final PropertyTree typePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("type"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(typePropertyTree!= null):((typePropertyTree == null)||(!typePropertyTree.isLeaf())))) {
            this.type = _other.type;
        }
        final PropertyTree filePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("file"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(filePropertyTree!= null):((filePropertyTree == null)||(!filePropertyTree.isLeaf())))) {
            this.file = _other.file;
        }
        final PropertyTree gridsizePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("gridsize"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(gridsizePropertyTree!= null):((gridsizePropertyTree == null)||(!gridsizePropertyTree.isLeaf())))) {
            this.gridsize = _other.gridsize;
        }
        final PropertyTree gridlayoutPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("gridlayout"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(gridlayoutPropertyTree!= null):((gridlayoutPropertyTree == null)||(!gridlayoutPropertyTree.isLeaf())))) {
            this.gridlayout = _other.gridlayout;
        }
        final PropertyTree filerightPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("fileright"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(filerightPropertyTree!= null):((filerightPropertyTree == null)||(!filerightPropertyTree.isLeaf())))) {
            this.fileright = _other.fileright;
        }
        final PropertyTree fileleftPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("fileleft"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(fileleftPropertyTree!= null):((fileleftPropertyTree == null)||(!fileleftPropertyTree.isLeaf())))) {
            this.fileleft = _other.fileleft;
        }
        final PropertyTree fileupPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("fileup"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(fileupPropertyTree!= null):((fileupPropertyTree == null)||(!fileupPropertyTree.isLeaf())))) {
            this.fileup = _other.fileup;
        }
        final PropertyTree filedownPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("filedown"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(filedownPropertyTree!= null):((filedownPropertyTree == null)||(!filedownPropertyTree.isLeaf())))) {
            this.filedown = _other.filedown;
        }
        final PropertyTree filefrontPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("filefront"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(filefrontPropertyTree!= null):((filefrontPropertyTree == null)||(!filefrontPropertyTree.isLeaf())))) {
            this.filefront = _other.filefront;
        }
        final PropertyTree filebackPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("fileback"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(filebackPropertyTree!= null):((filebackPropertyTree == null)||(!filebackPropertyTree.isLeaf())))) {
            this.fileback = _other.fileback;
        }
        final PropertyTree builtinPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("builtin"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(builtinPropertyTree!= null):((builtinPropertyTree == null)||(!builtinPropertyTree.isLeaf())))) {
            this.builtin = _other.builtin;
        }
        final PropertyTree rgb1PropertyTree = ((_propertyTree == null)?null:_propertyTree.get("rgb1"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(rgb1PropertyTree!= null):((rgb1PropertyTree == null)||(!rgb1PropertyTree.isLeaf())))) {
            this.rgb1 = _other.rgb1;
        }
        final PropertyTree rgb2PropertyTree = ((_propertyTree == null)?null:_propertyTree.get("rgb2"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(rgb2PropertyTree!= null):((rgb2PropertyTree == null)||(!rgb2PropertyTree.isLeaf())))) {
            this.rgb2 = _other.rgb2;
        }
        final PropertyTree markPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("mark"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(markPropertyTree!= null):((markPropertyTree == null)||(!markPropertyTree.isLeaf())))) {
            this.mark = _other.mark;
        }
        final PropertyTree markrgbPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("markrgb"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(markrgbPropertyTree!= null):((markrgbPropertyTree == null)||(!markrgbPropertyTree.isLeaf())))) {
            this.markrgb = _other.markrgb;
        }
        final PropertyTree randomPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("random"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(randomPropertyTree!= null):((randomPropertyTree == null)||(!randomPropertyTree.isLeaf())))) {
            this.random = _other.random;
        }
        final PropertyTree widthPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("width"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(widthPropertyTree!= null):((widthPropertyTree == null)||(!widthPropertyTree.isLeaf())))) {
            this.width = _other.width;
        }
        final PropertyTree heightPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("height"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(heightPropertyTree!= null):((heightPropertyTree == null)||(!heightPropertyTree.isLeaf())))) {
            this.height = _other.height;
        }
        final PropertyTree hflipPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("hflip"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(hflipPropertyTree!= null):((hflipPropertyTree == null)||(!hflipPropertyTree.isLeaf())))) {
            this.hflip = _other.hflip;
        }
        final PropertyTree vflipPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("vflip"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(vflipPropertyTree!= null):((vflipPropertyTree == null)||(!vflipPropertyTree.isLeaf())))) {
            this.vflip = _other.vflip;
        }
    }

    /**
     * Gets the value of the name property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getName() {
        return name;
    }

    /**
     * Gets the value of the type property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getType() {
        if (type == null) {
            return "cube";
        } else {
            return type;
        }
    }

    /**
     * Gets the value of the file property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getFile() {
        return file;
    }

    /**
     * Gets the value of the gridsize property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getGridsize() {
        if (gridsize == null) {
            return "1 1";
        } else {
            return gridsize;
        }
    }

    /**
     * Gets the value of the gridlayout property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getGridlayout() {
        if (gridlayout == null) {
            return "............";
        } else {
            return gridlayout;
        }
    }

    /**
     * Gets the value of the fileright property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getFileright() {
        return fileright;
    }

    /**
     * Gets the value of the fileleft property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getFileleft() {
        return fileleft;
    }

    /**
     * Gets the value of the fileup property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getFileup() {
        return fileup;
    }

    /**
     * Gets the value of the filedown property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getFiledown() {
        return filedown;
    }

    /**
     * Gets the value of the filefront property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getFilefront() {
        return filefront;
    }

    /**
     * Gets the value of the fileback property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getFileback() {
        return fileback;
    }

    /**
     * Gets the value of the builtin property.
     * 
     * @return
     *     possible object is
     *     {@link BuiltinType }
     *     
     */
    public BuiltinType getBuiltin() {
        if (builtin == null) {
            return BuiltinType.NONE;
        } else {
            return builtin;
        }
    }

    /**
     * Gets the value of the rgb1 property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getRgb1() {
        if (rgb1 == null) {
            return "0.8 0.8 0.8";
        } else {
            return rgb1;
        }
    }

    /**
     * Gets the value of the rgb2 property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getRgb2() {
        if (rgb2 == null) {
            return "0.5 0.5 0.5";
        } else {
            return rgb2;
        }
    }

    /**
     * Gets the value of the mark property.
     * 
     * @return
     *     possible object is
     *     {@link MarkType }
     *     
     */
    public MarkType getMark() {
        if (mark == null) {
            return MarkType.NONE;
        } else {
            return mark;
        }
    }

    /**
     * Gets the value of the markrgb property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getMarkrgb() {
        if (markrgb == null) {
            return "0 0 0";
        } else {
            return markrgb;
        }
    }

    /**
     * Gets the value of the random property.
     * 
     * @return
     *     possible object is
     *     {@link BigDecimal }
     *     
     */
    public BigDecimal getRandom() {
        if (random == null) {
            return new BigDecimal("0.01");
        } else {
            return random;
        }
    }

    /**
     * Gets the value of the width property.
     * 
     * @return
     *     possible object is
     *     {@link Integer }
     *     
     */
    public int getWidth() {
        if (width == null) {
            return  0;
        } else {
            return width;
        }
    }

    /**
     * Gets the value of the height property.
     * 
     * @return
     *     possible object is
     *     {@link Integer }
     *     
     */
    public int getHeight() {
        if (height == null) {
            return  0;
        } else {
            return height;
        }
    }

    /**
     * Gets the value of the hflip property.
     * 
     * @return
     *     possible object is
     *     {@link Boolean }
     *     
     */
    public boolean isHflip() {
        if (hflip == null) {
            return false;
        } else {
            return hflip;
        }
    }

    /**
     * Gets the value of the vflip property.
     * 
     * @return
     *     possible object is
     *     {@link Boolean }
     *     
     */
    public boolean isVflip() {
        if (vflip == null) {
            return false;
        } else {
            return vflip;
        }
    }

    public void addVetoableChangeListener(final VetoableChangeListener vetoableChangeListener) {
        this.vetoableChange__Support.addVetoableChangeListener(vetoableChangeListener);
    }

    public void removeVetoableChangeListener(final VetoableChangeListener vetoableChangeListener) {
        this.vetoableChange__Support.removeVetoableChangeListener(vetoableChangeListener);
    }

    public TextureType withVetoableChangeListener(final VetoableChangeListener vetoableChangeListener) {
        addVetoableChangeListener(vetoableChangeListener);
        return this;
    }

    public void addPropertyChangeListener(final PropertyChangeListener propertyChangeListener) {
        this.propertyChange__Support.addPropertyChangeListener(propertyChangeListener);
    }

    public void removePropertyChangeListener(final PropertyChangeListener propertyChangeListener) {
        this.propertyChange__Support.removePropertyChangeListener(propertyChangeListener);
    }

    public TextureType withPropertyChangeListener(final PropertyChangeListener propertyChangeListener) {
        addPropertyChangeListener(propertyChangeListener);
        return this;
    }

    public void setName(final String value) {
        final String __oldValue = this.name;
        try {
            this.vetoableChange__Support.fireVetoableChange("name", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.name = value;
        this.propertyChange__Support.firePropertyChange("name", __oldValue, value);
    }

    public void setType(final String value) {
        final String __oldValue = this.type;
        try {
            this.vetoableChange__Support.fireVetoableChange("type", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.type = value;
        this.propertyChange__Support.firePropertyChange("type", __oldValue, value);
    }

    public void setFile(final String value) {
        final String __oldValue = this.file;
        try {
            this.vetoableChange__Support.fireVetoableChange("file", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.file = value;
        this.propertyChange__Support.firePropertyChange("file", __oldValue, value);
    }

    public void setGridsize(final String value) {
        final String __oldValue = this.gridsize;
        try {
            this.vetoableChange__Support.fireVetoableChange("gridsize", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.gridsize = value;
        this.propertyChange__Support.firePropertyChange("gridsize", __oldValue, value);
    }

    public void setGridlayout(final String value) {
        final String __oldValue = this.gridlayout;
        try {
            this.vetoableChange__Support.fireVetoableChange("gridlayout", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.gridlayout = value;
        this.propertyChange__Support.firePropertyChange("gridlayout", __oldValue, value);
    }

    public void setFileright(final String value) {
        final String __oldValue = this.fileright;
        try {
            this.vetoableChange__Support.fireVetoableChange("fileright", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.fileright = value;
        this.propertyChange__Support.firePropertyChange("fileright", __oldValue, value);
    }

    public void setFileleft(final String value) {
        final String __oldValue = this.fileleft;
        try {
            this.vetoableChange__Support.fireVetoableChange("fileleft", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.fileleft = value;
        this.propertyChange__Support.firePropertyChange("fileleft", __oldValue, value);
    }

    public void setFileup(final String value) {
        final String __oldValue = this.fileup;
        try {
            this.vetoableChange__Support.fireVetoableChange("fileup", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.fileup = value;
        this.propertyChange__Support.firePropertyChange("fileup", __oldValue, value);
    }

    public void setFiledown(final String value) {
        final String __oldValue = this.filedown;
        try {
            this.vetoableChange__Support.fireVetoableChange("filedown", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.filedown = value;
        this.propertyChange__Support.firePropertyChange("filedown", __oldValue, value);
    }

    public void setFilefront(final String value) {
        final String __oldValue = this.filefront;
        try {
            this.vetoableChange__Support.fireVetoableChange("filefront", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.filefront = value;
        this.propertyChange__Support.firePropertyChange("filefront", __oldValue, value);
    }

    public void setFileback(final String value) {
        final String __oldValue = this.fileback;
        try {
            this.vetoableChange__Support.fireVetoableChange("fileback", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.fileback = value;
        this.propertyChange__Support.firePropertyChange("fileback", __oldValue, value);
    }

    public void setBuiltin(final BuiltinType value) {
        final BuiltinType __oldValue = this.builtin;
        try {
            this.vetoableChange__Support.fireVetoableChange("builtin", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.builtin = value;
        this.propertyChange__Support.firePropertyChange("builtin", __oldValue, value);
    }

    public void setRgb1(final String value) {
        final String __oldValue = this.rgb1;
        try {
            this.vetoableChange__Support.fireVetoableChange("rgb1", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.rgb1 = value;
        this.propertyChange__Support.firePropertyChange("rgb1", __oldValue, value);
    }

    public void setRgb2(final String value) {
        final String __oldValue = this.rgb2;
        try {
            this.vetoableChange__Support.fireVetoableChange("rgb2", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.rgb2 = value;
        this.propertyChange__Support.firePropertyChange("rgb2", __oldValue, value);
    }

    public void setMark(final MarkType value) {
        final MarkType __oldValue = this.mark;
        try {
            this.vetoableChange__Support.fireVetoableChange("mark", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.mark = value;
        this.propertyChange__Support.firePropertyChange("mark", __oldValue, value);
    }

    public void setMarkrgb(final String value) {
        final String __oldValue = this.markrgb;
        try {
            this.vetoableChange__Support.fireVetoableChange("markrgb", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.markrgb = value;
        this.propertyChange__Support.firePropertyChange("markrgb", __oldValue, value);
    }

    public void setRandom(final BigDecimal value) {
        final BigDecimal __oldValue = this.random;
        try {
            this.vetoableChange__Support.fireVetoableChange("random", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.random = value;
        this.propertyChange__Support.firePropertyChange("random", __oldValue, value);
    }

    public void setWidth(final Integer value) {
        final Integer __oldValue = this.width;
        try {
            this.vetoableChange__Support.fireVetoableChange("width", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.width = value;
        this.propertyChange__Support.firePropertyChange("width", __oldValue, value);
    }

    public void setHeight(final Integer value) {
        final Integer __oldValue = this.height;
        try {
            this.vetoableChange__Support.fireVetoableChange("height", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.height = value;
        this.propertyChange__Support.firePropertyChange("height", __oldValue, value);
    }

    public void setHflip(final Boolean value) {
        final Boolean __oldValue = this.hflip;
        try {
            this.vetoableChange__Support.fireVetoableChange("hflip", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.hflip = value;
        this.propertyChange__Support.firePropertyChange("hflip", __oldValue, value);
    }

    public void setVflip(final Boolean value) {
        final Boolean __oldValue = this.vflip;
        try {
            this.vetoableChange__Support.fireVetoableChange("vflip", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.vflip = value;
        this.propertyChange__Support.firePropertyChange("vflip", __oldValue, value);
    }

    @Override
    public TextureType clone() {
        final TextureType _newObject;
        try {
            _newObject = ((TextureType) super.clone());
        } catch (CloneNotSupportedException e) {
            throw new RuntimeException(e);
        }
        return _newObject;
    }

    @Override
    public TextureType createCopy() {
        final TextureType _newObject;
        try {
            _newObject = ((TextureType) super.clone());
        } catch (CloneNotSupportedException e) {
            throw new RuntimeException(e);
        }
        _newObject.name = this.name;
        _newObject.type = this.type;
        _newObject.file = this.file;
        _newObject.gridsize = this.gridsize;
        _newObject.gridlayout = this.gridlayout;
        _newObject.fileright = this.fileright;
        _newObject.fileleft = this.fileleft;
        _newObject.fileup = this.fileup;
        _newObject.filedown = this.filedown;
        _newObject.filefront = this.filefront;
        _newObject.fileback = this.fileback;
        _newObject.builtin = this.builtin;
        _newObject.rgb1 = this.rgb1;
        _newObject.rgb2 = this.rgb2;
        _newObject.mark = this.mark;
        _newObject.markrgb = this.markrgb;
        _newObject.random = this.random;
        _newObject.width = this.width;
        _newObject.height = this.height;
        _newObject.hflip = this.hflip;
        _newObject.vflip = this.vflip;
        return _newObject;
    }

    @Override
    public TextureType createCopy(final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        final TextureType _newObject;
        try {
            _newObject = ((TextureType) super.clone());
        } catch (CloneNotSupportedException e) {
            throw new RuntimeException(e);
        }
        final PropertyTree namePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("name"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(namePropertyTree!= null):((namePropertyTree == null)||(!namePropertyTree.isLeaf())))) {
            _newObject.name = this.name;
        }
        final PropertyTree typePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("type"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(typePropertyTree!= null):((typePropertyTree == null)||(!typePropertyTree.isLeaf())))) {
            _newObject.type = this.type;
        }
        final PropertyTree filePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("file"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(filePropertyTree!= null):((filePropertyTree == null)||(!filePropertyTree.isLeaf())))) {
            _newObject.file = this.file;
        }
        final PropertyTree gridsizePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("gridsize"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(gridsizePropertyTree!= null):((gridsizePropertyTree == null)||(!gridsizePropertyTree.isLeaf())))) {
            _newObject.gridsize = this.gridsize;
        }
        final PropertyTree gridlayoutPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("gridlayout"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(gridlayoutPropertyTree!= null):((gridlayoutPropertyTree == null)||(!gridlayoutPropertyTree.isLeaf())))) {
            _newObject.gridlayout = this.gridlayout;
        }
        final PropertyTree filerightPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("fileright"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(filerightPropertyTree!= null):((filerightPropertyTree == null)||(!filerightPropertyTree.isLeaf())))) {
            _newObject.fileright = this.fileright;
        }
        final PropertyTree fileleftPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("fileleft"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(fileleftPropertyTree!= null):((fileleftPropertyTree == null)||(!fileleftPropertyTree.isLeaf())))) {
            _newObject.fileleft = this.fileleft;
        }
        final PropertyTree fileupPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("fileup"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(fileupPropertyTree!= null):((fileupPropertyTree == null)||(!fileupPropertyTree.isLeaf())))) {
            _newObject.fileup = this.fileup;
        }
        final PropertyTree filedownPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("filedown"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(filedownPropertyTree!= null):((filedownPropertyTree == null)||(!filedownPropertyTree.isLeaf())))) {
            _newObject.filedown = this.filedown;
        }
        final PropertyTree filefrontPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("filefront"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(filefrontPropertyTree!= null):((filefrontPropertyTree == null)||(!filefrontPropertyTree.isLeaf())))) {
            _newObject.filefront = this.filefront;
        }
        final PropertyTree filebackPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("fileback"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(filebackPropertyTree!= null):((filebackPropertyTree == null)||(!filebackPropertyTree.isLeaf())))) {
            _newObject.fileback = this.fileback;
        }
        final PropertyTree builtinPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("builtin"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(builtinPropertyTree!= null):((builtinPropertyTree == null)||(!builtinPropertyTree.isLeaf())))) {
            _newObject.builtin = this.builtin;
        }
        final PropertyTree rgb1PropertyTree = ((_propertyTree == null)?null:_propertyTree.get("rgb1"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(rgb1PropertyTree!= null):((rgb1PropertyTree == null)||(!rgb1PropertyTree.isLeaf())))) {
            _newObject.rgb1 = this.rgb1;
        }
        final PropertyTree rgb2PropertyTree = ((_propertyTree == null)?null:_propertyTree.get("rgb2"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(rgb2PropertyTree!= null):((rgb2PropertyTree == null)||(!rgb2PropertyTree.isLeaf())))) {
            _newObject.rgb2 = this.rgb2;
        }
        final PropertyTree markPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("mark"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(markPropertyTree!= null):((markPropertyTree == null)||(!markPropertyTree.isLeaf())))) {
            _newObject.mark = this.mark;
        }
        final PropertyTree markrgbPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("markrgb"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(markrgbPropertyTree!= null):((markrgbPropertyTree == null)||(!markrgbPropertyTree.isLeaf())))) {
            _newObject.markrgb = this.markrgb;
        }
        final PropertyTree randomPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("random"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(randomPropertyTree!= null):((randomPropertyTree == null)||(!randomPropertyTree.isLeaf())))) {
            _newObject.random = this.random;
        }
        final PropertyTree widthPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("width"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(widthPropertyTree!= null):((widthPropertyTree == null)||(!widthPropertyTree.isLeaf())))) {
            _newObject.width = this.width;
        }
        final PropertyTree heightPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("height"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(heightPropertyTree!= null):((heightPropertyTree == null)||(!heightPropertyTree.isLeaf())))) {
            _newObject.height = this.height;
        }
        final PropertyTree hflipPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("hflip"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(hflipPropertyTree!= null):((hflipPropertyTree == null)||(!hflipPropertyTree.isLeaf())))) {
            _newObject.hflip = this.hflip;
        }
        final PropertyTree vflipPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("vflip"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(vflipPropertyTree!= null):((vflipPropertyTree == null)||(!vflipPropertyTree.isLeaf())))) {
            _newObject.vflip = this.vflip;
        }
        return _newObject;
    }

    @Override
    public TextureType copyExcept(final PropertyTree _propertyTree) {
        return createCopy(_propertyTree, PropertyTreeUse.EXCLUDE);
    }

    @Override
    public TextureType copyOnly(final PropertyTree _propertyTree) {
        return createCopy(_propertyTree, PropertyTreeUse.INCLUDE);
    }

    /**
     * Copies all state of this object to a builder. This method is used by the {@link #copyOf} method and should not be called directly by client code.
     * 
     * @param _other
     *     A builder instance to which the state of this object will be copied.
     */
    public<_B >void copyTo(final TextureType.Builder<_B> _other) {
        _other.name = this.name;
        _other.type = this.type;
        _other.file = this.file;
        _other.gridsize = this.gridsize;
        _other.gridlayout = this.gridlayout;
        _other.fileright = this.fileright;
        _other.fileleft = this.fileleft;
        _other.fileup = this.fileup;
        _other.filedown = this.filedown;
        _other.filefront = this.filefront;
        _other.fileback = this.fileback;
        _other.builtin = this.builtin;
        _other.rgb1 = this.rgb1;
        _other.rgb2 = this.rgb2;
        _other.mark = this.mark;
        _other.markrgb = this.markrgb;
        _other.random = this.random;
        _other.width = this.width;
        _other.height = this.height;
        _other.hflip = this.hflip;
        _other.vflip = this.vflip;
    }

    public<_B >TextureType.Builder<_B> newCopyBuilder(final _B _parentBuilder) {
        return new TextureType.Builder<_B>(_parentBuilder, this, true);
    }

    public TextureType.Builder<Void> newCopyBuilder() {
        return newCopyBuilder(null);
    }

    public static TextureType.Builder<Void> builder() {
        return new TextureType.Builder<Void>(null, null, false);
    }

    public static<_B >TextureType.Builder<_B> copyOf(final TextureType _other) {
        final TextureType.Builder<_B> _newBuilder = new TextureType.Builder<_B>(null, null, false);
        _other.copyTo(_newBuilder);
        return _newBuilder;
    }

    /**
     * Copies all state of this object to a builder. This method is used by the {@link #copyOf} method and should not be called directly by client code.
     * 
     * @param _other
     *     A builder instance to which the state of this object will be copied.
     */
    public<_B >void copyTo(final TextureType.Builder<_B> _other, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        final PropertyTree namePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("name"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(namePropertyTree!= null):((namePropertyTree == null)||(!namePropertyTree.isLeaf())))) {
            _other.name = this.name;
        }
        final PropertyTree typePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("type"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(typePropertyTree!= null):((typePropertyTree == null)||(!typePropertyTree.isLeaf())))) {
            _other.type = this.type;
        }
        final PropertyTree filePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("file"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(filePropertyTree!= null):((filePropertyTree == null)||(!filePropertyTree.isLeaf())))) {
            _other.file = this.file;
        }
        final PropertyTree gridsizePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("gridsize"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(gridsizePropertyTree!= null):((gridsizePropertyTree == null)||(!gridsizePropertyTree.isLeaf())))) {
            _other.gridsize = this.gridsize;
        }
        final PropertyTree gridlayoutPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("gridlayout"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(gridlayoutPropertyTree!= null):((gridlayoutPropertyTree == null)||(!gridlayoutPropertyTree.isLeaf())))) {
            _other.gridlayout = this.gridlayout;
        }
        final PropertyTree filerightPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("fileright"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(filerightPropertyTree!= null):((filerightPropertyTree == null)||(!filerightPropertyTree.isLeaf())))) {
            _other.fileright = this.fileright;
        }
        final PropertyTree fileleftPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("fileleft"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(fileleftPropertyTree!= null):((fileleftPropertyTree == null)||(!fileleftPropertyTree.isLeaf())))) {
            _other.fileleft = this.fileleft;
        }
        final PropertyTree fileupPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("fileup"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(fileupPropertyTree!= null):((fileupPropertyTree == null)||(!fileupPropertyTree.isLeaf())))) {
            _other.fileup = this.fileup;
        }
        final PropertyTree filedownPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("filedown"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(filedownPropertyTree!= null):((filedownPropertyTree == null)||(!filedownPropertyTree.isLeaf())))) {
            _other.filedown = this.filedown;
        }
        final PropertyTree filefrontPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("filefront"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(filefrontPropertyTree!= null):((filefrontPropertyTree == null)||(!filefrontPropertyTree.isLeaf())))) {
            _other.filefront = this.filefront;
        }
        final PropertyTree filebackPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("fileback"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(filebackPropertyTree!= null):((filebackPropertyTree == null)||(!filebackPropertyTree.isLeaf())))) {
            _other.fileback = this.fileback;
        }
        final PropertyTree builtinPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("builtin"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(builtinPropertyTree!= null):((builtinPropertyTree == null)||(!builtinPropertyTree.isLeaf())))) {
            _other.builtin = this.builtin;
        }
        final PropertyTree rgb1PropertyTree = ((_propertyTree == null)?null:_propertyTree.get("rgb1"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(rgb1PropertyTree!= null):((rgb1PropertyTree == null)||(!rgb1PropertyTree.isLeaf())))) {
            _other.rgb1 = this.rgb1;
        }
        final PropertyTree rgb2PropertyTree = ((_propertyTree == null)?null:_propertyTree.get("rgb2"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(rgb2PropertyTree!= null):((rgb2PropertyTree == null)||(!rgb2PropertyTree.isLeaf())))) {
            _other.rgb2 = this.rgb2;
        }
        final PropertyTree markPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("mark"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(markPropertyTree!= null):((markPropertyTree == null)||(!markPropertyTree.isLeaf())))) {
            _other.mark = this.mark;
        }
        final PropertyTree markrgbPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("markrgb"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(markrgbPropertyTree!= null):((markrgbPropertyTree == null)||(!markrgbPropertyTree.isLeaf())))) {
            _other.markrgb = this.markrgb;
        }
        final PropertyTree randomPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("random"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(randomPropertyTree!= null):((randomPropertyTree == null)||(!randomPropertyTree.isLeaf())))) {
            _other.random = this.random;
        }
        final PropertyTree widthPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("width"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(widthPropertyTree!= null):((widthPropertyTree == null)||(!widthPropertyTree.isLeaf())))) {
            _other.width = this.width;
        }
        final PropertyTree heightPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("height"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(heightPropertyTree!= null):((heightPropertyTree == null)||(!heightPropertyTree.isLeaf())))) {
            _other.height = this.height;
        }
        final PropertyTree hflipPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("hflip"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(hflipPropertyTree!= null):((hflipPropertyTree == null)||(!hflipPropertyTree.isLeaf())))) {
            _other.hflip = this.hflip;
        }
        final PropertyTree vflipPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("vflip"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(vflipPropertyTree!= null):((vflipPropertyTree == null)||(!vflipPropertyTree.isLeaf())))) {
            _other.vflip = this.vflip;
        }
    }

    public<_B >TextureType.Builder<_B> newCopyBuilder(final _B _parentBuilder, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        return new TextureType.Builder<_B>(_parentBuilder, this, true, _propertyTree, _propertyTreeUse);
    }

    public TextureType.Builder<Void> newCopyBuilder(final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        return newCopyBuilder(null, _propertyTree, _propertyTreeUse);
    }

    public static<_B >TextureType.Builder<_B> copyOf(final TextureType _other, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        final TextureType.Builder<_B> _newBuilder = new TextureType.Builder<_B>(null, null, false);
        _other.copyTo(_newBuilder, _propertyTree, _propertyTreeUse);
        return _newBuilder;
    }

    public static TextureType.Builder<Void> copyExcept(final TextureType _other, final PropertyTree _propertyTree) {
        return copyOf(_other, _propertyTree, PropertyTreeUse.EXCLUDE);
    }

    public static TextureType.Builder<Void> copyOnly(final TextureType _other, final PropertyTree _propertyTree) {
        return copyOf(_other, _propertyTree, PropertyTreeUse.INCLUDE);
    }

    public TextureType visit(final PropertyVisitor _visitor_) {
        _visitor_.visit(this);
        return this;
    }

    public static class Builder<_B >implements Buildable
    {

        protected final _B _parentBuilder;
        protected final TextureType _storedValue;
        private String name;
        private String type;
        private String file;
        private String gridsize;
        private String gridlayout;
        private String fileright;
        private String fileleft;
        private String fileup;
        private String filedown;
        private String filefront;
        private String fileback;
        private BuiltinType builtin;
        private String rgb1;
        private String rgb2;
        private MarkType mark;
        private String markrgb;
        private BigDecimal random;
        private Integer width;
        private Integer height;
        private Boolean hflip;
        private Boolean vflip;

        public Builder(final _B _parentBuilder, final TextureType _other, final boolean _copy) {
            this._parentBuilder = _parentBuilder;
            if (_other!= null) {
                if (_copy) {
                    _storedValue = null;
                    this.name = _other.name;
                    this.type = _other.type;
                    this.file = _other.file;
                    this.gridsize = _other.gridsize;
                    this.gridlayout = _other.gridlayout;
                    this.fileright = _other.fileright;
                    this.fileleft = _other.fileleft;
                    this.fileup = _other.fileup;
                    this.filedown = _other.filedown;
                    this.filefront = _other.filefront;
                    this.fileback = _other.fileback;
                    this.builtin = _other.builtin;
                    this.rgb1 = _other.rgb1;
                    this.rgb2 = _other.rgb2;
                    this.mark = _other.mark;
                    this.markrgb = _other.markrgb;
                    this.random = _other.random;
                    this.width = _other.width;
                    this.height = _other.height;
                    this.hflip = _other.hflip;
                    this.vflip = _other.vflip;
                } else {
                    _storedValue = _other;
                }
            } else {
                _storedValue = null;
            }
        }

        public Builder(final _B _parentBuilder, final TextureType _other, final boolean _copy, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
            this._parentBuilder = _parentBuilder;
            if (_other!= null) {
                if (_copy) {
                    _storedValue = null;
                    final PropertyTree namePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("name"));
                    if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(namePropertyTree!= null):((namePropertyTree == null)||(!namePropertyTree.isLeaf())))) {
                        this.name = _other.name;
                    }
                    final PropertyTree typePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("type"));
                    if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(typePropertyTree!= null):((typePropertyTree == null)||(!typePropertyTree.isLeaf())))) {
                        this.type = _other.type;
                    }
                    final PropertyTree filePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("file"));
                    if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(filePropertyTree!= null):((filePropertyTree == null)||(!filePropertyTree.isLeaf())))) {
                        this.file = _other.file;
                    }
                    final PropertyTree gridsizePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("gridsize"));
                    if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(gridsizePropertyTree!= null):((gridsizePropertyTree == null)||(!gridsizePropertyTree.isLeaf())))) {
                        this.gridsize = _other.gridsize;
                    }
                    final PropertyTree gridlayoutPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("gridlayout"));
                    if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(gridlayoutPropertyTree!= null):((gridlayoutPropertyTree == null)||(!gridlayoutPropertyTree.isLeaf())))) {
                        this.gridlayout = _other.gridlayout;
                    }
                    final PropertyTree filerightPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("fileright"));
                    if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(filerightPropertyTree!= null):((filerightPropertyTree == null)||(!filerightPropertyTree.isLeaf())))) {
                        this.fileright = _other.fileright;
                    }
                    final PropertyTree fileleftPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("fileleft"));
                    if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(fileleftPropertyTree!= null):((fileleftPropertyTree == null)||(!fileleftPropertyTree.isLeaf())))) {
                        this.fileleft = _other.fileleft;
                    }
                    final PropertyTree fileupPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("fileup"));
                    if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(fileupPropertyTree!= null):((fileupPropertyTree == null)||(!fileupPropertyTree.isLeaf())))) {
                        this.fileup = _other.fileup;
                    }
                    final PropertyTree filedownPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("filedown"));
                    if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(filedownPropertyTree!= null):((filedownPropertyTree == null)||(!filedownPropertyTree.isLeaf())))) {
                        this.filedown = _other.filedown;
                    }
                    final PropertyTree filefrontPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("filefront"));
                    if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(filefrontPropertyTree!= null):((filefrontPropertyTree == null)||(!filefrontPropertyTree.isLeaf())))) {
                        this.filefront = _other.filefront;
                    }
                    final PropertyTree filebackPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("fileback"));
                    if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(filebackPropertyTree!= null):((filebackPropertyTree == null)||(!filebackPropertyTree.isLeaf())))) {
                        this.fileback = _other.fileback;
                    }
                    final PropertyTree builtinPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("builtin"));
                    if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(builtinPropertyTree!= null):((builtinPropertyTree == null)||(!builtinPropertyTree.isLeaf())))) {
                        this.builtin = _other.builtin;
                    }
                    final PropertyTree rgb1PropertyTree = ((_propertyTree == null)?null:_propertyTree.get("rgb1"));
                    if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(rgb1PropertyTree!= null):((rgb1PropertyTree == null)||(!rgb1PropertyTree.isLeaf())))) {
                        this.rgb1 = _other.rgb1;
                    }
                    final PropertyTree rgb2PropertyTree = ((_propertyTree == null)?null:_propertyTree.get("rgb2"));
                    if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(rgb2PropertyTree!= null):((rgb2PropertyTree == null)||(!rgb2PropertyTree.isLeaf())))) {
                        this.rgb2 = _other.rgb2;
                    }
                    final PropertyTree markPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("mark"));
                    if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(markPropertyTree!= null):((markPropertyTree == null)||(!markPropertyTree.isLeaf())))) {
                        this.mark = _other.mark;
                    }
                    final PropertyTree markrgbPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("markrgb"));
                    if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(markrgbPropertyTree!= null):((markrgbPropertyTree == null)||(!markrgbPropertyTree.isLeaf())))) {
                        this.markrgb = _other.markrgb;
                    }
                    final PropertyTree randomPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("random"));
                    if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(randomPropertyTree!= null):((randomPropertyTree == null)||(!randomPropertyTree.isLeaf())))) {
                        this.random = _other.random;
                    }
                    final PropertyTree widthPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("width"));
                    if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(widthPropertyTree!= null):((widthPropertyTree == null)||(!widthPropertyTree.isLeaf())))) {
                        this.width = _other.width;
                    }
                    final PropertyTree heightPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("height"));
                    if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(heightPropertyTree!= null):((heightPropertyTree == null)||(!heightPropertyTree.isLeaf())))) {
                        this.height = _other.height;
                    }
                    final PropertyTree hflipPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("hflip"));
                    if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(hflipPropertyTree!= null):((hflipPropertyTree == null)||(!hflipPropertyTree.isLeaf())))) {
                        this.hflip = _other.hflip;
                    }
                    final PropertyTree vflipPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("vflip"));
                    if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(vflipPropertyTree!= null):((vflipPropertyTree == null)||(!vflipPropertyTree.isLeaf())))) {
                        this.vflip = _other.vflip;
                    }
                } else {
                    _storedValue = _other;
                }
            } else {
                _storedValue = null;
            }
        }

        public _B end() {
            return this._parentBuilder;
        }

        protected<_P extends TextureType >_P init(final _P _product) {
            _product.name = this.name;
            _product.type = this.type;
            _product.file = this.file;
            _product.gridsize = this.gridsize;
            _product.gridlayout = this.gridlayout;
            _product.fileright = this.fileright;
            _product.fileleft = this.fileleft;
            _product.fileup = this.fileup;
            _product.filedown = this.filedown;
            _product.filefront = this.filefront;
            _product.fileback = this.fileback;
            _product.builtin = this.builtin;
            _product.rgb1 = this.rgb1;
            _product.rgb2 = this.rgb2;
            _product.mark = this.mark;
            _product.markrgb = this.markrgb;
            _product.random = this.random;
            _product.width = this.width;
            _product.height = this.height;
            _product.hflip = this.hflip;
            _product.vflip = this.vflip;
            return _product;
        }

        /**
         * Sets the new value of "name" (any previous value will be replaced)
         * 
         * @param name
         *     New value of the "name" property.
         */
        public TextureType.Builder<_B> withName(final String name) {
            this.name = name;
            return this;
        }

        /**
         * Sets the new value of "type" (any previous value will be replaced)
         * 
         * @param type
         *     New value of the "type" property.
         */
        public TextureType.Builder<_B> withType(final String type) {
            this.type = type;
            return this;
        }

        /**
         * Sets the new value of "file" (any previous value will be replaced)
         * 
         * @param file
         *     New value of the "file" property.
         */
        public TextureType.Builder<_B> withFile(final String file) {
            this.file = file;
            return this;
        }

        /**
         * Sets the new value of "gridsize" (any previous value will be replaced)
         * 
         * @param gridsize
         *     New value of the "gridsize" property.
         */
        public TextureType.Builder<_B> withGridsize(final String gridsize) {
            this.gridsize = gridsize;
            return this;
        }

        /**
         * Sets the new value of "gridlayout" (any previous value will be replaced)
         * 
         * @param gridlayout
         *     New value of the "gridlayout" property.
         */
        public TextureType.Builder<_B> withGridlayout(final String gridlayout) {
            this.gridlayout = gridlayout;
            return this;
        }

        /**
         * Sets the new value of "fileright" (any previous value will be replaced)
         * 
         * @param fileright
         *     New value of the "fileright" property.
         */
        public TextureType.Builder<_B> withFileright(final String fileright) {
            this.fileright = fileright;
            return this;
        }

        /**
         * Sets the new value of "fileleft" (any previous value will be replaced)
         * 
         * @param fileleft
         *     New value of the "fileleft" property.
         */
        public TextureType.Builder<_B> withFileleft(final String fileleft) {
            this.fileleft = fileleft;
            return this;
        }

        /**
         * Sets the new value of "fileup" (any previous value will be replaced)
         * 
         * @param fileup
         *     New value of the "fileup" property.
         */
        public TextureType.Builder<_B> withFileup(final String fileup) {
            this.fileup = fileup;
            return this;
        }

        /**
         * Sets the new value of "filedown" (any previous value will be replaced)
         * 
         * @param filedown
         *     New value of the "filedown" property.
         */
        public TextureType.Builder<_B> withFiledown(final String filedown) {
            this.filedown = filedown;
            return this;
        }

        /**
         * Sets the new value of "filefront" (any previous value will be replaced)
         * 
         * @param filefront
         *     New value of the "filefront" property.
         */
        public TextureType.Builder<_B> withFilefront(final String filefront) {
            this.filefront = filefront;
            return this;
        }

        /**
         * Sets the new value of "fileback" (any previous value will be replaced)
         * 
         * @param fileback
         *     New value of the "fileback" property.
         */
        public TextureType.Builder<_B> withFileback(final String fileback) {
            this.fileback = fileback;
            return this;
        }

        /**
         * Sets the new value of "builtin" (any previous value will be replaced)
         * 
         * @param builtin
         *     New value of the "builtin" property.
         */
        public TextureType.Builder<_B> withBuiltin(final BuiltinType builtin) {
            this.builtin = builtin;
            return this;
        }

        /**
         * Sets the new value of "rgb1" (any previous value will be replaced)
         * 
         * @param rgb1
         *     New value of the "rgb1" property.
         */
        public TextureType.Builder<_B> withRgb1(final String rgb1) {
            this.rgb1 = rgb1;
            return this;
        }

        /**
         * Sets the new value of "rgb2" (any previous value will be replaced)
         * 
         * @param rgb2
         *     New value of the "rgb2" property.
         */
        public TextureType.Builder<_B> withRgb2(final String rgb2) {
            this.rgb2 = rgb2;
            return this;
        }

        /**
         * Sets the new value of "mark" (any previous value will be replaced)
         * 
         * @param mark
         *     New value of the "mark" property.
         */
        public TextureType.Builder<_B> withMark(final MarkType mark) {
            this.mark = mark;
            return this;
        }

        /**
         * Sets the new value of "markrgb" (any previous value will be replaced)
         * 
         * @param markrgb
         *     New value of the "markrgb" property.
         */
        public TextureType.Builder<_B> withMarkrgb(final String markrgb) {
            this.markrgb = markrgb;
            return this;
        }

        /**
         * Sets the new value of "random" (any previous value will be replaced)
         * 
         * @param random
         *     New value of the "random" property.
         */
        public TextureType.Builder<_B> withRandom(final BigDecimal random) {
            this.random = random;
            return this;
        }

        /**
         * Sets the new value of "width" (any previous value will be replaced)
         * 
         * @param width
         *     New value of the "width" property.
         */
        public TextureType.Builder<_B> withWidth(final Integer width) {
            this.width = width;
            return this;
        }

        /**
         * Sets the new value of "height" (any previous value will be replaced)
         * 
         * @param height
         *     New value of the "height" property.
         */
        public TextureType.Builder<_B> withHeight(final Integer height) {
            this.height = height;
            return this;
        }

        /**
         * Sets the new value of "hflip" (any previous value will be replaced)
         * 
         * @param hflip
         *     New value of the "hflip" property.
         */
        public TextureType.Builder<_B> withHflip(final Boolean hflip) {
            this.hflip = hflip;
            return this;
        }

        /**
         * Sets the new value of "vflip" (any previous value will be replaced)
         * 
         * @param vflip
         *     New value of the "vflip" property.
         */
        public TextureType.Builder<_B> withVflip(final Boolean vflip) {
            this.vflip = vflip;
            return this;
        }

        @Override
        public TextureType build() {
            if (_storedValue == null) {
                return this.init(new TextureType());
            } else {
                return ((TextureType) _storedValue);
            }
        }

        public TextureType.Builder<_B> copyOf(final TextureType _other) {
            _other.copyTo(this);
            return this;
        }

        public TextureType.Builder<_B> copyOf(final TextureType.Builder _other) {
            return copyOf(_other.build());
        }

    }

    public static class PropInfo {

        public final static transient String NAME = "name";
        public final static transient String TYPE = "type";
        public final static transient String FILE = "file";
        public final static transient String GRIDSIZE = "gridsize";
        public final static transient String GRIDLAYOUT = "gridlayout";
        public final static transient String FILERIGHT = "fileright";
        public final static transient String FILELEFT = "fileleft";
        public final static transient String FILEUP = "fileup";
        public final static transient String FILEDOWN = "filedown";
        public final static transient String FILEFRONT = "filefront";
        public final static transient String FILEBACK = "fileback";
        public final static transient String BUILTIN = "builtin";
        public final static transient String RGB_1 = "rgb1";
        public final static transient String RGB_2 = "rgb2";
        public final static transient String MARK = "mark";
        public final static transient String MARKRGB = "markrgb";
        public final static transient String RANDOM = "random";
        public final static transient String WIDTH = "width";
        public final static transient String HEIGHT = "height";
        public final static transient String HFLIP = "hflip";
        public final static transient String VFLIP = "vflip";

    }

    public static class Select
        extends TextureType.Selector<TextureType.Select, Void>
    {


        Select() {
            super(null, null, null);
        }

        public static TextureType.Select _root() {
            return new TextureType.Select();
        }

    }

    public static class Selector<TRoot extends com.kscs.util.jaxb.Selector<TRoot, ?> , TParent >
        extends com.kscs.util.jaxb.Selector<TRoot, TParent>
    {

        private com.kscs.util.jaxb.Selector<TRoot, TextureType.Selector<TRoot, TParent>> name = null;
        private com.kscs.util.jaxb.Selector<TRoot, TextureType.Selector<TRoot, TParent>> type = null;
        private com.kscs.util.jaxb.Selector<TRoot, TextureType.Selector<TRoot, TParent>> file = null;
        private com.kscs.util.jaxb.Selector<TRoot, TextureType.Selector<TRoot, TParent>> gridsize = null;
        private com.kscs.util.jaxb.Selector<TRoot, TextureType.Selector<TRoot, TParent>> gridlayout = null;
        private com.kscs.util.jaxb.Selector<TRoot, TextureType.Selector<TRoot, TParent>> fileright = null;
        private com.kscs.util.jaxb.Selector<TRoot, TextureType.Selector<TRoot, TParent>> fileleft = null;
        private com.kscs.util.jaxb.Selector<TRoot, TextureType.Selector<TRoot, TParent>> fileup = null;
        private com.kscs.util.jaxb.Selector<TRoot, TextureType.Selector<TRoot, TParent>> filedown = null;
        private com.kscs.util.jaxb.Selector<TRoot, TextureType.Selector<TRoot, TParent>> filefront = null;
        private com.kscs.util.jaxb.Selector<TRoot, TextureType.Selector<TRoot, TParent>> fileback = null;
        private com.kscs.util.jaxb.Selector<TRoot, TextureType.Selector<TRoot, TParent>> builtin = null;
        private com.kscs.util.jaxb.Selector<TRoot, TextureType.Selector<TRoot, TParent>> rgb1 = null;
        private com.kscs.util.jaxb.Selector<TRoot, TextureType.Selector<TRoot, TParent>> rgb2 = null;
        private com.kscs.util.jaxb.Selector<TRoot, TextureType.Selector<TRoot, TParent>> mark = null;
        private com.kscs.util.jaxb.Selector<TRoot, TextureType.Selector<TRoot, TParent>> markrgb = null;
        private com.kscs.util.jaxb.Selector<TRoot, TextureType.Selector<TRoot, TParent>> random = null;
        private com.kscs.util.jaxb.Selector<TRoot, TextureType.Selector<TRoot, TParent>> width = null;
        private com.kscs.util.jaxb.Selector<TRoot, TextureType.Selector<TRoot, TParent>> height = null;
        private com.kscs.util.jaxb.Selector<TRoot, TextureType.Selector<TRoot, TParent>> hflip = null;
        private com.kscs.util.jaxb.Selector<TRoot, TextureType.Selector<TRoot, TParent>> vflip = null;

        public Selector(final TRoot root, final TParent parent, final String propertyName) {
            super(root, parent, propertyName);
        }

        @Override
        public Map<String, PropertyTree> buildChildren() {
            final Map<String, PropertyTree> products = new HashMap<String, PropertyTree>();
            products.putAll(super.buildChildren());
            if (this.name!= null) {
                products.put("name", this.name.init());
            }
            if (this.type!= null) {
                products.put("type", this.type.init());
            }
            if (this.file!= null) {
                products.put("file", this.file.init());
            }
            if (this.gridsize!= null) {
                products.put("gridsize", this.gridsize.init());
            }
            if (this.gridlayout!= null) {
                products.put("gridlayout", this.gridlayout.init());
            }
            if (this.fileright!= null) {
                products.put("fileright", this.fileright.init());
            }
            if (this.fileleft!= null) {
                products.put("fileleft", this.fileleft.init());
            }
            if (this.fileup!= null) {
                products.put("fileup", this.fileup.init());
            }
            if (this.filedown!= null) {
                products.put("filedown", this.filedown.init());
            }
            if (this.filefront!= null) {
                products.put("filefront", this.filefront.init());
            }
            if (this.fileback!= null) {
                products.put("fileback", this.fileback.init());
            }
            if (this.builtin!= null) {
                products.put("builtin", this.builtin.init());
            }
            if (this.rgb1 != null) {
                products.put("rgb1", this.rgb1 .init());
            }
            if (this.rgb2 != null) {
                products.put("rgb2", this.rgb2 .init());
            }
            if (this.mark!= null) {
                products.put("mark", this.mark.init());
            }
            if (this.markrgb!= null) {
                products.put("markrgb", this.markrgb.init());
            }
            if (this.random!= null) {
                products.put("random", this.random.init());
            }
            if (this.width!= null) {
                products.put("width", this.width.init());
            }
            if (this.height!= null) {
                products.put("height", this.height.init());
            }
            if (this.hflip!= null) {
                products.put("hflip", this.hflip.init());
            }
            if (this.vflip!= null) {
                products.put("vflip", this.vflip.init());
            }
            return products;
        }

        public com.kscs.util.jaxb.Selector<TRoot, TextureType.Selector<TRoot, TParent>> name() {
            return ((this.name == null)?this.name = new com.kscs.util.jaxb.Selector<TRoot, TextureType.Selector<TRoot, TParent>>(this._root, this, "name"):this.name);
        }

        public com.kscs.util.jaxb.Selector<TRoot, TextureType.Selector<TRoot, TParent>> type() {
            return ((this.type == null)?this.type = new com.kscs.util.jaxb.Selector<TRoot, TextureType.Selector<TRoot, TParent>>(this._root, this, "type"):this.type);
        }

        public com.kscs.util.jaxb.Selector<TRoot, TextureType.Selector<TRoot, TParent>> file() {
            return ((this.file == null)?this.file = new com.kscs.util.jaxb.Selector<TRoot, TextureType.Selector<TRoot, TParent>>(this._root, this, "file"):this.file);
        }

        public com.kscs.util.jaxb.Selector<TRoot, TextureType.Selector<TRoot, TParent>> gridsize() {
            return ((this.gridsize == null)?this.gridsize = new com.kscs.util.jaxb.Selector<TRoot, TextureType.Selector<TRoot, TParent>>(this._root, this, "gridsize"):this.gridsize);
        }

        public com.kscs.util.jaxb.Selector<TRoot, TextureType.Selector<TRoot, TParent>> gridlayout() {
            return ((this.gridlayout == null)?this.gridlayout = new com.kscs.util.jaxb.Selector<TRoot, TextureType.Selector<TRoot, TParent>>(this._root, this, "gridlayout"):this.gridlayout);
        }

        public com.kscs.util.jaxb.Selector<TRoot, TextureType.Selector<TRoot, TParent>> fileright() {
            return ((this.fileright == null)?this.fileright = new com.kscs.util.jaxb.Selector<TRoot, TextureType.Selector<TRoot, TParent>>(this._root, this, "fileright"):this.fileright);
        }

        public com.kscs.util.jaxb.Selector<TRoot, TextureType.Selector<TRoot, TParent>> fileleft() {
            return ((this.fileleft == null)?this.fileleft = new com.kscs.util.jaxb.Selector<TRoot, TextureType.Selector<TRoot, TParent>>(this._root, this, "fileleft"):this.fileleft);
        }

        public com.kscs.util.jaxb.Selector<TRoot, TextureType.Selector<TRoot, TParent>> fileup() {
            return ((this.fileup == null)?this.fileup = new com.kscs.util.jaxb.Selector<TRoot, TextureType.Selector<TRoot, TParent>>(this._root, this, "fileup"):this.fileup);
        }

        public com.kscs.util.jaxb.Selector<TRoot, TextureType.Selector<TRoot, TParent>> filedown() {
            return ((this.filedown == null)?this.filedown = new com.kscs.util.jaxb.Selector<TRoot, TextureType.Selector<TRoot, TParent>>(this._root, this, "filedown"):this.filedown);
        }

        public com.kscs.util.jaxb.Selector<TRoot, TextureType.Selector<TRoot, TParent>> filefront() {
            return ((this.filefront == null)?this.filefront = new com.kscs.util.jaxb.Selector<TRoot, TextureType.Selector<TRoot, TParent>>(this._root, this, "filefront"):this.filefront);
        }

        public com.kscs.util.jaxb.Selector<TRoot, TextureType.Selector<TRoot, TParent>> fileback() {
            return ((this.fileback == null)?this.fileback = new com.kscs.util.jaxb.Selector<TRoot, TextureType.Selector<TRoot, TParent>>(this._root, this, "fileback"):this.fileback);
        }

        public com.kscs.util.jaxb.Selector<TRoot, TextureType.Selector<TRoot, TParent>> builtin() {
            return ((this.builtin == null)?this.builtin = new com.kscs.util.jaxb.Selector<TRoot, TextureType.Selector<TRoot, TParent>>(this._root, this, "builtin"):this.builtin);
        }

        public com.kscs.util.jaxb.Selector<TRoot, TextureType.Selector<TRoot, TParent>> rgb1() {
            return ((this.rgb1 == null)?this.rgb1 = new com.kscs.util.jaxb.Selector<TRoot, TextureType.Selector<TRoot, TParent>>(this._root, this, "rgb1"):this.rgb1);
        }

        public com.kscs.util.jaxb.Selector<TRoot, TextureType.Selector<TRoot, TParent>> rgb2() {
            return ((this.rgb2 == null)?this.rgb2 = new com.kscs.util.jaxb.Selector<TRoot, TextureType.Selector<TRoot, TParent>>(this._root, this, "rgb2"):this.rgb2);
        }

        public com.kscs.util.jaxb.Selector<TRoot, TextureType.Selector<TRoot, TParent>> mark() {
            return ((this.mark == null)?this.mark = new com.kscs.util.jaxb.Selector<TRoot, TextureType.Selector<TRoot, TParent>>(this._root, this, "mark"):this.mark);
        }

        public com.kscs.util.jaxb.Selector<TRoot, TextureType.Selector<TRoot, TParent>> markrgb() {
            return ((this.markrgb == null)?this.markrgb = new com.kscs.util.jaxb.Selector<TRoot, TextureType.Selector<TRoot, TParent>>(this._root, this, "markrgb"):this.markrgb);
        }

        public com.kscs.util.jaxb.Selector<TRoot, TextureType.Selector<TRoot, TParent>> random() {
            return ((this.random == null)?this.random = new com.kscs.util.jaxb.Selector<TRoot, TextureType.Selector<TRoot, TParent>>(this._root, this, "random"):this.random);
        }

        public com.kscs.util.jaxb.Selector<TRoot, TextureType.Selector<TRoot, TParent>> width() {
            return ((this.width == null)?this.width = new com.kscs.util.jaxb.Selector<TRoot, TextureType.Selector<TRoot, TParent>>(this._root, this, "width"):this.width);
        }

        public com.kscs.util.jaxb.Selector<TRoot, TextureType.Selector<TRoot, TParent>> height() {
            return ((this.height == null)?this.height = new com.kscs.util.jaxb.Selector<TRoot, TextureType.Selector<TRoot, TParent>>(this._root, this, "height"):this.height);
        }

        public com.kscs.util.jaxb.Selector<TRoot, TextureType.Selector<TRoot, TParent>> hflip() {
            return ((this.hflip == null)?this.hflip = new com.kscs.util.jaxb.Selector<TRoot, TextureType.Selector<TRoot, TParent>>(this._root, this, "hflip"):this.hflip);
        }

        public com.kscs.util.jaxb.Selector<TRoot, TextureType.Selector<TRoot, TParent>> vflip() {
            return ((this.vflip == null)?this.vflip = new com.kscs.util.jaxb.Selector<TRoot, TextureType.Selector<TRoot, TParent>>(this._root, this, "vflip"):this.vflip);
        }

    }

}
