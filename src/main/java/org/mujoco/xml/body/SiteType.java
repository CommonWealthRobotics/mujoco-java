//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.3.0 
// See <a href="https://javaee.github.io/jaxb-v2/">https://javaee.github.io/jaxb-v2/</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2024.03.13 at 04:45:57 PM EDT 
//


package org.mujoco.xml.body;

import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeSupport;
import java.beans.PropertyVetoException;
import java.beans.VetoableChangeListener;
import java.beans.VetoableChangeSupport;
import java.util.HashMap;
import java.util.Map;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlType;
import com.kscs.util.jaxb.Buildable;
import com.kscs.util.jaxb.Copyable;
import com.kscs.util.jaxb.PartialCopyable;
import com.kscs.util.jaxb.PropertyTree;
import com.kscs.util.jaxb.PropertyTreeUse;
import com.kscs.util.jaxb.PropertyVisitor;
import org.mujoco.xml.attributetypes.SitetypeType;


/**
 * <p>Java class for siteType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="siteType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;attribute name="name" type="{http://www.w3.org/2001/XMLSchema}string" /&gt;
 *       &lt;attribute name="class" type="{http://www.w3.org/2001/XMLSchema}string" /&gt;
 *       &lt;attribute name="type" type="{attributeTypes}sitetypeType" default="sphere" /&gt;
 *       &lt;attribute name="group" type="{http://www.w3.org/2001/XMLSchema}int" default="0" /&gt;
 *       &lt;attribute name="material" type="{http://www.w3.org/2001/XMLSchema}string" /&gt;
 *       &lt;attribute name="rgba" type="{attributeTypes}fourRealsType" default="0.5 0.5 0.5 1" /&gt;
 *       &lt;attribute name="size" type="{attributeTypes}upToThreeRealsType" default="0.005 0.005 0.005" /&gt;
 *       &lt;attribute name="fromto" type="{attributeTypes}sixRealsType" /&gt;
 *       &lt;attribute name="pos" type="{attributeTypes}threeRealsType" default="0 0 0" /&gt;
 *       &lt;attribute name="quat" type="{attributeTypes}fourRealsType" default="1 0 0 0" /&gt;
 *       &lt;attribute name="axisangle" type="{attributeTypes}fourRealsType" /&gt;
 *       &lt;attribute name="euler" type="{attributeTypes}threeRealsType" /&gt;
 *       &lt;attribute name="xyaxes" type="{attributeTypes}sixRealsType" /&gt;
 *       &lt;attribute name="zaxis" type="{attributeTypes}threeRealsType" /&gt;
 *       &lt;attribute name="user" type="{attributeTypes}infRealsType" /&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "siteType")
public class SiteType implements Cloneable, Copyable, PartialCopyable
{

    @XmlAttribute(name = "name")
    protected String name;
    @XmlAttribute(name = "class")
    protected String clazz;
    @XmlAttribute(name = "type")
    protected SitetypeType type;
    @XmlAttribute(name = "group")
    protected Integer group;
    @XmlAttribute(name = "material")
    protected String material;
    @XmlAttribute(name = "rgba")
    protected String rgba;
    @XmlAttribute(name = "size")
    protected String size;
    @XmlAttribute(name = "fromto")
    protected String fromto;
    @XmlAttribute(name = "pos")
    protected String pos;
    @XmlAttribute(name = "quat")
    protected String quat;
    @XmlAttribute(name = "axisangle")
    protected String axisangle;
    @XmlAttribute(name = "euler")
    protected String euler;
    @XmlAttribute(name = "xyaxes")
    protected String xyaxes;
    @XmlAttribute(name = "zaxis")
    protected String zaxis;
    @XmlAttribute(name = "user")
    protected String user;
    protected final transient VetoableChangeSupport vetoableChange__Support = new VetoableChangeSupport(this);
    protected final transient PropertyChangeSupport propertyChange__Support = new PropertyChangeSupport(this);

    /**
     * Generated by copy-constructor plugin, JAXB requires public no-arg constructor.
     * 
     */
    public SiteType() {
        // Generated by copy-constructor plugin, JAXB requires public no-arg constructor.
    }

    /**
     * Instantiates a SiteType copying the state of another SiteType
     * 
     * @param _other
     *     The original SiteType from which to copy state.
     */
    public SiteType(final SiteType _other) {
        this.name = _other.name;
        this.clazz = _other.clazz;
        this.type = _other.type;
        this.group = _other.group;
        this.material = _other.material;
        this.rgba = _other.rgba;
        this.size = _other.size;
        this.fromto = _other.fromto;
        this.pos = _other.pos;
        this.quat = _other.quat;
        this.axisangle = _other.axisangle;
        this.euler = _other.euler;
        this.xyaxes = _other.xyaxes;
        this.zaxis = _other.zaxis;
        this.user = _other.user;
    }

    /**
     * Instantiates a SiteType copying the state of another SiteType
     * 
     * @param _propertyTreeUse
     *     Meaning of the {@link PropertyPath}: Exclude or include members contained in property path.
     * @param _propertyTree
     *     A restricting {@link PropertyPath} that defines which nodes of the source object tree should actually be copied.
     * @param _other
     *     The original SiteType from which to copy state.
     */
    public SiteType(final SiteType _other, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        final PropertyTree namePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("name"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(namePropertyTree!= null):((namePropertyTree == null)||(!namePropertyTree.isLeaf())))) {
            this.name = _other.name;
        }
        final PropertyTree clazzPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("clazz"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(clazzPropertyTree!= null):((clazzPropertyTree == null)||(!clazzPropertyTree.isLeaf())))) {
            this.clazz = _other.clazz;
        }
        final PropertyTree typePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("type"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(typePropertyTree!= null):((typePropertyTree == null)||(!typePropertyTree.isLeaf())))) {
            this.type = _other.type;
        }
        final PropertyTree groupPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("group"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(groupPropertyTree!= null):((groupPropertyTree == null)||(!groupPropertyTree.isLeaf())))) {
            this.group = _other.group;
        }
        final PropertyTree materialPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("material"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(materialPropertyTree!= null):((materialPropertyTree == null)||(!materialPropertyTree.isLeaf())))) {
            this.material = _other.material;
        }
        final PropertyTree rgbaPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("rgba"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(rgbaPropertyTree!= null):((rgbaPropertyTree == null)||(!rgbaPropertyTree.isLeaf())))) {
            this.rgba = _other.rgba;
        }
        final PropertyTree sizePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("size"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(sizePropertyTree!= null):((sizePropertyTree == null)||(!sizePropertyTree.isLeaf())))) {
            this.size = _other.size;
        }
        final PropertyTree fromtoPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("fromto"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(fromtoPropertyTree!= null):((fromtoPropertyTree == null)||(!fromtoPropertyTree.isLeaf())))) {
            this.fromto = _other.fromto;
        }
        final PropertyTree posPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("pos"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(posPropertyTree!= null):((posPropertyTree == null)||(!posPropertyTree.isLeaf())))) {
            this.pos = _other.pos;
        }
        final PropertyTree quatPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("quat"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(quatPropertyTree!= null):((quatPropertyTree == null)||(!quatPropertyTree.isLeaf())))) {
            this.quat = _other.quat;
        }
        final PropertyTree axisanglePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("axisangle"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(axisanglePropertyTree!= null):((axisanglePropertyTree == null)||(!axisanglePropertyTree.isLeaf())))) {
            this.axisangle = _other.axisangle;
        }
        final PropertyTree eulerPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("euler"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(eulerPropertyTree!= null):((eulerPropertyTree == null)||(!eulerPropertyTree.isLeaf())))) {
            this.euler = _other.euler;
        }
        final PropertyTree xyaxesPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("xyaxes"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(xyaxesPropertyTree!= null):((xyaxesPropertyTree == null)||(!xyaxesPropertyTree.isLeaf())))) {
            this.xyaxes = _other.xyaxes;
        }
        final PropertyTree zaxisPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("zaxis"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(zaxisPropertyTree!= null):((zaxisPropertyTree == null)||(!zaxisPropertyTree.isLeaf())))) {
            this.zaxis = _other.zaxis;
        }
        final PropertyTree userPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("user"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(userPropertyTree!= null):((userPropertyTree == null)||(!userPropertyTree.isLeaf())))) {
            this.user = _other.user;
        }
    }

    /**
     * Gets the value of the name property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getName() {
        return name;
    }

    /**
     * Gets the value of the clazz property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getClazz() {
        return clazz;
    }

    /**
     * Gets the value of the type property.
     * 
     * @return
     *     possible object is
     *     {@link SitetypeType }
     *     
     */
    public SitetypeType getType() {
        if (type == null) {
            return SitetypeType.SPHERE;
        } else {
            return type;
        }
    }

    /**
     * Gets the value of the group property.
     * 
     * @return
     *     possible object is
     *     {@link Integer }
     *     
     */
    public int getGroup() {
        if (group == null) {
            return  0;
        } else {
            return group;
        }
    }

    /**
     * Gets the value of the material property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getMaterial() {
        return material;
    }

    /**
     * Gets the value of the rgba property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getRgba() {
        if (rgba == null) {
            return "0.5 0.5 0.5 1";
        } else {
            return rgba;
        }
    }

    /**
     * Gets the value of the size property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getSize() {
        if (size == null) {
            return "0.005 0.005 0.005";
        } else {
            return size;
        }
    }

    /**
     * Gets the value of the fromto property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getFromto() {
        return fromto;
    }

    /**
     * Gets the value of the pos property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getPos() {
        if (pos == null) {
            return "0 0 0";
        } else {
            return pos;
        }
    }

    /**
     * Gets the value of the quat property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getQuat() {
        if (quat == null) {
            return "1 0 0 0";
        } else {
            return quat;
        }
    }

    /**
     * Gets the value of the axisangle property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getAxisangle() {
        return axisangle;
    }

    /**
     * Gets the value of the euler property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getEuler() {
        return euler;
    }

    /**
     * Gets the value of the xyaxes property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getXyaxes() {
        return xyaxes;
    }

    /**
     * Gets the value of the zaxis property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getZaxis() {
        return zaxis;
    }

    /**
     * Gets the value of the user property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getUser() {
        return user;
    }

    public void addVetoableChangeListener(final VetoableChangeListener vetoableChangeListener) {
        this.vetoableChange__Support.addVetoableChangeListener(vetoableChangeListener);
    }

    public void removeVetoableChangeListener(final VetoableChangeListener vetoableChangeListener) {
        this.vetoableChange__Support.removeVetoableChangeListener(vetoableChangeListener);
    }

    public SiteType withVetoableChangeListener(final VetoableChangeListener vetoableChangeListener) {
        addVetoableChangeListener(vetoableChangeListener);
        return this;
    }

    public void addPropertyChangeListener(final PropertyChangeListener propertyChangeListener) {
        this.propertyChange__Support.addPropertyChangeListener(propertyChangeListener);
    }

    public void removePropertyChangeListener(final PropertyChangeListener propertyChangeListener) {
        this.propertyChange__Support.removePropertyChangeListener(propertyChangeListener);
    }

    public SiteType withPropertyChangeListener(final PropertyChangeListener propertyChangeListener) {
        addPropertyChangeListener(propertyChangeListener);
        return this;
    }

    public void setName(final String value) {
        final String __oldValue = this.name;
        try {
            this.vetoableChange__Support.fireVetoableChange("name", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.name = value;
        this.propertyChange__Support.firePropertyChange("name", __oldValue, value);
    }

    public void setClazz(final String value) {
        final String __oldValue = this.clazz;
        try {
            this.vetoableChange__Support.fireVetoableChange("clazz", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.clazz = value;
        this.propertyChange__Support.firePropertyChange("clazz", __oldValue, value);
    }

    public void setType(final SitetypeType value) {
        final SitetypeType __oldValue = this.type;
        try {
            this.vetoableChange__Support.fireVetoableChange("type", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.type = value;
        this.propertyChange__Support.firePropertyChange("type", __oldValue, value);
    }

    public void setGroup(final Integer value) {
        final Integer __oldValue = this.group;
        try {
            this.vetoableChange__Support.fireVetoableChange("group", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.group = value;
        this.propertyChange__Support.firePropertyChange("group", __oldValue, value);
    }

    public void setMaterial(final String value) {
        final String __oldValue = this.material;
        try {
            this.vetoableChange__Support.fireVetoableChange("material", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.material = value;
        this.propertyChange__Support.firePropertyChange("material", __oldValue, value);
    }

    public void setRgba(final String value) {
        final String __oldValue = this.rgba;
        try {
            this.vetoableChange__Support.fireVetoableChange("rgba", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.rgba = value;
        this.propertyChange__Support.firePropertyChange("rgba", __oldValue, value);
    }

    public void setSize(final String value) {
        final String __oldValue = this.size;
        try {
            this.vetoableChange__Support.fireVetoableChange("size", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.size = value;
        this.propertyChange__Support.firePropertyChange("size", __oldValue, value);
    }

    public void setFromto(final String value) {
        final String __oldValue = this.fromto;
        try {
            this.vetoableChange__Support.fireVetoableChange("fromto", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.fromto = value;
        this.propertyChange__Support.firePropertyChange("fromto", __oldValue, value);
    }

    public void setPos(final String value) {
        final String __oldValue = this.pos;
        try {
            this.vetoableChange__Support.fireVetoableChange("pos", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.pos = value;
        this.propertyChange__Support.firePropertyChange("pos", __oldValue, value);
    }

    public void setQuat(final String value) {
        final String __oldValue = this.quat;
        try {
            this.vetoableChange__Support.fireVetoableChange("quat", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.quat = value;
        this.propertyChange__Support.firePropertyChange("quat", __oldValue, value);
    }

    public void setAxisangle(final String value) {
        final String __oldValue = this.axisangle;
        try {
            this.vetoableChange__Support.fireVetoableChange("axisangle", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.axisangle = value;
        this.propertyChange__Support.firePropertyChange("axisangle", __oldValue, value);
    }

    public void setEuler(final String value) {
        final String __oldValue = this.euler;
        try {
            this.vetoableChange__Support.fireVetoableChange("euler", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.euler = value;
        this.propertyChange__Support.firePropertyChange("euler", __oldValue, value);
    }

    public void setXyaxes(final String value) {
        final String __oldValue = this.xyaxes;
        try {
            this.vetoableChange__Support.fireVetoableChange("xyaxes", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.xyaxes = value;
        this.propertyChange__Support.firePropertyChange("xyaxes", __oldValue, value);
    }

    public void setZaxis(final String value) {
        final String __oldValue = this.zaxis;
        try {
            this.vetoableChange__Support.fireVetoableChange("zaxis", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.zaxis = value;
        this.propertyChange__Support.firePropertyChange("zaxis", __oldValue, value);
    }

    public void setUser(final String value) {
        final String __oldValue = this.user;
        try {
            this.vetoableChange__Support.fireVetoableChange("user", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.user = value;
        this.propertyChange__Support.firePropertyChange("user", __oldValue, value);
    }

    @Override
    public SiteType clone() {
        final SiteType _newObject;
        try {
            _newObject = ((SiteType) super.clone());
        } catch (CloneNotSupportedException e) {
            throw new RuntimeException(e);
        }
        return _newObject;
    }

    @Override
    public SiteType createCopy() {
        final SiteType _newObject;
        try {
            _newObject = ((SiteType) super.clone());
        } catch (CloneNotSupportedException e) {
            throw new RuntimeException(e);
        }
        _newObject.name = this.name;
        _newObject.clazz = this.clazz;
        _newObject.type = this.type;
        _newObject.group = this.group;
        _newObject.material = this.material;
        _newObject.rgba = this.rgba;
        _newObject.size = this.size;
        _newObject.fromto = this.fromto;
        _newObject.pos = this.pos;
        _newObject.quat = this.quat;
        _newObject.axisangle = this.axisangle;
        _newObject.euler = this.euler;
        _newObject.xyaxes = this.xyaxes;
        _newObject.zaxis = this.zaxis;
        _newObject.user = this.user;
        return _newObject;
    }

    @Override
    public SiteType createCopy(final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        final SiteType _newObject;
        try {
            _newObject = ((SiteType) super.clone());
        } catch (CloneNotSupportedException e) {
            throw new RuntimeException(e);
        }
        final PropertyTree namePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("name"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(namePropertyTree!= null):((namePropertyTree == null)||(!namePropertyTree.isLeaf())))) {
            _newObject.name = this.name;
        }
        final PropertyTree clazzPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("clazz"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(clazzPropertyTree!= null):((clazzPropertyTree == null)||(!clazzPropertyTree.isLeaf())))) {
            _newObject.clazz = this.clazz;
        }
        final PropertyTree typePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("type"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(typePropertyTree!= null):((typePropertyTree == null)||(!typePropertyTree.isLeaf())))) {
            _newObject.type = this.type;
        }
        final PropertyTree groupPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("group"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(groupPropertyTree!= null):((groupPropertyTree == null)||(!groupPropertyTree.isLeaf())))) {
            _newObject.group = this.group;
        }
        final PropertyTree materialPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("material"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(materialPropertyTree!= null):((materialPropertyTree == null)||(!materialPropertyTree.isLeaf())))) {
            _newObject.material = this.material;
        }
        final PropertyTree rgbaPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("rgba"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(rgbaPropertyTree!= null):((rgbaPropertyTree == null)||(!rgbaPropertyTree.isLeaf())))) {
            _newObject.rgba = this.rgba;
        }
        final PropertyTree sizePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("size"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(sizePropertyTree!= null):((sizePropertyTree == null)||(!sizePropertyTree.isLeaf())))) {
            _newObject.size = this.size;
        }
        final PropertyTree fromtoPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("fromto"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(fromtoPropertyTree!= null):((fromtoPropertyTree == null)||(!fromtoPropertyTree.isLeaf())))) {
            _newObject.fromto = this.fromto;
        }
        final PropertyTree posPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("pos"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(posPropertyTree!= null):((posPropertyTree == null)||(!posPropertyTree.isLeaf())))) {
            _newObject.pos = this.pos;
        }
        final PropertyTree quatPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("quat"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(quatPropertyTree!= null):((quatPropertyTree == null)||(!quatPropertyTree.isLeaf())))) {
            _newObject.quat = this.quat;
        }
        final PropertyTree axisanglePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("axisangle"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(axisanglePropertyTree!= null):((axisanglePropertyTree == null)||(!axisanglePropertyTree.isLeaf())))) {
            _newObject.axisangle = this.axisangle;
        }
        final PropertyTree eulerPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("euler"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(eulerPropertyTree!= null):((eulerPropertyTree == null)||(!eulerPropertyTree.isLeaf())))) {
            _newObject.euler = this.euler;
        }
        final PropertyTree xyaxesPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("xyaxes"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(xyaxesPropertyTree!= null):((xyaxesPropertyTree == null)||(!xyaxesPropertyTree.isLeaf())))) {
            _newObject.xyaxes = this.xyaxes;
        }
        final PropertyTree zaxisPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("zaxis"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(zaxisPropertyTree!= null):((zaxisPropertyTree == null)||(!zaxisPropertyTree.isLeaf())))) {
            _newObject.zaxis = this.zaxis;
        }
        final PropertyTree userPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("user"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(userPropertyTree!= null):((userPropertyTree == null)||(!userPropertyTree.isLeaf())))) {
            _newObject.user = this.user;
        }
        return _newObject;
    }

    @Override
    public SiteType copyExcept(final PropertyTree _propertyTree) {
        return createCopy(_propertyTree, PropertyTreeUse.EXCLUDE);
    }

    @Override
    public SiteType copyOnly(final PropertyTree _propertyTree) {
        return createCopy(_propertyTree, PropertyTreeUse.INCLUDE);
    }

    /**
     * Copies all state of this object to a builder. This method is used by the {@link #copyOf} method and should not be called directly by client code.
     * 
     * @param _other
     *     A builder instance to which the state of this object will be copied.
     */
    public<_B >void copyTo(final SiteType.Builder<_B> _other) {
        _other.name = this.name;
        _other.clazz = this.clazz;
        _other.type = this.type;
        _other.group = this.group;
        _other.material = this.material;
        _other.rgba = this.rgba;
        _other.size = this.size;
        _other.fromto = this.fromto;
        _other.pos = this.pos;
        _other.quat = this.quat;
        _other.axisangle = this.axisangle;
        _other.euler = this.euler;
        _other.xyaxes = this.xyaxes;
        _other.zaxis = this.zaxis;
        _other.user = this.user;
    }

    public<_B >SiteType.Builder<_B> newCopyBuilder(final _B _parentBuilder) {
        return new SiteType.Builder<_B>(_parentBuilder, this, true);
    }

    public SiteType.Builder<Void> newCopyBuilder() {
        return newCopyBuilder(null);
    }

    public static SiteType.Builder<Void> builder() {
        return new SiteType.Builder<Void>(null, null, false);
    }

    public static<_B >SiteType.Builder<_B> copyOf(final SiteType _other) {
        final SiteType.Builder<_B> _newBuilder = new SiteType.Builder<_B>(null, null, false);
        _other.copyTo(_newBuilder);
        return _newBuilder;
    }

    /**
     * Copies all state of this object to a builder. This method is used by the {@link #copyOf} method and should not be called directly by client code.
     * 
     * @param _other
     *     A builder instance to which the state of this object will be copied.
     */
    public<_B >void copyTo(final SiteType.Builder<_B> _other, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        final PropertyTree namePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("name"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(namePropertyTree!= null):((namePropertyTree == null)||(!namePropertyTree.isLeaf())))) {
            _other.name = this.name;
        }
        final PropertyTree clazzPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("clazz"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(clazzPropertyTree!= null):((clazzPropertyTree == null)||(!clazzPropertyTree.isLeaf())))) {
            _other.clazz = this.clazz;
        }
        final PropertyTree typePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("type"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(typePropertyTree!= null):((typePropertyTree == null)||(!typePropertyTree.isLeaf())))) {
            _other.type = this.type;
        }
        final PropertyTree groupPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("group"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(groupPropertyTree!= null):((groupPropertyTree == null)||(!groupPropertyTree.isLeaf())))) {
            _other.group = this.group;
        }
        final PropertyTree materialPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("material"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(materialPropertyTree!= null):((materialPropertyTree == null)||(!materialPropertyTree.isLeaf())))) {
            _other.material = this.material;
        }
        final PropertyTree rgbaPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("rgba"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(rgbaPropertyTree!= null):((rgbaPropertyTree == null)||(!rgbaPropertyTree.isLeaf())))) {
            _other.rgba = this.rgba;
        }
        final PropertyTree sizePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("size"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(sizePropertyTree!= null):((sizePropertyTree == null)||(!sizePropertyTree.isLeaf())))) {
            _other.size = this.size;
        }
        final PropertyTree fromtoPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("fromto"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(fromtoPropertyTree!= null):((fromtoPropertyTree == null)||(!fromtoPropertyTree.isLeaf())))) {
            _other.fromto = this.fromto;
        }
        final PropertyTree posPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("pos"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(posPropertyTree!= null):((posPropertyTree == null)||(!posPropertyTree.isLeaf())))) {
            _other.pos = this.pos;
        }
        final PropertyTree quatPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("quat"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(quatPropertyTree!= null):((quatPropertyTree == null)||(!quatPropertyTree.isLeaf())))) {
            _other.quat = this.quat;
        }
        final PropertyTree axisanglePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("axisangle"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(axisanglePropertyTree!= null):((axisanglePropertyTree == null)||(!axisanglePropertyTree.isLeaf())))) {
            _other.axisangle = this.axisangle;
        }
        final PropertyTree eulerPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("euler"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(eulerPropertyTree!= null):((eulerPropertyTree == null)||(!eulerPropertyTree.isLeaf())))) {
            _other.euler = this.euler;
        }
        final PropertyTree xyaxesPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("xyaxes"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(xyaxesPropertyTree!= null):((xyaxesPropertyTree == null)||(!xyaxesPropertyTree.isLeaf())))) {
            _other.xyaxes = this.xyaxes;
        }
        final PropertyTree zaxisPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("zaxis"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(zaxisPropertyTree!= null):((zaxisPropertyTree == null)||(!zaxisPropertyTree.isLeaf())))) {
            _other.zaxis = this.zaxis;
        }
        final PropertyTree userPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("user"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(userPropertyTree!= null):((userPropertyTree == null)||(!userPropertyTree.isLeaf())))) {
            _other.user = this.user;
        }
    }

    public<_B >SiteType.Builder<_B> newCopyBuilder(final _B _parentBuilder, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        return new SiteType.Builder<_B>(_parentBuilder, this, true, _propertyTree, _propertyTreeUse);
    }

    public SiteType.Builder<Void> newCopyBuilder(final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        return newCopyBuilder(null, _propertyTree, _propertyTreeUse);
    }

    public static<_B >SiteType.Builder<_B> copyOf(final SiteType _other, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        final SiteType.Builder<_B> _newBuilder = new SiteType.Builder<_B>(null, null, false);
        _other.copyTo(_newBuilder, _propertyTree, _propertyTreeUse);
        return _newBuilder;
    }

    public static SiteType.Builder<Void> copyExcept(final SiteType _other, final PropertyTree _propertyTree) {
        return copyOf(_other, _propertyTree, PropertyTreeUse.EXCLUDE);
    }

    public static SiteType.Builder<Void> copyOnly(final SiteType _other, final PropertyTree _propertyTree) {
        return copyOf(_other, _propertyTree, PropertyTreeUse.INCLUDE);
    }

    public SiteType visit(final PropertyVisitor _visitor_) {
        _visitor_.visit(this);
        return this;
    }

    public static class Builder<_B >implements Buildable
    {

        protected final _B _parentBuilder;
        private String name;
        private String clazz;
        private SitetypeType type;
        private Integer group;
        private String material;
        private String rgba;
        private String size;
        private String fromto;
        private String pos;
        private String quat;
        private String axisangle;
        private String euler;
        private String xyaxes;
        private String zaxis;
        private String user;

        public Builder(final _B _parentBuilder, final SiteType _other, final boolean _copy) {
            this._parentBuilder = _parentBuilder;
            if (_other!= null) {
                this.name = _other.name;
                this.clazz = _other.clazz;
                this.type = _other.type;
                this.group = _other.group;
                this.material = _other.material;
                this.rgba = _other.rgba;
                this.size = _other.size;
                this.fromto = _other.fromto;
                this.pos = _other.pos;
                this.quat = _other.quat;
                this.axisangle = _other.axisangle;
                this.euler = _other.euler;
                this.xyaxes = _other.xyaxes;
                this.zaxis = _other.zaxis;
                this.user = _other.user;
            }
        }

        public Builder(final _B _parentBuilder, final SiteType _other, final boolean _copy, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
            this._parentBuilder = _parentBuilder;
            if (_other!= null) {
                final PropertyTree namePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("name"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(namePropertyTree!= null):((namePropertyTree == null)||(!namePropertyTree.isLeaf())))) {
                    this.name = _other.name;
                }
                final PropertyTree clazzPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("clazz"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(clazzPropertyTree!= null):((clazzPropertyTree == null)||(!clazzPropertyTree.isLeaf())))) {
                    this.clazz = _other.clazz;
                }
                final PropertyTree typePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("type"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(typePropertyTree!= null):((typePropertyTree == null)||(!typePropertyTree.isLeaf())))) {
                    this.type = _other.type;
                }
                final PropertyTree groupPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("group"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(groupPropertyTree!= null):((groupPropertyTree == null)||(!groupPropertyTree.isLeaf())))) {
                    this.group = _other.group;
                }
                final PropertyTree materialPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("material"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(materialPropertyTree!= null):((materialPropertyTree == null)||(!materialPropertyTree.isLeaf())))) {
                    this.material = _other.material;
                }
                final PropertyTree rgbaPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("rgba"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(rgbaPropertyTree!= null):((rgbaPropertyTree == null)||(!rgbaPropertyTree.isLeaf())))) {
                    this.rgba = _other.rgba;
                }
                final PropertyTree sizePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("size"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(sizePropertyTree!= null):((sizePropertyTree == null)||(!sizePropertyTree.isLeaf())))) {
                    this.size = _other.size;
                }
                final PropertyTree fromtoPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("fromto"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(fromtoPropertyTree!= null):((fromtoPropertyTree == null)||(!fromtoPropertyTree.isLeaf())))) {
                    this.fromto = _other.fromto;
                }
                final PropertyTree posPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("pos"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(posPropertyTree!= null):((posPropertyTree == null)||(!posPropertyTree.isLeaf())))) {
                    this.pos = _other.pos;
                }
                final PropertyTree quatPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("quat"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(quatPropertyTree!= null):((quatPropertyTree == null)||(!quatPropertyTree.isLeaf())))) {
                    this.quat = _other.quat;
                }
                final PropertyTree axisanglePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("axisangle"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(axisanglePropertyTree!= null):((axisanglePropertyTree == null)||(!axisanglePropertyTree.isLeaf())))) {
                    this.axisangle = _other.axisangle;
                }
                final PropertyTree eulerPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("euler"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(eulerPropertyTree!= null):((eulerPropertyTree == null)||(!eulerPropertyTree.isLeaf())))) {
                    this.euler = _other.euler;
                }
                final PropertyTree xyaxesPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("xyaxes"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(xyaxesPropertyTree!= null):((xyaxesPropertyTree == null)||(!xyaxesPropertyTree.isLeaf())))) {
                    this.xyaxes = _other.xyaxes;
                }
                final PropertyTree zaxisPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("zaxis"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(zaxisPropertyTree!= null):((zaxisPropertyTree == null)||(!zaxisPropertyTree.isLeaf())))) {
                    this.zaxis = _other.zaxis;
                }
                final PropertyTree userPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("user"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(userPropertyTree!= null):((userPropertyTree == null)||(!userPropertyTree.isLeaf())))) {
                    this.user = _other.user;
                }
            }
        }

        public _B end() {
            return this._parentBuilder;
        }

        protected<_P extends SiteType >_P init(final _P _product) {
            _product.name = this.name;
            _product.clazz = this.clazz;
            _product.type = this.type;
            _product.group = this.group;
            _product.material = this.material;
            _product.rgba = this.rgba;
            _product.size = this.size;
            _product.fromto = this.fromto;
            _product.pos = this.pos;
            _product.quat = this.quat;
            _product.axisangle = this.axisangle;
            _product.euler = this.euler;
            _product.xyaxes = this.xyaxes;
            _product.zaxis = this.zaxis;
            _product.user = this.user;
            return _product;
        }

        /**
         * Sets the new value of "name" (any previous value will be replaced)
         * 
         * @param name
         *     New value of the "name" property.
         */
        public SiteType.Builder<_B> withName(final String name) {
            this.name = name;
            return this;
        }

        /**
         * Sets the new value of "clazz" (any previous value will be replaced)
         * 
         * @param clazz
         *     New value of the "clazz" property.
         */
        public SiteType.Builder<_B> withClazz(final String clazz) {
            this.clazz = clazz;
            return this;
        }

        /**
         * Sets the new value of "type" (any previous value will be replaced)
         * 
         * @param type
         *     New value of the "type" property.
         */
        public SiteType.Builder<_B> withType(final SitetypeType type) {
            this.type = type;
            return this;
        }

        /**
         * Sets the new value of "group" (any previous value will be replaced)
         * 
         * @param group
         *     New value of the "group" property.
         */
        public SiteType.Builder<_B> withGroup(final Integer group) {
            this.group = group;
            return this;
        }

        /**
         * Sets the new value of "material" (any previous value will be replaced)
         * 
         * @param material
         *     New value of the "material" property.
         */
        public SiteType.Builder<_B> withMaterial(final String material) {
            this.material = material;
            return this;
        }

        /**
         * Sets the new value of "rgba" (any previous value will be replaced)
         * 
         * @param rgba
         *     New value of the "rgba" property.
         */
        public SiteType.Builder<_B> withRgba(final String rgba) {
            this.rgba = rgba;
            return this;
        }

        /**
         * Sets the new value of "size" (any previous value will be replaced)
         * 
         * @param size
         *     New value of the "size" property.
         */
        public SiteType.Builder<_B> withSize(final String size) {
            this.size = size;
            return this;
        }

        /**
         * Sets the new value of "fromto" (any previous value will be replaced)
         * 
         * @param fromto
         *     New value of the "fromto" property.
         */
        public SiteType.Builder<_B> withFromto(final String fromto) {
            this.fromto = fromto;
            return this;
        }

        /**
         * Sets the new value of "pos" (any previous value will be replaced)
         * 
         * @param pos
         *     New value of the "pos" property.
         */
        public SiteType.Builder<_B> withPos(final String pos) {
            this.pos = pos;
            return this;
        }

        /**
         * Sets the new value of "quat" (any previous value will be replaced)
         * 
         * @param quat
         *     New value of the "quat" property.
         */
        public SiteType.Builder<_B> withQuat(final String quat) {
            this.quat = quat;
            return this;
        }

        /**
         * Sets the new value of "axisangle" (any previous value will be replaced)
         * 
         * @param axisangle
         *     New value of the "axisangle" property.
         */
        public SiteType.Builder<_B> withAxisangle(final String axisangle) {
            this.axisangle = axisangle;
            return this;
        }

        /**
         * Sets the new value of "euler" (any previous value will be replaced)
         * 
         * @param euler
         *     New value of the "euler" property.
         */
        public SiteType.Builder<_B> withEuler(final String euler) {
            this.euler = euler;
            return this;
        }

        /**
         * Sets the new value of "xyaxes" (any previous value will be replaced)
         * 
         * @param xyaxes
         *     New value of the "xyaxes" property.
         */
        public SiteType.Builder<_B> withXyaxes(final String xyaxes) {
            this.xyaxes = xyaxes;
            return this;
        }

        /**
         * Sets the new value of "zaxis" (any previous value will be replaced)
         * 
         * @param zaxis
         *     New value of the "zaxis" property.
         */
        public SiteType.Builder<_B> withZaxis(final String zaxis) {
            this.zaxis = zaxis;
            return this;
        }

        /**
         * Sets the new value of "user" (any previous value will be replaced)
         * 
         * @param user
         *     New value of the "user" property.
         */
        public SiteType.Builder<_B> withUser(final String user) {
            this.user = user;
            return this;
        }

        @Override
        public SiteType build() {
            return this.init(new SiteType());
        }

        public SiteType.Builder<_B> copyOf(final SiteType _other) {
            _other.copyTo(this);
            return this;
        }

        public SiteType.Builder<_B> copyOf(final SiteType.Builder _other) {
            return copyOf(_other.build());
        }

    }

    public static class PropInfo {

        public final static transient String NAME = "name";
        public final static transient String CLAZZ = "clazz";
        public final static transient String TYPE = "type";
        public final static transient String GROUP = "group";
        public final static transient String MATERIAL = "material";
        public final static transient String RGBA = "rgba";
        public final static transient String SIZE = "size";
        public final static transient String FROMTO = "fromto";
        public final static transient String POS = "pos";
        public final static transient String QUAT = "quat";
        public final static transient String AXISANGLE = "axisangle";
        public final static transient String EULER = "euler";
        public final static transient String XYAXES = "xyaxes";
        public final static transient String ZAXIS = "zaxis";
        public final static transient String USER = "user";

    }

    public static class Select
        extends SiteType.Selector<SiteType.Select, Void>
    {


        Select() {
            super(null, null, null);
        }

        public static SiteType.Select _root() {
            return new SiteType.Select();
        }

    }

    public static class Selector<TRoot extends com.kscs.util.jaxb.Selector<TRoot, ?> , TParent >
        extends com.kscs.util.jaxb.Selector<TRoot, TParent>
    {

        private com.kscs.util.jaxb.Selector<TRoot, SiteType.Selector<TRoot, TParent>> name = null;
        private com.kscs.util.jaxb.Selector<TRoot, SiteType.Selector<TRoot, TParent>> clazz = null;
        private com.kscs.util.jaxb.Selector<TRoot, SiteType.Selector<TRoot, TParent>> type = null;
        private com.kscs.util.jaxb.Selector<TRoot, SiteType.Selector<TRoot, TParent>> group = null;
        private com.kscs.util.jaxb.Selector<TRoot, SiteType.Selector<TRoot, TParent>> material = null;
        private com.kscs.util.jaxb.Selector<TRoot, SiteType.Selector<TRoot, TParent>> rgba = null;
        private com.kscs.util.jaxb.Selector<TRoot, SiteType.Selector<TRoot, TParent>> size = null;
        private com.kscs.util.jaxb.Selector<TRoot, SiteType.Selector<TRoot, TParent>> fromto = null;
        private com.kscs.util.jaxb.Selector<TRoot, SiteType.Selector<TRoot, TParent>> pos = null;
        private com.kscs.util.jaxb.Selector<TRoot, SiteType.Selector<TRoot, TParent>> quat = null;
        private com.kscs.util.jaxb.Selector<TRoot, SiteType.Selector<TRoot, TParent>> axisangle = null;
        private com.kscs.util.jaxb.Selector<TRoot, SiteType.Selector<TRoot, TParent>> euler = null;
        private com.kscs.util.jaxb.Selector<TRoot, SiteType.Selector<TRoot, TParent>> xyaxes = null;
        private com.kscs.util.jaxb.Selector<TRoot, SiteType.Selector<TRoot, TParent>> zaxis = null;
        private com.kscs.util.jaxb.Selector<TRoot, SiteType.Selector<TRoot, TParent>> user = null;

        public Selector(final TRoot root, final TParent parent, final String propertyName) {
            super(root, parent, propertyName);
        }

        @Override
        public Map<String, PropertyTree> buildChildren() {
            final Map<String, PropertyTree> products = new HashMap<String, PropertyTree>();
            products.putAll(super.buildChildren());
            if (this.name!= null) {
                products.put("name", this.name.init());
            }
            if (this.clazz!= null) {
                products.put("clazz", this.clazz.init());
            }
            if (this.type!= null) {
                products.put("type", this.type.init());
            }
            if (this.group!= null) {
                products.put("group", this.group.init());
            }
            if (this.material!= null) {
                products.put("material", this.material.init());
            }
            if (this.rgba!= null) {
                products.put("rgba", this.rgba.init());
            }
            if (this.size!= null) {
                products.put("size", this.size.init());
            }
            if (this.fromto!= null) {
                products.put("fromto", this.fromto.init());
            }
            if (this.pos!= null) {
                products.put("pos", this.pos.init());
            }
            if (this.quat!= null) {
                products.put("quat", this.quat.init());
            }
            if (this.axisangle!= null) {
                products.put("axisangle", this.axisangle.init());
            }
            if (this.euler!= null) {
                products.put("euler", this.euler.init());
            }
            if (this.xyaxes!= null) {
                products.put("xyaxes", this.xyaxes.init());
            }
            if (this.zaxis!= null) {
                products.put("zaxis", this.zaxis.init());
            }
            if (this.user!= null) {
                products.put("user", this.user.init());
            }
            return products;
        }

        public com.kscs.util.jaxb.Selector<TRoot, SiteType.Selector<TRoot, TParent>> name() {
            return ((this.name == null)?this.name = new com.kscs.util.jaxb.Selector<TRoot, SiteType.Selector<TRoot, TParent>>(this._root, this, "name"):this.name);
        }

        public com.kscs.util.jaxb.Selector<TRoot, SiteType.Selector<TRoot, TParent>> clazz() {
            return ((this.clazz == null)?this.clazz = new com.kscs.util.jaxb.Selector<TRoot, SiteType.Selector<TRoot, TParent>>(this._root, this, "clazz"):this.clazz);
        }

        public com.kscs.util.jaxb.Selector<TRoot, SiteType.Selector<TRoot, TParent>> type() {
            return ((this.type == null)?this.type = new com.kscs.util.jaxb.Selector<TRoot, SiteType.Selector<TRoot, TParent>>(this._root, this, "type"):this.type);
        }

        public com.kscs.util.jaxb.Selector<TRoot, SiteType.Selector<TRoot, TParent>> group() {
            return ((this.group == null)?this.group = new com.kscs.util.jaxb.Selector<TRoot, SiteType.Selector<TRoot, TParent>>(this._root, this, "group"):this.group);
        }

        public com.kscs.util.jaxb.Selector<TRoot, SiteType.Selector<TRoot, TParent>> material() {
            return ((this.material == null)?this.material = new com.kscs.util.jaxb.Selector<TRoot, SiteType.Selector<TRoot, TParent>>(this._root, this, "material"):this.material);
        }

        public com.kscs.util.jaxb.Selector<TRoot, SiteType.Selector<TRoot, TParent>> rgba() {
            return ((this.rgba == null)?this.rgba = new com.kscs.util.jaxb.Selector<TRoot, SiteType.Selector<TRoot, TParent>>(this._root, this, "rgba"):this.rgba);
        }

        public com.kscs.util.jaxb.Selector<TRoot, SiteType.Selector<TRoot, TParent>> size() {
            return ((this.size == null)?this.size = new com.kscs.util.jaxb.Selector<TRoot, SiteType.Selector<TRoot, TParent>>(this._root, this, "size"):this.size);
        }

        public com.kscs.util.jaxb.Selector<TRoot, SiteType.Selector<TRoot, TParent>> fromto() {
            return ((this.fromto == null)?this.fromto = new com.kscs.util.jaxb.Selector<TRoot, SiteType.Selector<TRoot, TParent>>(this._root, this, "fromto"):this.fromto);
        }

        public com.kscs.util.jaxb.Selector<TRoot, SiteType.Selector<TRoot, TParent>> pos() {
            return ((this.pos == null)?this.pos = new com.kscs.util.jaxb.Selector<TRoot, SiteType.Selector<TRoot, TParent>>(this._root, this, "pos"):this.pos);
        }

        public com.kscs.util.jaxb.Selector<TRoot, SiteType.Selector<TRoot, TParent>> quat() {
            return ((this.quat == null)?this.quat = new com.kscs.util.jaxb.Selector<TRoot, SiteType.Selector<TRoot, TParent>>(this._root, this, "quat"):this.quat);
        }

        public com.kscs.util.jaxb.Selector<TRoot, SiteType.Selector<TRoot, TParent>> axisangle() {
            return ((this.axisangle == null)?this.axisangle = new com.kscs.util.jaxb.Selector<TRoot, SiteType.Selector<TRoot, TParent>>(this._root, this, "axisangle"):this.axisangle);
        }

        public com.kscs.util.jaxb.Selector<TRoot, SiteType.Selector<TRoot, TParent>> euler() {
            return ((this.euler == null)?this.euler = new com.kscs.util.jaxb.Selector<TRoot, SiteType.Selector<TRoot, TParent>>(this._root, this, "euler"):this.euler);
        }

        public com.kscs.util.jaxb.Selector<TRoot, SiteType.Selector<TRoot, TParent>> xyaxes() {
            return ((this.xyaxes == null)?this.xyaxes = new com.kscs.util.jaxb.Selector<TRoot, SiteType.Selector<TRoot, TParent>>(this._root, this, "xyaxes"):this.xyaxes);
        }

        public com.kscs.util.jaxb.Selector<TRoot, SiteType.Selector<TRoot, TParent>> zaxis() {
            return ((this.zaxis == null)?this.zaxis = new com.kscs.util.jaxb.Selector<TRoot, SiteType.Selector<TRoot, TParent>>(this._root, this, "zaxis"):this.zaxis);
        }

        public com.kscs.util.jaxb.Selector<TRoot, SiteType.Selector<TRoot, TParent>> user() {
            return ((this.user == null)?this.user = new com.kscs.util.jaxb.Selector<TRoot, SiteType.Selector<TRoot, TParent>>(this._root, this, "user"):this.user);
        }

    }

}
