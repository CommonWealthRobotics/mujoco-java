//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.3.0 
// See <a href="https://javaee.github.io/jaxb-v2/">https://javaee.github.io/jaxb-v2/</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2024.03.13 at 04:32:01 PM EDT 
//


package org.mujoco.xml.body;

import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeSupport;
import java.beans.PropertyVetoException;
import java.beans.VetoableChangeListener;
import java.beans.VetoableChangeSupport;
import java.math.BigDecimal;
import java.util.HashMap;
import java.util.Map;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlType;
import com.kscs.util.jaxb.Buildable;
import com.kscs.util.jaxb.Copyable;
import com.kscs.util.jaxb.PartialCopyable;
import com.kscs.util.jaxb.PropertyTree;
import com.kscs.util.jaxb.PropertyTreeUse;
import com.kscs.util.jaxb.PropertyVisitor;
import org.mujoco.xml.attributetypes.GeomtypeType;


/**
 * <p>Java class for compositegeomType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="compositegeomType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;attribute name="type" type="{attributeTypes}geomtypeType" default="sphere" /&gt;
 *       &lt;attribute name="contype" type="{http://www.w3.org/2001/XMLSchema}int" default="1" /&gt;
 *       &lt;attribute name="conaffinity" type="{http://www.w3.org/2001/XMLSchema}int" default="1" /&gt;
 *       &lt;attribute name="condim" type="{http://www.w3.org/2001/XMLSchema}int" default="3" /&gt;
 *       &lt;attribute name="group" type="{http://www.w3.org/2001/XMLSchema}int" default="0" /&gt;
 *       &lt;attribute name="priority" type="{http://www.w3.org/2001/XMLSchema}int" default="0" /&gt;
 *       &lt;attribute name="size" type="{attributeTypes}upToThreeRealsType" default="0 0 0" /&gt;
 *       &lt;attribute name="material" type="{http://www.w3.org/2001/XMLSchema}string" /&gt;
 *       &lt;attribute name="rgba" type="{attributeTypes}fourRealsType" default="0.5 0.5 0.5 1" /&gt;
 *       &lt;attribute name="friction" type="{attributeTypes}threeRealsType" default="1 0.005 0.0001" /&gt;
 *       &lt;attribute name="mass" type="{http://www.w3.org/2001/XMLSchema}decimal" /&gt;
 *       &lt;attribute name="density" type="{http://www.w3.org/2001/XMLSchema}decimal" default="1000" /&gt;
 *       &lt;attribute name="solmix" type="{http://www.w3.org/2001/XMLSchema}decimal" default="1" /&gt;
 *       &lt;attribute name="solimp" type="{attributeTypes}solimpType" default="0.9 0.95 0.001 0.5 2" /&gt;
 *       &lt;attribute name="solref" type="{attributeTypes}twoRealsType" default="0.02 1" /&gt;
 *       &lt;attribute name="margin" type="{http://www.w3.org/2001/XMLSchema}decimal" default="0" /&gt;
 *       &lt;attribute name="gap" type="{http://www.w3.org/2001/XMLSchema}decimal" default="0" /&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "compositegeomType")
public class CompositegeomType implements Cloneable, Copyable, PartialCopyable
{

    @XmlAttribute(name = "type")
    protected GeomtypeType type;
    @XmlAttribute(name = "contype")
    protected Integer contype;
    @XmlAttribute(name = "conaffinity")
    protected Integer conaffinity;
    @XmlAttribute(name = "condim")
    protected Integer condim;
    @XmlAttribute(name = "group")
    protected Integer group;
    @XmlAttribute(name = "priority")
    protected Integer priority;
    @XmlAttribute(name = "size")
    protected String size;
    @XmlAttribute(name = "material")
    protected String material;
    @XmlAttribute(name = "rgba")
    protected String rgba;
    @XmlAttribute(name = "friction")
    protected String friction;
    @XmlAttribute(name = "mass")
    protected BigDecimal mass;
    @XmlAttribute(name = "density")
    protected BigDecimal density;
    @XmlAttribute(name = "solmix")
    protected BigDecimal solmix;
    @XmlAttribute(name = "solimp")
    protected String solimp;
    @XmlAttribute(name = "solref")
    protected String solref;
    @XmlAttribute(name = "margin")
    protected BigDecimal margin;
    @XmlAttribute(name = "gap")
    protected BigDecimal gap;
    protected final transient VetoableChangeSupport vetoableChange__Support = new VetoableChangeSupport(this);
    protected final transient PropertyChangeSupport propertyChange__Support = new PropertyChangeSupport(this);

    /**
     * Generated by copy-constructor plugin, JAXB requires public no-arg constructor.
     * 
     */
    public CompositegeomType() {
        // Generated by copy-constructor plugin, JAXB requires public no-arg constructor.
    }

    /**
     * Instantiates a CompositegeomType copying the state of another CompositegeomType
     * 
     * @param _other
     *     The original CompositegeomType from which to copy state.
     */
    public CompositegeomType(final CompositegeomType _other) {
        this.type = _other.type;
        this.contype = _other.contype;
        this.conaffinity = _other.conaffinity;
        this.condim = _other.condim;
        this.group = _other.group;
        this.priority = _other.priority;
        this.size = _other.size;
        this.material = _other.material;
        this.rgba = _other.rgba;
        this.friction = _other.friction;
        this.mass = _other.mass;
        this.density = _other.density;
        this.solmix = _other.solmix;
        this.solimp = _other.solimp;
        this.solref = _other.solref;
        this.margin = _other.margin;
        this.gap = _other.gap;
    }

    /**
     * Instantiates a CompositegeomType copying the state of another CompositegeomType
     * 
     * @param _propertyTreeUse
     *     Meaning of the {@link PropertyPath}: Exclude or include members contained in property path.
     * @param _propertyTree
     *     A restricting {@link PropertyPath} that defines which nodes of the source object tree should actually be copied.
     * @param _other
     *     The original CompositegeomType from which to copy state.
     */
    public CompositegeomType(final CompositegeomType _other, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        final PropertyTree typePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("type"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(typePropertyTree!= null):((typePropertyTree == null)||(!typePropertyTree.isLeaf())))) {
            this.type = _other.type;
        }
        final PropertyTree contypePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("contype"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(contypePropertyTree!= null):((contypePropertyTree == null)||(!contypePropertyTree.isLeaf())))) {
            this.contype = _other.contype;
        }
        final PropertyTree conaffinityPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("conaffinity"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(conaffinityPropertyTree!= null):((conaffinityPropertyTree == null)||(!conaffinityPropertyTree.isLeaf())))) {
            this.conaffinity = _other.conaffinity;
        }
        final PropertyTree condimPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("condim"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(condimPropertyTree!= null):((condimPropertyTree == null)||(!condimPropertyTree.isLeaf())))) {
            this.condim = _other.condim;
        }
        final PropertyTree groupPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("group"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(groupPropertyTree!= null):((groupPropertyTree == null)||(!groupPropertyTree.isLeaf())))) {
            this.group = _other.group;
        }
        final PropertyTree priorityPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("priority"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(priorityPropertyTree!= null):((priorityPropertyTree == null)||(!priorityPropertyTree.isLeaf())))) {
            this.priority = _other.priority;
        }
        final PropertyTree sizePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("size"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(sizePropertyTree!= null):((sizePropertyTree == null)||(!sizePropertyTree.isLeaf())))) {
            this.size = _other.size;
        }
        final PropertyTree materialPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("material"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(materialPropertyTree!= null):((materialPropertyTree == null)||(!materialPropertyTree.isLeaf())))) {
            this.material = _other.material;
        }
        final PropertyTree rgbaPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("rgba"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(rgbaPropertyTree!= null):((rgbaPropertyTree == null)||(!rgbaPropertyTree.isLeaf())))) {
            this.rgba = _other.rgba;
        }
        final PropertyTree frictionPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("friction"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(frictionPropertyTree!= null):((frictionPropertyTree == null)||(!frictionPropertyTree.isLeaf())))) {
            this.friction = _other.friction;
        }
        final PropertyTree massPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("mass"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(massPropertyTree!= null):((massPropertyTree == null)||(!massPropertyTree.isLeaf())))) {
            this.mass = _other.mass;
        }
        final PropertyTree densityPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("density"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(densityPropertyTree!= null):((densityPropertyTree == null)||(!densityPropertyTree.isLeaf())))) {
            this.density = _other.density;
        }
        final PropertyTree solmixPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("solmix"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(solmixPropertyTree!= null):((solmixPropertyTree == null)||(!solmixPropertyTree.isLeaf())))) {
            this.solmix = _other.solmix;
        }
        final PropertyTree solimpPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("solimp"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(solimpPropertyTree!= null):((solimpPropertyTree == null)||(!solimpPropertyTree.isLeaf())))) {
            this.solimp = _other.solimp;
        }
        final PropertyTree solrefPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("solref"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(solrefPropertyTree!= null):((solrefPropertyTree == null)||(!solrefPropertyTree.isLeaf())))) {
            this.solref = _other.solref;
        }
        final PropertyTree marginPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("margin"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(marginPropertyTree!= null):((marginPropertyTree == null)||(!marginPropertyTree.isLeaf())))) {
            this.margin = _other.margin;
        }
        final PropertyTree gapPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("gap"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(gapPropertyTree!= null):((gapPropertyTree == null)||(!gapPropertyTree.isLeaf())))) {
            this.gap = _other.gap;
        }
    }

    /**
     * Gets the value of the type property.
     * 
     * @return
     *     possible object is
     *     {@link GeomtypeType }
     *     
     */
    public GeomtypeType getType() {
        if (type == null) {
            return GeomtypeType.SPHERE;
        } else {
            return type;
        }
    }

    /**
     * Gets the value of the contype property.
     * 
     * @return
     *     possible object is
     *     {@link Integer }
     *     
     */
    public int getContype() {
        if (contype == null) {
            return  1;
        } else {
            return contype;
        }
    }

    /**
     * Gets the value of the conaffinity property.
     * 
     * @return
     *     possible object is
     *     {@link Integer }
     *     
     */
    public int getConaffinity() {
        if (conaffinity == null) {
            return  1;
        } else {
            return conaffinity;
        }
    }

    /**
     * Gets the value of the condim property.
     * 
     * @return
     *     possible object is
     *     {@link Integer }
     *     
     */
    public int getCondim() {
        if (condim == null) {
            return  3;
        } else {
            return condim;
        }
    }

    /**
     * Gets the value of the group property.
     * 
     * @return
     *     possible object is
     *     {@link Integer }
     *     
     */
    public int getGroup() {
        if (group == null) {
            return  0;
        } else {
            return group;
        }
    }

    /**
     * Gets the value of the priority property.
     * 
     * @return
     *     possible object is
     *     {@link Integer }
     *     
     */
    public int getPriority() {
        if (priority == null) {
            return  0;
        } else {
            return priority;
        }
    }

    /**
     * Gets the value of the size property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getSize() {
        if (size == null) {
            return "0 0 0";
        } else {
            return size;
        }
    }

    /**
     * Gets the value of the material property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getMaterial() {
        return material;
    }

    /**
     * Gets the value of the rgba property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getRgba() {
        if (rgba == null) {
            return "0.5 0.5 0.5 1";
        } else {
            return rgba;
        }
    }

    /**
     * Gets the value of the friction property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getFriction() {
        if (friction == null) {
            return "1 0.005 0.0001";
        } else {
            return friction;
        }
    }

    /**
     * Gets the value of the mass property.
     * 
     * @return
     *     possible object is
     *     {@link BigDecimal }
     *     
     */
    public BigDecimal getMass() {
        return mass;
    }

    /**
     * Gets the value of the density property.
     * 
     * @return
     *     possible object is
     *     {@link BigDecimal }
     *     
     */
    public BigDecimal getDensity() {
        if (density == null) {
            return new BigDecimal("1000");
        } else {
            return density;
        }
    }

    /**
     * Gets the value of the solmix property.
     * 
     * @return
     *     possible object is
     *     {@link BigDecimal }
     *     
     */
    public BigDecimal getSolmix() {
        if (solmix == null) {
            return new BigDecimal("1");
        } else {
            return solmix;
        }
    }

    /**
     * Gets the value of the solimp property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getSolimp() {
        if (solimp == null) {
            return "0.9 0.95 0.001 0.5 2";
        } else {
            return solimp;
        }
    }

    /**
     * Gets the value of the solref property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getSolref() {
        if (solref == null) {
            return "0.02 1";
        } else {
            return solref;
        }
    }

    /**
     * Gets the value of the margin property.
     * 
     * @return
     *     possible object is
     *     {@link BigDecimal }
     *     
     */
    public BigDecimal getMargin() {
        if (margin == null) {
            return new BigDecimal("0");
        } else {
            return margin;
        }
    }

    /**
     * Gets the value of the gap property.
     * 
     * @return
     *     possible object is
     *     {@link BigDecimal }
     *     
     */
    public BigDecimal getGap() {
        if (gap == null) {
            return new BigDecimal("0");
        } else {
            return gap;
        }
    }

    public void addVetoableChangeListener(final VetoableChangeListener vetoableChangeListener) {
        this.vetoableChange__Support.addVetoableChangeListener(vetoableChangeListener);
    }

    public void removeVetoableChangeListener(final VetoableChangeListener vetoableChangeListener) {
        this.vetoableChange__Support.removeVetoableChangeListener(vetoableChangeListener);
    }

    public CompositegeomType withVetoableChangeListener(final VetoableChangeListener vetoableChangeListener) {
        addVetoableChangeListener(vetoableChangeListener);
        return this;
    }

    public void addPropertyChangeListener(final PropertyChangeListener propertyChangeListener) {
        this.propertyChange__Support.addPropertyChangeListener(propertyChangeListener);
    }

    public void removePropertyChangeListener(final PropertyChangeListener propertyChangeListener) {
        this.propertyChange__Support.removePropertyChangeListener(propertyChangeListener);
    }

    public CompositegeomType withPropertyChangeListener(final PropertyChangeListener propertyChangeListener) {
        addPropertyChangeListener(propertyChangeListener);
        return this;
    }

    public void setType(final GeomtypeType value) {
        final GeomtypeType __oldValue = this.type;
        try {
            this.vetoableChange__Support.fireVetoableChange("type", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.type = value;
        this.propertyChange__Support.firePropertyChange("type", __oldValue, value);
    }

    public void setContype(final Integer value) {
        final Integer __oldValue = this.contype;
        try {
            this.vetoableChange__Support.fireVetoableChange("contype", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.contype = value;
        this.propertyChange__Support.firePropertyChange("contype", __oldValue, value);
    }

    public void setConaffinity(final Integer value) {
        final Integer __oldValue = this.conaffinity;
        try {
            this.vetoableChange__Support.fireVetoableChange("conaffinity", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.conaffinity = value;
        this.propertyChange__Support.firePropertyChange("conaffinity", __oldValue, value);
    }

    public void setCondim(final Integer value) {
        final Integer __oldValue = this.condim;
        try {
            this.vetoableChange__Support.fireVetoableChange("condim", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.condim = value;
        this.propertyChange__Support.firePropertyChange("condim", __oldValue, value);
    }

    public void setGroup(final Integer value) {
        final Integer __oldValue = this.group;
        try {
            this.vetoableChange__Support.fireVetoableChange("group", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.group = value;
        this.propertyChange__Support.firePropertyChange("group", __oldValue, value);
    }

    public void setPriority(final Integer value) {
        final Integer __oldValue = this.priority;
        try {
            this.vetoableChange__Support.fireVetoableChange("priority", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.priority = value;
        this.propertyChange__Support.firePropertyChange("priority", __oldValue, value);
    }

    public void setSize(final String value) {
        final String __oldValue = this.size;
        try {
            this.vetoableChange__Support.fireVetoableChange("size", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.size = value;
        this.propertyChange__Support.firePropertyChange("size", __oldValue, value);
    }

    public void setMaterial(final String value) {
        final String __oldValue = this.material;
        try {
            this.vetoableChange__Support.fireVetoableChange("material", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.material = value;
        this.propertyChange__Support.firePropertyChange("material", __oldValue, value);
    }

    public void setRgba(final String value) {
        final String __oldValue = this.rgba;
        try {
            this.vetoableChange__Support.fireVetoableChange("rgba", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.rgba = value;
        this.propertyChange__Support.firePropertyChange("rgba", __oldValue, value);
    }

    public void setFriction(final String value) {
        final String __oldValue = this.friction;
        try {
            this.vetoableChange__Support.fireVetoableChange("friction", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.friction = value;
        this.propertyChange__Support.firePropertyChange("friction", __oldValue, value);
    }

    public void setMass(final BigDecimal value) {
        final BigDecimal __oldValue = this.mass;
        try {
            this.vetoableChange__Support.fireVetoableChange("mass", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.mass = value;
        this.propertyChange__Support.firePropertyChange("mass", __oldValue, value);
    }

    public void setDensity(final BigDecimal value) {
        final BigDecimal __oldValue = this.density;
        try {
            this.vetoableChange__Support.fireVetoableChange("density", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.density = value;
        this.propertyChange__Support.firePropertyChange("density", __oldValue, value);
    }

    public void setSolmix(final BigDecimal value) {
        final BigDecimal __oldValue = this.solmix;
        try {
            this.vetoableChange__Support.fireVetoableChange("solmix", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.solmix = value;
        this.propertyChange__Support.firePropertyChange("solmix", __oldValue, value);
    }

    public void setSolimp(final String value) {
        final String __oldValue = this.solimp;
        try {
            this.vetoableChange__Support.fireVetoableChange("solimp", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.solimp = value;
        this.propertyChange__Support.firePropertyChange("solimp", __oldValue, value);
    }

    public void setSolref(final String value) {
        final String __oldValue = this.solref;
        try {
            this.vetoableChange__Support.fireVetoableChange("solref", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.solref = value;
        this.propertyChange__Support.firePropertyChange("solref", __oldValue, value);
    }

    public void setMargin(final BigDecimal value) {
        final BigDecimal __oldValue = this.margin;
        try {
            this.vetoableChange__Support.fireVetoableChange("margin", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.margin = value;
        this.propertyChange__Support.firePropertyChange("margin", __oldValue, value);
    }

    public void setGap(final BigDecimal value) {
        final BigDecimal __oldValue = this.gap;
        try {
            this.vetoableChange__Support.fireVetoableChange("gap", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.gap = value;
        this.propertyChange__Support.firePropertyChange("gap", __oldValue, value);
    }

    @Override
    public CompositegeomType clone() {
        final CompositegeomType _newObject;
        try {
            _newObject = ((CompositegeomType) super.clone());
        } catch (CloneNotSupportedException e) {
            throw new RuntimeException(e);
        }
        return _newObject;
    }

    @Override
    public CompositegeomType createCopy() {
        final CompositegeomType _newObject;
        try {
            _newObject = ((CompositegeomType) super.clone());
        } catch (CloneNotSupportedException e) {
            throw new RuntimeException(e);
        }
        _newObject.type = this.type;
        _newObject.contype = this.contype;
        _newObject.conaffinity = this.conaffinity;
        _newObject.condim = this.condim;
        _newObject.group = this.group;
        _newObject.priority = this.priority;
        _newObject.size = this.size;
        _newObject.material = this.material;
        _newObject.rgba = this.rgba;
        _newObject.friction = this.friction;
        _newObject.mass = this.mass;
        _newObject.density = this.density;
        _newObject.solmix = this.solmix;
        _newObject.solimp = this.solimp;
        _newObject.solref = this.solref;
        _newObject.margin = this.margin;
        _newObject.gap = this.gap;
        return _newObject;
    }

    @Override
    public CompositegeomType createCopy(final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        final CompositegeomType _newObject;
        try {
            _newObject = ((CompositegeomType) super.clone());
        } catch (CloneNotSupportedException e) {
            throw new RuntimeException(e);
        }
        final PropertyTree typePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("type"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(typePropertyTree!= null):((typePropertyTree == null)||(!typePropertyTree.isLeaf())))) {
            _newObject.type = this.type;
        }
        final PropertyTree contypePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("contype"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(contypePropertyTree!= null):((contypePropertyTree == null)||(!contypePropertyTree.isLeaf())))) {
            _newObject.contype = this.contype;
        }
        final PropertyTree conaffinityPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("conaffinity"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(conaffinityPropertyTree!= null):((conaffinityPropertyTree == null)||(!conaffinityPropertyTree.isLeaf())))) {
            _newObject.conaffinity = this.conaffinity;
        }
        final PropertyTree condimPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("condim"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(condimPropertyTree!= null):((condimPropertyTree == null)||(!condimPropertyTree.isLeaf())))) {
            _newObject.condim = this.condim;
        }
        final PropertyTree groupPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("group"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(groupPropertyTree!= null):((groupPropertyTree == null)||(!groupPropertyTree.isLeaf())))) {
            _newObject.group = this.group;
        }
        final PropertyTree priorityPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("priority"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(priorityPropertyTree!= null):((priorityPropertyTree == null)||(!priorityPropertyTree.isLeaf())))) {
            _newObject.priority = this.priority;
        }
        final PropertyTree sizePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("size"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(sizePropertyTree!= null):((sizePropertyTree == null)||(!sizePropertyTree.isLeaf())))) {
            _newObject.size = this.size;
        }
        final PropertyTree materialPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("material"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(materialPropertyTree!= null):((materialPropertyTree == null)||(!materialPropertyTree.isLeaf())))) {
            _newObject.material = this.material;
        }
        final PropertyTree rgbaPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("rgba"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(rgbaPropertyTree!= null):((rgbaPropertyTree == null)||(!rgbaPropertyTree.isLeaf())))) {
            _newObject.rgba = this.rgba;
        }
        final PropertyTree frictionPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("friction"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(frictionPropertyTree!= null):((frictionPropertyTree == null)||(!frictionPropertyTree.isLeaf())))) {
            _newObject.friction = this.friction;
        }
        final PropertyTree massPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("mass"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(massPropertyTree!= null):((massPropertyTree == null)||(!massPropertyTree.isLeaf())))) {
            _newObject.mass = this.mass;
        }
        final PropertyTree densityPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("density"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(densityPropertyTree!= null):((densityPropertyTree == null)||(!densityPropertyTree.isLeaf())))) {
            _newObject.density = this.density;
        }
        final PropertyTree solmixPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("solmix"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(solmixPropertyTree!= null):((solmixPropertyTree == null)||(!solmixPropertyTree.isLeaf())))) {
            _newObject.solmix = this.solmix;
        }
        final PropertyTree solimpPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("solimp"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(solimpPropertyTree!= null):((solimpPropertyTree == null)||(!solimpPropertyTree.isLeaf())))) {
            _newObject.solimp = this.solimp;
        }
        final PropertyTree solrefPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("solref"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(solrefPropertyTree!= null):((solrefPropertyTree == null)||(!solrefPropertyTree.isLeaf())))) {
            _newObject.solref = this.solref;
        }
        final PropertyTree marginPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("margin"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(marginPropertyTree!= null):((marginPropertyTree == null)||(!marginPropertyTree.isLeaf())))) {
            _newObject.margin = this.margin;
        }
        final PropertyTree gapPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("gap"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(gapPropertyTree!= null):((gapPropertyTree == null)||(!gapPropertyTree.isLeaf())))) {
            _newObject.gap = this.gap;
        }
        return _newObject;
    }

    @Override
    public CompositegeomType copyExcept(final PropertyTree _propertyTree) {
        return createCopy(_propertyTree, PropertyTreeUse.EXCLUDE);
    }

    @Override
    public CompositegeomType copyOnly(final PropertyTree _propertyTree) {
        return createCopy(_propertyTree, PropertyTreeUse.INCLUDE);
    }

    /**
     * Copies all state of this object to a builder. This method is used by the {@link #copyOf} method and should not be called directly by client code.
     * 
     * @param _other
     *     A builder instance to which the state of this object will be copied.
     */
    public<_B >void copyTo(final CompositegeomType.Builder<_B> _other) {
        _other.type = this.type;
        _other.contype = this.contype;
        _other.conaffinity = this.conaffinity;
        _other.condim = this.condim;
        _other.group = this.group;
        _other.priority = this.priority;
        _other.size = this.size;
        _other.material = this.material;
        _other.rgba = this.rgba;
        _other.friction = this.friction;
        _other.mass = this.mass;
        _other.density = this.density;
        _other.solmix = this.solmix;
        _other.solimp = this.solimp;
        _other.solref = this.solref;
        _other.margin = this.margin;
        _other.gap = this.gap;
    }

    public<_B >CompositegeomType.Builder<_B> newCopyBuilder(final _B _parentBuilder) {
        return new CompositegeomType.Builder<_B>(_parentBuilder, this, true);
    }

    public CompositegeomType.Builder<Void> newCopyBuilder() {
        return newCopyBuilder(null);
    }

    public static CompositegeomType.Builder<Void> builder() {
        return new CompositegeomType.Builder<Void>(null, null, false);
    }

    public static<_B >CompositegeomType.Builder<_B> copyOf(final CompositegeomType _other) {
        final CompositegeomType.Builder<_B> _newBuilder = new CompositegeomType.Builder<_B>(null, null, false);
        _other.copyTo(_newBuilder);
        return _newBuilder;
    }

    /**
     * Copies all state of this object to a builder. This method is used by the {@link #copyOf} method and should not be called directly by client code.
     * 
     * @param _other
     *     A builder instance to which the state of this object will be copied.
     */
    public<_B >void copyTo(final CompositegeomType.Builder<_B> _other, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        final PropertyTree typePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("type"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(typePropertyTree!= null):((typePropertyTree == null)||(!typePropertyTree.isLeaf())))) {
            _other.type = this.type;
        }
        final PropertyTree contypePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("contype"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(contypePropertyTree!= null):((contypePropertyTree == null)||(!contypePropertyTree.isLeaf())))) {
            _other.contype = this.contype;
        }
        final PropertyTree conaffinityPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("conaffinity"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(conaffinityPropertyTree!= null):((conaffinityPropertyTree == null)||(!conaffinityPropertyTree.isLeaf())))) {
            _other.conaffinity = this.conaffinity;
        }
        final PropertyTree condimPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("condim"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(condimPropertyTree!= null):((condimPropertyTree == null)||(!condimPropertyTree.isLeaf())))) {
            _other.condim = this.condim;
        }
        final PropertyTree groupPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("group"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(groupPropertyTree!= null):((groupPropertyTree == null)||(!groupPropertyTree.isLeaf())))) {
            _other.group = this.group;
        }
        final PropertyTree priorityPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("priority"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(priorityPropertyTree!= null):((priorityPropertyTree == null)||(!priorityPropertyTree.isLeaf())))) {
            _other.priority = this.priority;
        }
        final PropertyTree sizePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("size"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(sizePropertyTree!= null):((sizePropertyTree == null)||(!sizePropertyTree.isLeaf())))) {
            _other.size = this.size;
        }
        final PropertyTree materialPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("material"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(materialPropertyTree!= null):((materialPropertyTree == null)||(!materialPropertyTree.isLeaf())))) {
            _other.material = this.material;
        }
        final PropertyTree rgbaPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("rgba"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(rgbaPropertyTree!= null):((rgbaPropertyTree == null)||(!rgbaPropertyTree.isLeaf())))) {
            _other.rgba = this.rgba;
        }
        final PropertyTree frictionPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("friction"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(frictionPropertyTree!= null):((frictionPropertyTree == null)||(!frictionPropertyTree.isLeaf())))) {
            _other.friction = this.friction;
        }
        final PropertyTree massPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("mass"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(massPropertyTree!= null):((massPropertyTree == null)||(!massPropertyTree.isLeaf())))) {
            _other.mass = this.mass;
        }
        final PropertyTree densityPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("density"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(densityPropertyTree!= null):((densityPropertyTree == null)||(!densityPropertyTree.isLeaf())))) {
            _other.density = this.density;
        }
        final PropertyTree solmixPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("solmix"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(solmixPropertyTree!= null):((solmixPropertyTree == null)||(!solmixPropertyTree.isLeaf())))) {
            _other.solmix = this.solmix;
        }
        final PropertyTree solimpPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("solimp"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(solimpPropertyTree!= null):((solimpPropertyTree == null)||(!solimpPropertyTree.isLeaf())))) {
            _other.solimp = this.solimp;
        }
        final PropertyTree solrefPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("solref"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(solrefPropertyTree!= null):((solrefPropertyTree == null)||(!solrefPropertyTree.isLeaf())))) {
            _other.solref = this.solref;
        }
        final PropertyTree marginPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("margin"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(marginPropertyTree!= null):((marginPropertyTree == null)||(!marginPropertyTree.isLeaf())))) {
            _other.margin = this.margin;
        }
        final PropertyTree gapPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("gap"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(gapPropertyTree!= null):((gapPropertyTree == null)||(!gapPropertyTree.isLeaf())))) {
            _other.gap = this.gap;
        }
    }

    public<_B >CompositegeomType.Builder<_B> newCopyBuilder(final _B _parentBuilder, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        return new CompositegeomType.Builder<_B>(_parentBuilder, this, true, _propertyTree, _propertyTreeUse);
    }

    public CompositegeomType.Builder<Void> newCopyBuilder(final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        return newCopyBuilder(null, _propertyTree, _propertyTreeUse);
    }

    public static<_B >CompositegeomType.Builder<_B> copyOf(final CompositegeomType _other, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        final CompositegeomType.Builder<_B> _newBuilder = new CompositegeomType.Builder<_B>(null, null, false);
        _other.copyTo(_newBuilder, _propertyTree, _propertyTreeUse);
        return _newBuilder;
    }

    public static CompositegeomType.Builder<Void> copyExcept(final CompositegeomType _other, final PropertyTree _propertyTree) {
        return copyOf(_other, _propertyTree, PropertyTreeUse.EXCLUDE);
    }

    public static CompositegeomType.Builder<Void> copyOnly(final CompositegeomType _other, final PropertyTree _propertyTree) {
        return copyOf(_other, _propertyTree, PropertyTreeUse.INCLUDE);
    }

    public CompositegeomType visit(final PropertyVisitor _visitor_) {
        _visitor_.visit(this);
        return this;
    }

    public static class Builder<_B >implements Buildable
    {

        protected final _B _parentBuilder;
        private GeomtypeType type;
        private Integer contype;
        private Integer conaffinity;
        private Integer condim;
        private Integer group;
        private Integer priority;
        private String size;
        private String material;
        private String rgba;
        private String friction;
        private BigDecimal mass;
        private BigDecimal density;
        private BigDecimal solmix;
        private String solimp;
        private String solref;
        private BigDecimal margin;
        private BigDecimal gap;

        public Builder(final _B _parentBuilder, final CompositegeomType _other, final boolean _copy) {
            this._parentBuilder = _parentBuilder;
            if (_other!= null) {
                this.type = _other.type;
                this.contype = _other.contype;
                this.conaffinity = _other.conaffinity;
                this.condim = _other.condim;
                this.group = _other.group;
                this.priority = _other.priority;
                this.size = _other.size;
                this.material = _other.material;
                this.rgba = _other.rgba;
                this.friction = _other.friction;
                this.mass = _other.mass;
                this.density = _other.density;
                this.solmix = _other.solmix;
                this.solimp = _other.solimp;
                this.solref = _other.solref;
                this.margin = _other.margin;
                this.gap = _other.gap;
            }
        }

        public Builder(final _B _parentBuilder, final CompositegeomType _other, final boolean _copy, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
            this._parentBuilder = _parentBuilder;
            if (_other!= null) {
                final PropertyTree typePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("type"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(typePropertyTree!= null):((typePropertyTree == null)||(!typePropertyTree.isLeaf())))) {
                    this.type = _other.type;
                }
                final PropertyTree contypePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("contype"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(contypePropertyTree!= null):((contypePropertyTree == null)||(!contypePropertyTree.isLeaf())))) {
                    this.contype = _other.contype;
                }
                final PropertyTree conaffinityPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("conaffinity"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(conaffinityPropertyTree!= null):((conaffinityPropertyTree == null)||(!conaffinityPropertyTree.isLeaf())))) {
                    this.conaffinity = _other.conaffinity;
                }
                final PropertyTree condimPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("condim"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(condimPropertyTree!= null):((condimPropertyTree == null)||(!condimPropertyTree.isLeaf())))) {
                    this.condim = _other.condim;
                }
                final PropertyTree groupPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("group"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(groupPropertyTree!= null):((groupPropertyTree == null)||(!groupPropertyTree.isLeaf())))) {
                    this.group = _other.group;
                }
                final PropertyTree priorityPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("priority"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(priorityPropertyTree!= null):((priorityPropertyTree == null)||(!priorityPropertyTree.isLeaf())))) {
                    this.priority = _other.priority;
                }
                final PropertyTree sizePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("size"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(sizePropertyTree!= null):((sizePropertyTree == null)||(!sizePropertyTree.isLeaf())))) {
                    this.size = _other.size;
                }
                final PropertyTree materialPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("material"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(materialPropertyTree!= null):((materialPropertyTree == null)||(!materialPropertyTree.isLeaf())))) {
                    this.material = _other.material;
                }
                final PropertyTree rgbaPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("rgba"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(rgbaPropertyTree!= null):((rgbaPropertyTree == null)||(!rgbaPropertyTree.isLeaf())))) {
                    this.rgba = _other.rgba;
                }
                final PropertyTree frictionPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("friction"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(frictionPropertyTree!= null):((frictionPropertyTree == null)||(!frictionPropertyTree.isLeaf())))) {
                    this.friction = _other.friction;
                }
                final PropertyTree massPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("mass"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(massPropertyTree!= null):((massPropertyTree == null)||(!massPropertyTree.isLeaf())))) {
                    this.mass = _other.mass;
                }
                final PropertyTree densityPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("density"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(densityPropertyTree!= null):((densityPropertyTree == null)||(!densityPropertyTree.isLeaf())))) {
                    this.density = _other.density;
                }
                final PropertyTree solmixPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("solmix"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(solmixPropertyTree!= null):((solmixPropertyTree == null)||(!solmixPropertyTree.isLeaf())))) {
                    this.solmix = _other.solmix;
                }
                final PropertyTree solimpPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("solimp"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(solimpPropertyTree!= null):((solimpPropertyTree == null)||(!solimpPropertyTree.isLeaf())))) {
                    this.solimp = _other.solimp;
                }
                final PropertyTree solrefPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("solref"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(solrefPropertyTree!= null):((solrefPropertyTree == null)||(!solrefPropertyTree.isLeaf())))) {
                    this.solref = _other.solref;
                }
                final PropertyTree marginPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("margin"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(marginPropertyTree!= null):((marginPropertyTree == null)||(!marginPropertyTree.isLeaf())))) {
                    this.margin = _other.margin;
                }
                final PropertyTree gapPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("gap"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(gapPropertyTree!= null):((gapPropertyTree == null)||(!gapPropertyTree.isLeaf())))) {
                    this.gap = _other.gap;
                }
            }
        }

        public _B end() {
            return this._parentBuilder;
        }

        protected<_P extends CompositegeomType >_P init(final _P _product) {
            _product.type = this.type;
            _product.contype = this.contype;
            _product.conaffinity = this.conaffinity;
            _product.condim = this.condim;
            _product.group = this.group;
            _product.priority = this.priority;
            _product.size = this.size;
            _product.material = this.material;
            _product.rgba = this.rgba;
            _product.friction = this.friction;
            _product.mass = this.mass;
            _product.density = this.density;
            _product.solmix = this.solmix;
            _product.solimp = this.solimp;
            _product.solref = this.solref;
            _product.margin = this.margin;
            _product.gap = this.gap;
            return _product;
        }

        /**
         * Sets the new value of "type" (any previous value will be replaced)
         * 
         * @param type
         *     New value of the "type" property.
         */
        public CompositegeomType.Builder<_B> withType(final GeomtypeType type) {
            this.type = type;
            return this;
        }

        /**
         * Sets the new value of "contype" (any previous value will be replaced)
         * 
         * @param contype
         *     New value of the "contype" property.
         */
        public CompositegeomType.Builder<_B> withContype(final Integer contype) {
            this.contype = contype;
            return this;
        }

        /**
         * Sets the new value of "conaffinity" (any previous value will be replaced)
         * 
         * @param conaffinity
         *     New value of the "conaffinity" property.
         */
        public CompositegeomType.Builder<_B> withConaffinity(final Integer conaffinity) {
            this.conaffinity = conaffinity;
            return this;
        }

        /**
         * Sets the new value of "condim" (any previous value will be replaced)
         * 
         * @param condim
         *     New value of the "condim" property.
         */
        public CompositegeomType.Builder<_B> withCondim(final Integer condim) {
            this.condim = condim;
            return this;
        }

        /**
         * Sets the new value of "group" (any previous value will be replaced)
         * 
         * @param group
         *     New value of the "group" property.
         */
        public CompositegeomType.Builder<_B> withGroup(final Integer group) {
            this.group = group;
            return this;
        }

        /**
         * Sets the new value of "priority" (any previous value will be replaced)
         * 
         * @param priority
         *     New value of the "priority" property.
         */
        public CompositegeomType.Builder<_B> withPriority(final Integer priority) {
            this.priority = priority;
            return this;
        }

        /**
         * Sets the new value of "size" (any previous value will be replaced)
         * 
         * @param size
         *     New value of the "size" property.
         */
        public CompositegeomType.Builder<_B> withSize(final String size) {
            this.size = size;
            return this;
        }

        /**
         * Sets the new value of "material" (any previous value will be replaced)
         * 
         * @param material
         *     New value of the "material" property.
         */
        public CompositegeomType.Builder<_B> withMaterial(final String material) {
            this.material = material;
            return this;
        }

        /**
         * Sets the new value of "rgba" (any previous value will be replaced)
         * 
         * @param rgba
         *     New value of the "rgba" property.
         */
        public CompositegeomType.Builder<_B> withRgba(final String rgba) {
            this.rgba = rgba;
            return this;
        }

        /**
         * Sets the new value of "friction" (any previous value will be replaced)
         * 
         * @param friction
         *     New value of the "friction" property.
         */
        public CompositegeomType.Builder<_B> withFriction(final String friction) {
            this.friction = friction;
            return this;
        }

        /**
         * Sets the new value of "mass" (any previous value will be replaced)
         * 
         * @param mass
         *     New value of the "mass" property.
         */
        public CompositegeomType.Builder<_B> withMass(final BigDecimal mass) {
            this.mass = mass;
            return this;
        }

        /**
         * Sets the new value of "density" (any previous value will be replaced)
         * 
         * @param density
         *     New value of the "density" property.
         */
        public CompositegeomType.Builder<_B> withDensity(final BigDecimal density) {
            this.density = density;
            return this;
        }

        /**
         * Sets the new value of "solmix" (any previous value will be replaced)
         * 
         * @param solmix
         *     New value of the "solmix" property.
         */
        public CompositegeomType.Builder<_B> withSolmix(final BigDecimal solmix) {
            this.solmix = solmix;
            return this;
        }

        /**
         * Sets the new value of "solimp" (any previous value will be replaced)
         * 
         * @param solimp
         *     New value of the "solimp" property.
         */
        public CompositegeomType.Builder<_B> withSolimp(final String solimp) {
            this.solimp = solimp;
            return this;
        }

        /**
         * Sets the new value of "solref" (any previous value will be replaced)
         * 
         * @param solref
         *     New value of the "solref" property.
         */
        public CompositegeomType.Builder<_B> withSolref(final String solref) {
            this.solref = solref;
            return this;
        }

        /**
         * Sets the new value of "margin" (any previous value will be replaced)
         * 
         * @param margin
         *     New value of the "margin" property.
         */
        public CompositegeomType.Builder<_B> withMargin(final BigDecimal margin) {
            this.margin = margin;
            return this;
        }

        /**
         * Sets the new value of "gap" (any previous value will be replaced)
         * 
         * @param gap
         *     New value of the "gap" property.
         */
        public CompositegeomType.Builder<_B> withGap(final BigDecimal gap) {
            this.gap = gap;
            return this;
        }

        @Override
        public CompositegeomType build() {
            return this.init(new CompositegeomType());
        }

        public CompositegeomType.Builder<_B> copyOf(final CompositegeomType _other) {
            _other.copyTo(this);
            return this;
        }

        public CompositegeomType.Builder<_B> copyOf(final CompositegeomType.Builder _other) {
            return copyOf(_other.build());
        }

    }

    public static class PropInfo {

        public final static transient String TYPE = "type";
        public final static transient String CONTYPE = "contype";
        public final static transient String CONAFFINITY = "conaffinity";
        public final static transient String CONDIM = "condim";
        public final static transient String GROUP = "group";
        public final static transient String PRIORITY = "priority";
        public final static transient String SIZE = "size";
        public final static transient String MATERIAL = "material";
        public final static transient String RGBA = "rgba";
        public final static transient String FRICTION = "friction";
        public final static transient String MASS = "mass";
        public final static transient String DENSITY = "density";
        public final static transient String SOLMIX = "solmix";
        public final static transient String SOLIMP = "solimp";
        public final static transient String SOLREF = "solref";
        public final static transient String MARGIN = "margin";
        public final static transient String GAP = "gap";

    }

    public static class Select
        extends CompositegeomType.Selector<CompositegeomType.Select, Void>
    {


        Select() {
            super(null, null, null);
        }

        public static CompositegeomType.Select _root() {
            return new CompositegeomType.Select();
        }

    }

    public static class Selector<TRoot extends com.kscs.util.jaxb.Selector<TRoot, ?> , TParent >
        extends com.kscs.util.jaxb.Selector<TRoot, TParent>
    {

        private com.kscs.util.jaxb.Selector<TRoot, CompositegeomType.Selector<TRoot, TParent>> type = null;
        private com.kscs.util.jaxb.Selector<TRoot, CompositegeomType.Selector<TRoot, TParent>> contype = null;
        private com.kscs.util.jaxb.Selector<TRoot, CompositegeomType.Selector<TRoot, TParent>> conaffinity = null;
        private com.kscs.util.jaxb.Selector<TRoot, CompositegeomType.Selector<TRoot, TParent>> condim = null;
        private com.kscs.util.jaxb.Selector<TRoot, CompositegeomType.Selector<TRoot, TParent>> group = null;
        private com.kscs.util.jaxb.Selector<TRoot, CompositegeomType.Selector<TRoot, TParent>> priority = null;
        private com.kscs.util.jaxb.Selector<TRoot, CompositegeomType.Selector<TRoot, TParent>> size = null;
        private com.kscs.util.jaxb.Selector<TRoot, CompositegeomType.Selector<TRoot, TParent>> material = null;
        private com.kscs.util.jaxb.Selector<TRoot, CompositegeomType.Selector<TRoot, TParent>> rgba = null;
        private com.kscs.util.jaxb.Selector<TRoot, CompositegeomType.Selector<TRoot, TParent>> friction = null;
        private com.kscs.util.jaxb.Selector<TRoot, CompositegeomType.Selector<TRoot, TParent>> mass = null;
        private com.kscs.util.jaxb.Selector<TRoot, CompositegeomType.Selector<TRoot, TParent>> density = null;
        private com.kscs.util.jaxb.Selector<TRoot, CompositegeomType.Selector<TRoot, TParent>> solmix = null;
        private com.kscs.util.jaxb.Selector<TRoot, CompositegeomType.Selector<TRoot, TParent>> solimp = null;
        private com.kscs.util.jaxb.Selector<TRoot, CompositegeomType.Selector<TRoot, TParent>> solref = null;
        private com.kscs.util.jaxb.Selector<TRoot, CompositegeomType.Selector<TRoot, TParent>> margin = null;
        private com.kscs.util.jaxb.Selector<TRoot, CompositegeomType.Selector<TRoot, TParent>> gap = null;

        public Selector(final TRoot root, final TParent parent, final String propertyName) {
            super(root, parent, propertyName);
        }

        @Override
        public Map<String, PropertyTree> buildChildren() {
            final Map<String, PropertyTree> products = new HashMap<String, PropertyTree>();
            products.putAll(super.buildChildren());
            if (this.type!= null) {
                products.put("type", this.type.init());
            }
            if (this.contype!= null) {
                products.put("contype", this.contype.init());
            }
            if (this.conaffinity!= null) {
                products.put("conaffinity", this.conaffinity.init());
            }
            if (this.condim!= null) {
                products.put("condim", this.condim.init());
            }
            if (this.group!= null) {
                products.put("group", this.group.init());
            }
            if (this.priority!= null) {
                products.put("priority", this.priority.init());
            }
            if (this.size!= null) {
                products.put("size", this.size.init());
            }
            if (this.material!= null) {
                products.put("material", this.material.init());
            }
            if (this.rgba!= null) {
                products.put("rgba", this.rgba.init());
            }
            if (this.friction!= null) {
                products.put("friction", this.friction.init());
            }
            if (this.mass!= null) {
                products.put("mass", this.mass.init());
            }
            if (this.density!= null) {
                products.put("density", this.density.init());
            }
            if (this.solmix!= null) {
                products.put("solmix", this.solmix.init());
            }
            if (this.solimp!= null) {
                products.put("solimp", this.solimp.init());
            }
            if (this.solref!= null) {
                products.put("solref", this.solref.init());
            }
            if (this.margin!= null) {
                products.put("margin", this.margin.init());
            }
            if (this.gap!= null) {
                products.put("gap", this.gap.init());
            }
            return products;
        }

        public com.kscs.util.jaxb.Selector<TRoot, CompositegeomType.Selector<TRoot, TParent>> type() {
            return ((this.type == null)?this.type = new com.kscs.util.jaxb.Selector<TRoot, CompositegeomType.Selector<TRoot, TParent>>(this._root, this, "type"):this.type);
        }

        public com.kscs.util.jaxb.Selector<TRoot, CompositegeomType.Selector<TRoot, TParent>> contype() {
            return ((this.contype == null)?this.contype = new com.kscs.util.jaxb.Selector<TRoot, CompositegeomType.Selector<TRoot, TParent>>(this._root, this, "contype"):this.contype);
        }

        public com.kscs.util.jaxb.Selector<TRoot, CompositegeomType.Selector<TRoot, TParent>> conaffinity() {
            return ((this.conaffinity == null)?this.conaffinity = new com.kscs.util.jaxb.Selector<TRoot, CompositegeomType.Selector<TRoot, TParent>>(this._root, this, "conaffinity"):this.conaffinity);
        }

        public com.kscs.util.jaxb.Selector<TRoot, CompositegeomType.Selector<TRoot, TParent>> condim() {
            return ((this.condim == null)?this.condim = new com.kscs.util.jaxb.Selector<TRoot, CompositegeomType.Selector<TRoot, TParent>>(this._root, this, "condim"):this.condim);
        }

        public com.kscs.util.jaxb.Selector<TRoot, CompositegeomType.Selector<TRoot, TParent>> group() {
            return ((this.group == null)?this.group = new com.kscs.util.jaxb.Selector<TRoot, CompositegeomType.Selector<TRoot, TParent>>(this._root, this, "group"):this.group);
        }

        public com.kscs.util.jaxb.Selector<TRoot, CompositegeomType.Selector<TRoot, TParent>> priority() {
            return ((this.priority == null)?this.priority = new com.kscs.util.jaxb.Selector<TRoot, CompositegeomType.Selector<TRoot, TParent>>(this._root, this, "priority"):this.priority);
        }

        public com.kscs.util.jaxb.Selector<TRoot, CompositegeomType.Selector<TRoot, TParent>> size() {
            return ((this.size == null)?this.size = new com.kscs.util.jaxb.Selector<TRoot, CompositegeomType.Selector<TRoot, TParent>>(this._root, this, "size"):this.size);
        }

        public com.kscs.util.jaxb.Selector<TRoot, CompositegeomType.Selector<TRoot, TParent>> material() {
            return ((this.material == null)?this.material = new com.kscs.util.jaxb.Selector<TRoot, CompositegeomType.Selector<TRoot, TParent>>(this._root, this, "material"):this.material);
        }

        public com.kscs.util.jaxb.Selector<TRoot, CompositegeomType.Selector<TRoot, TParent>> rgba() {
            return ((this.rgba == null)?this.rgba = new com.kscs.util.jaxb.Selector<TRoot, CompositegeomType.Selector<TRoot, TParent>>(this._root, this, "rgba"):this.rgba);
        }

        public com.kscs.util.jaxb.Selector<TRoot, CompositegeomType.Selector<TRoot, TParent>> friction() {
            return ((this.friction == null)?this.friction = new com.kscs.util.jaxb.Selector<TRoot, CompositegeomType.Selector<TRoot, TParent>>(this._root, this, "friction"):this.friction);
        }

        public com.kscs.util.jaxb.Selector<TRoot, CompositegeomType.Selector<TRoot, TParent>> mass() {
            return ((this.mass == null)?this.mass = new com.kscs.util.jaxb.Selector<TRoot, CompositegeomType.Selector<TRoot, TParent>>(this._root, this, "mass"):this.mass);
        }

        public com.kscs.util.jaxb.Selector<TRoot, CompositegeomType.Selector<TRoot, TParent>> density() {
            return ((this.density == null)?this.density = new com.kscs.util.jaxb.Selector<TRoot, CompositegeomType.Selector<TRoot, TParent>>(this._root, this, "density"):this.density);
        }

        public com.kscs.util.jaxb.Selector<TRoot, CompositegeomType.Selector<TRoot, TParent>> solmix() {
            return ((this.solmix == null)?this.solmix = new com.kscs.util.jaxb.Selector<TRoot, CompositegeomType.Selector<TRoot, TParent>>(this._root, this, "solmix"):this.solmix);
        }

        public com.kscs.util.jaxb.Selector<TRoot, CompositegeomType.Selector<TRoot, TParent>> solimp() {
            return ((this.solimp == null)?this.solimp = new com.kscs.util.jaxb.Selector<TRoot, CompositegeomType.Selector<TRoot, TParent>>(this._root, this, "solimp"):this.solimp);
        }

        public com.kscs.util.jaxb.Selector<TRoot, CompositegeomType.Selector<TRoot, TParent>> solref() {
            return ((this.solref == null)?this.solref = new com.kscs.util.jaxb.Selector<TRoot, CompositegeomType.Selector<TRoot, TParent>>(this._root, this, "solref"):this.solref);
        }

        public com.kscs.util.jaxb.Selector<TRoot, CompositegeomType.Selector<TRoot, TParent>> margin() {
            return ((this.margin == null)?this.margin = new com.kscs.util.jaxb.Selector<TRoot, CompositegeomType.Selector<TRoot, TParent>>(this._root, this, "margin"):this.margin);
        }

        public com.kscs.util.jaxb.Selector<TRoot, CompositegeomType.Selector<TRoot, TParent>> gap() {
            return ((this.gap == null)?this.gap = new com.kscs.util.jaxb.Selector<TRoot, CompositegeomType.Selector<TRoot, TParent>>(this._root, this, "gap"):this.gap);
        }

    }

}
