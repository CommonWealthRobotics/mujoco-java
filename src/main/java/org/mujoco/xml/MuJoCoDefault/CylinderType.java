//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.3.0 
// See <a href="https://javaee.github.io/jaxb-v2/">https://javaee.github.io/jaxb-v2/</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2024.03.13 at 04:36:46 PM EDT 
//


package org.mujoco.xml.MuJoCoDefault;

import java.beans.PropertyChangeListener;
import java.beans.PropertyVetoException;
import java.beans.VetoableChangeListener;
import java.math.BigDecimal;
import java.util.HashMap;
import java.util.Map;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlType;
import com.kscs.util.jaxb.Buildable;
import com.kscs.util.jaxb.Copyable;
import com.kscs.util.jaxb.PartialCopyable;
import com.kscs.util.jaxb.PropertyTree;
import com.kscs.util.jaxb.PropertyTreeUse;
import com.kscs.util.jaxb.PropertyVisitor;


/**
 * <p>Java class for cylinderType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="cylinderType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;extension base="{default}motorType"&gt;
 *       &lt;attribute name="timeconst" type="{http://www.w3.org/2001/XMLSchema}decimal" default="1" /&gt;
 *       &lt;attribute name="area" type="{http://www.w3.org/2001/XMLSchema}decimal" default="1" /&gt;
 *       &lt;attribute name="diameter" type="{http://www.w3.org/2001/XMLSchema}decimal" /&gt;
 *       &lt;attribute name="bias" type="{attributeTypes}threeRealsType" default="0 0 0" /&gt;
 *     &lt;/extension&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "cylinderType")
public class CylinderType
    extends MotorType
    implements Cloneable, Copyable, PartialCopyable
{

    @XmlAttribute(name = "timeconst")
    protected BigDecimal timeconst;
    @XmlAttribute(name = "area")
    protected BigDecimal area;
    @XmlAttribute(name = "diameter")
    protected BigDecimal diameter;
    @XmlAttribute(name = "bias")
    protected String bias;

    /**
     * Generated by copy-constructor plugin, JAXB requires public no-arg constructor.
     * 
     */
    public CylinderType() {
        // Generated by copy-constructor plugin, JAXB requires public no-arg constructor.
    }

    /**
     * Instantiates a CylinderType copying the state of another CylinderType
     * 
     * @param _other
     *     The original CylinderType from which to copy state.
     */
    public CylinderType(final CylinderType _other) {
        super(_other);
        this.timeconst = _other.timeconst;
        this.area = _other.area;
        this.diameter = _other.diameter;
        this.bias = _other.bias;
    }

    /**
     * Instantiates a CylinderType copying the state of another CylinderType
     * 
     * @param _propertyTreeUse
     *     Meaning of the {@link PropertyPath}: Exclude or include members contained in property path.
     * @param _propertyTree
     *     A restricting {@link PropertyPath} that defines which nodes of the source object tree should actually be copied.
     * @param _other
     *     The original CylinderType from which to copy state.
     */
    public CylinderType(final CylinderType _other, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        super(_other, _propertyTree, _propertyTreeUse);
        final PropertyTree timeconstPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("timeconst"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(timeconstPropertyTree!= null):((timeconstPropertyTree == null)||(!timeconstPropertyTree.isLeaf())))) {
            this.timeconst = _other.timeconst;
        }
        final PropertyTree areaPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("area"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(areaPropertyTree!= null):((areaPropertyTree == null)||(!areaPropertyTree.isLeaf())))) {
            this.area = _other.area;
        }
        final PropertyTree diameterPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("diameter"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(diameterPropertyTree!= null):((diameterPropertyTree == null)||(!diameterPropertyTree.isLeaf())))) {
            this.diameter = _other.diameter;
        }
        final PropertyTree biasPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("bias"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(biasPropertyTree!= null):((biasPropertyTree == null)||(!biasPropertyTree.isLeaf())))) {
            this.bias = _other.bias;
        }
    }

    /**
     * Gets the value of the timeconst property.
     * 
     * @return
     *     possible object is
     *     {@link BigDecimal }
     *     
     */
    public BigDecimal getTimeconst() {
        if (timeconst == null) {
            return new BigDecimal("1");
        } else {
            return timeconst;
        }
    }

    /**
     * Gets the value of the area property.
     * 
     * @return
     *     possible object is
     *     {@link BigDecimal }
     *     
     */
    public BigDecimal getArea() {
        if (area == null) {
            return new BigDecimal("1");
        } else {
            return area;
        }
    }

    /**
     * Gets the value of the diameter property.
     * 
     * @return
     *     possible object is
     *     {@link BigDecimal }
     *     
     */
    public BigDecimal getDiameter() {
        return diameter;
    }

    /**
     * Gets the value of the bias property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getBias() {
        if (bias == null) {
            return "0 0 0";
        } else {
            return bias;
        }
    }

    @Override
    public CylinderType withVetoableChangeListener(final VetoableChangeListener vetoableChangeListener) {
        addVetoableChangeListener(vetoableChangeListener);
        return this;
    }

    @Override
    public CylinderType withPropertyChangeListener(final PropertyChangeListener propertyChangeListener) {
        addPropertyChangeListener(propertyChangeListener);
        return this;
    }

    public void setTimeconst(final BigDecimal value) {
        final BigDecimal __oldValue = this.timeconst;
        try {
            this.vetoableChange__Support.fireVetoableChange("timeconst", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.timeconst = value;
        this.propertyChange__Support.firePropertyChange("timeconst", __oldValue, value);
    }

    public void setArea(final BigDecimal value) {
        final BigDecimal __oldValue = this.area;
        try {
            this.vetoableChange__Support.fireVetoableChange("area", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.area = value;
        this.propertyChange__Support.firePropertyChange("area", __oldValue, value);
    }

    public void setDiameter(final BigDecimal value) {
        final BigDecimal __oldValue = this.diameter;
        try {
            this.vetoableChange__Support.fireVetoableChange("diameter", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.diameter = value;
        this.propertyChange__Support.firePropertyChange("diameter", __oldValue, value);
    }

    public void setBias(final String value) {
        final String __oldValue = this.bias;
        try {
            this.vetoableChange__Support.fireVetoableChange("bias", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.bias = value;
        this.propertyChange__Support.firePropertyChange("bias", __oldValue, value);
    }

    @Override
    public CylinderType clone() {
        final CylinderType _newObject;
        _newObject = ((CylinderType) super.clone());
        return _newObject;
    }

    @Override
    public CylinderType createCopy() {
        final CylinderType _newObject = ((CylinderType) super.createCopy());
        _newObject.timeconst = this.timeconst;
        _newObject.area = this.area;
        _newObject.diameter = this.diameter;
        _newObject.bias = this.bias;
        return _newObject;
    }

    @Override
    public CylinderType createCopy(final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        final CylinderType _newObject = ((CylinderType) super.createCopy(_propertyTree, _propertyTreeUse));
        final PropertyTree timeconstPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("timeconst"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(timeconstPropertyTree!= null):((timeconstPropertyTree == null)||(!timeconstPropertyTree.isLeaf())))) {
            _newObject.timeconst = this.timeconst;
        }
        final PropertyTree areaPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("area"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(areaPropertyTree!= null):((areaPropertyTree == null)||(!areaPropertyTree.isLeaf())))) {
            _newObject.area = this.area;
        }
        final PropertyTree diameterPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("diameter"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(diameterPropertyTree!= null):((diameterPropertyTree == null)||(!diameterPropertyTree.isLeaf())))) {
            _newObject.diameter = this.diameter;
        }
        final PropertyTree biasPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("bias"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(biasPropertyTree!= null):((biasPropertyTree == null)||(!biasPropertyTree.isLeaf())))) {
            _newObject.bias = this.bias;
        }
        return _newObject;
    }

    @Override
    public CylinderType copyExcept(final PropertyTree _propertyTree) {
        return createCopy(_propertyTree, PropertyTreeUse.EXCLUDE);
    }

    @Override
    public CylinderType copyOnly(final PropertyTree _propertyTree) {
        return createCopy(_propertyTree, PropertyTreeUse.INCLUDE);
    }

    /**
     * Copies all state of this object to a builder. This method is used by the {@link #copyOf} method and should not be called directly by client code.
     * 
     * @param _other
     *     A builder instance to which the state of this object will be copied.
     */
    public<_B >void copyTo(final CylinderType.Builder<_B> _other) {
        super.copyTo(_other);
        _other.timeconst = this.timeconst;
        _other.area = this.area;
        _other.diameter = this.diameter;
        _other.bias = this.bias;
    }

    @Override
    public<_B >CylinderType.Builder<_B> newCopyBuilder(final _B _parentBuilder) {
        return new CylinderType.Builder<_B>(_parentBuilder, this, true);
    }

    @Override
    public CylinderType.Builder<Void> newCopyBuilder() {
        return newCopyBuilder(null);
    }

    public static CylinderType.Builder<Void> builder() {
        return new CylinderType.Builder<Void>(null, null, false);
    }

    public static<_B >CylinderType.Builder<_B> copyOf(final MotorType _other) {
        final CylinderType.Builder<_B> _newBuilder = new CylinderType.Builder<_B>(null, null, false);
        _other.copyTo(_newBuilder);
        return _newBuilder;
    }

    public static<_B >CylinderType.Builder<_B> copyOf(final CylinderType _other) {
        final CylinderType.Builder<_B> _newBuilder = new CylinderType.Builder<_B>(null, null, false);
        _other.copyTo(_newBuilder);
        return _newBuilder;
    }

    /**
     * Copies all state of this object to a builder. This method is used by the {@link #copyOf} method and should not be called directly by client code.
     * 
     * @param _other
     *     A builder instance to which the state of this object will be copied.
     */
    public<_B >void copyTo(final CylinderType.Builder<_B> _other, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        super.copyTo(_other, _propertyTree, _propertyTreeUse);
        final PropertyTree timeconstPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("timeconst"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(timeconstPropertyTree!= null):((timeconstPropertyTree == null)||(!timeconstPropertyTree.isLeaf())))) {
            _other.timeconst = this.timeconst;
        }
        final PropertyTree areaPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("area"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(areaPropertyTree!= null):((areaPropertyTree == null)||(!areaPropertyTree.isLeaf())))) {
            _other.area = this.area;
        }
        final PropertyTree diameterPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("diameter"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(diameterPropertyTree!= null):((diameterPropertyTree == null)||(!diameterPropertyTree.isLeaf())))) {
            _other.diameter = this.diameter;
        }
        final PropertyTree biasPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("bias"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(biasPropertyTree!= null):((biasPropertyTree == null)||(!biasPropertyTree.isLeaf())))) {
            _other.bias = this.bias;
        }
    }

    @Override
    public<_B >CylinderType.Builder<_B> newCopyBuilder(final _B _parentBuilder, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        return new CylinderType.Builder<_B>(_parentBuilder, this, true, _propertyTree, _propertyTreeUse);
    }

    @Override
    public CylinderType.Builder<Void> newCopyBuilder(final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        return newCopyBuilder(null, _propertyTree, _propertyTreeUse);
    }

    public static<_B >CylinderType.Builder<_B> copyOf(final MotorType _other, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        final CylinderType.Builder<_B> _newBuilder = new CylinderType.Builder<_B>(null, null, false);
        _other.copyTo(_newBuilder, _propertyTree, _propertyTreeUse);
        return _newBuilder;
    }

    public static<_B >CylinderType.Builder<_B> copyOf(final CylinderType _other, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        final CylinderType.Builder<_B> _newBuilder = new CylinderType.Builder<_B>(null, null, false);
        _other.copyTo(_newBuilder, _propertyTree, _propertyTreeUse);
        return _newBuilder;
    }

    public static CylinderType.Builder<Void> copyExcept(final MotorType _other, final PropertyTree _propertyTree) {
        return copyOf(_other, _propertyTree, PropertyTreeUse.EXCLUDE);
    }

    public static CylinderType.Builder<Void> copyExcept(final CylinderType _other, final PropertyTree _propertyTree) {
        return copyOf(_other, _propertyTree, PropertyTreeUse.EXCLUDE);
    }

    public static CylinderType.Builder<Void> copyOnly(final MotorType _other, final PropertyTree _propertyTree) {
        return copyOf(_other, _propertyTree, PropertyTreeUse.INCLUDE);
    }

    public static CylinderType.Builder<Void> copyOnly(final CylinderType _other, final PropertyTree _propertyTree) {
        return copyOf(_other, _propertyTree, PropertyTreeUse.INCLUDE);
    }

    public CylinderType visit(final PropertyVisitor _visitor_) {
        super.visit(_visitor_);
        return this;
    }

    public static class Builder<_B >
        extends MotorType.Builder<_B>
        implements Buildable
    {

        private BigDecimal timeconst;
        private BigDecimal area;
        private BigDecimal diameter;
        private String bias;

        public Builder(final _B _parentBuilder, final CylinderType _other, final boolean _copy) {
            super(_parentBuilder, _other, _copy);
            if (_other!= null) {
                this.timeconst = _other.timeconst;
                this.area = _other.area;
                this.diameter = _other.diameter;
                this.bias = _other.bias;
            }
        }

        public Builder(final _B _parentBuilder, final CylinderType _other, final boolean _copy, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
            super(_parentBuilder, _other, _copy, _propertyTree, _propertyTreeUse);
            if (_other!= null) {
                final PropertyTree timeconstPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("timeconst"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(timeconstPropertyTree!= null):((timeconstPropertyTree == null)||(!timeconstPropertyTree.isLeaf())))) {
                    this.timeconst = _other.timeconst;
                }
                final PropertyTree areaPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("area"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(areaPropertyTree!= null):((areaPropertyTree == null)||(!areaPropertyTree.isLeaf())))) {
                    this.area = _other.area;
                }
                final PropertyTree diameterPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("diameter"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(diameterPropertyTree!= null):((diameterPropertyTree == null)||(!diameterPropertyTree.isLeaf())))) {
                    this.diameter = _other.diameter;
                }
                final PropertyTree biasPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("bias"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(biasPropertyTree!= null):((biasPropertyTree == null)||(!biasPropertyTree.isLeaf())))) {
                    this.bias = _other.bias;
                }
            }
        }

        protected<_P extends CylinderType >_P init(final _P _product) {
            _product.timeconst = this.timeconst;
            _product.area = this.area;
            _product.diameter = this.diameter;
            _product.bias = this.bias;
            return super.init(_product);
        }

        /**
         * Sets the new value of "timeconst" (any previous value will be replaced)
         * 
         * @param timeconst
         *     New value of the "timeconst" property.
         */
        public CylinderType.Builder<_B> withTimeconst(final BigDecimal timeconst) {
            this.timeconst = timeconst;
            return this;
        }

        /**
         * Sets the new value of "area" (any previous value will be replaced)
         * 
         * @param area
         *     New value of the "area" property.
         */
        public CylinderType.Builder<_B> withArea(final BigDecimal area) {
            this.area = area;
            return this;
        }

        /**
         * Sets the new value of "diameter" (any previous value will be replaced)
         * 
         * @param diameter
         *     New value of the "diameter" property.
         */
        public CylinderType.Builder<_B> withDiameter(final BigDecimal diameter) {
            this.diameter = diameter;
            return this;
        }

        /**
         * Sets the new value of "bias" (any previous value will be replaced)
         * 
         * @param bias
         *     New value of the "bias" property.
         */
        public CylinderType.Builder<_B> withBias(final String bias) {
            this.bias = bias;
            return this;
        }

        /**
         * Sets the new value of "group" (any previous value will be replaced)
         * 
         * @param group
         *     New value of the "group" property.
         */
        @Override
        public CylinderType.Builder<_B> withGroup(final Integer group) {
            super.withGroup(group);
            return this;
        }

        /**
         * Sets the new value of "ctrllimited" (any previous value will be replaced)
         * 
         * @param ctrllimited
         *     New value of the "ctrllimited" property.
         */
        @Override
        public CylinderType.Builder<_B> withCtrllimited(final Boolean ctrllimited) {
            super.withCtrllimited(ctrllimited);
            return this;
        }

        /**
         * Sets the new value of "forcelimited" (any previous value will be replaced)
         * 
         * @param forcelimited
         *     New value of the "forcelimited" property.
         */
        @Override
        public CylinderType.Builder<_B> withForcelimited(final Boolean forcelimited) {
            super.withForcelimited(forcelimited);
            return this;
        }

        /**
         * Sets the new value of "ctrlrange" (any previous value will be replaced)
         * 
         * @param ctrlrange
         *     New value of the "ctrlrange" property.
         */
        @Override
        public CylinderType.Builder<_B> withCtrlrange(final String ctrlrange) {
            super.withCtrlrange(ctrlrange);
            return this;
        }

        /**
         * Sets the new value of "forcerange" (any previous value will be replaced)
         * 
         * @param forcerange
         *     New value of the "forcerange" property.
         */
        @Override
        public CylinderType.Builder<_B> withForcerange(final String forcerange) {
            super.withForcerange(forcerange);
            return this;
        }

        /**
         * Sets the new value of "lengthrange" (any previous value will be replaced)
         * 
         * @param lengthrange
         *     New value of the "lengthrange" property.
         */
        @Override
        public CylinderType.Builder<_B> withLengthrange(final String lengthrange) {
            super.withLengthrange(lengthrange);
            return this;
        }

        /**
         * Sets the new value of "gear" (any previous value will be replaced)
         * 
         * @param gear
         *     New value of the "gear" property.
         */
        @Override
        public CylinderType.Builder<_B> withGear(final String gear) {
            super.withGear(gear);
            return this;
        }

        /**
         * Sets the new value of "cranklength" (any previous value will be replaced)
         * 
         * @param cranklength
         *     New value of the "cranklength" property.
         */
        @Override
        public CylinderType.Builder<_B> withCranklength(final BigDecimal cranklength) {
            super.withCranklength(cranklength);
            return this;
        }

        /**
         * Sets the new value of "user" (any previous value will be replaced)
         * 
         * @param user
         *     New value of the "user" property.
         */
        @Override
        public CylinderType.Builder<_B> withUser(final String user) {
            super.withUser(user);
            return this;
        }

        @Override
        public CylinderType build() {
            return this.init(new CylinderType());
        }

        public CylinderType.Builder<_B> copyOf(final CylinderType _other) {
            _other.copyTo(this);
            return this;
        }

        public CylinderType.Builder<_B> copyOf(final CylinderType.Builder _other) {
            return copyOf(_other.build());
        }

    }

    public static class PropInfo {

        public final static transient String TIMECONST = "timeconst";
        public final static transient String AREA = "area";
        public final static transient String DIAMETER = "diameter";
        public final static transient String BIAS = "bias";

    }

    public static class Select
        extends CylinderType.Selector<CylinderType.Select, Void>
    {


        Select() {
            super(null, null, null);
        }

        public static CylinderType.Select _root() {
            return new CylinderType.Select();
        }

    }

    public static class Selector<TRoot extends com.kscs.util.jaxb.Selector<TRoot, ?> , TParent >
        extends MotorType.Selector<TRoot, TParent>
    {

        private com.kscs.util.jaxb.Selector<TRoot, CylinderType.Selector<TRoot, TParent>> timeconst = null;
        private com.kscs.util.jaxb.Selector<TRoot, CylinderType.Selector<TRoot, TParent>> area = null;
        private com.kscs.util.jaxb.Selector<TRoot, CylinderType.Selector<TRoot, TParent>> diameter = null;
        private com.kscs.util.jaxb.Selector<TRoot, CylinderType.Selector<TRoot, TParent>> bias = null;

        public Selector(final TRoot root, final TParent parent, final String propertyName) {
            super(root, parent, propertyName);
        }

        @Override
        public Map<String, PropertyTree> buildChildren() {
            final Map<String, PropertyTree> products = new HashMap<String, PropertyTree>();
            products.putAll(super.buildChildren());
            if (this.timeconst!= null) {
                products.put("timeconst", this.timeconst.init());
            }
            if (this.area!= null) {
                products.put("area", this.area.init());
            }
            if (this.diameter!= null) {
                products.put("diameter", this.diameter.init());
            }
            if (this.bias!= null) {
                products.put("bias", this.bias.init());
            }
            return products;
        }

        public com.kscs.util.jaxb.Selector<TRoot, CylinderType.Selector<TRoot, TParent>> timeconst() {
            return ((this.timeconst == null)?this.timeconst = new com.kscs.util.jaxb.Selector<TRoot, CylinderType.Selector<TRoot, TParent>>(this._root, this, "timeconst"):this.timeconst);
        }

        public com.kscs.util.jaxb.Selector<TRoot, CylinderType.Selector<TRoot, TParent>> area() {
            return ((this.area == null)?this.area = new com.kscs.util.jaxb.Selector<TRoot, CylinderType.Selector<TRoot, TParent>>(this._root, this, "area"):this.area);
        }

        public com.kscs.util.jaxb.Selector<TRoot, CylinderType.Selector<TRoot, TParent>> diameter() {
            return ((this.diameter == null)?this.diameter = new com.kscs.util.jaxb.Selector<TRoot, CylinderType.Selector<TRoot, TParent>>(this._root, this, "diameter"):this.diameter);
        }

        public com.kscs.util.jaxb.Selector<TRoot, CylinderType.Selector<TRoot, TParent>> bias() {
            return ((this.bias == null)?this.bias = new com.kscs.util.jaxb.Selector<TRoot, CylinderType.Selector<TRoot, TParent>>(this._root, this, "bias"):this.bias);
        }

    }

}
