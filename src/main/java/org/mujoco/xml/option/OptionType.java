//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.3.0 
// See <a href="https://javaee.github.io/jaxb-v2/">https://javaee.github.io/jaxb-v2/</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
//


package org.mujoco.xml.option;

import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeSupport;
import java.beans.PropertyVetoException;
import java.beans.VetoableChangeListener;
import java.beans.VetoableChangeSupport;
import java.math.BigDecimal;
import java.util.HashMap;
import java.util.Map;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.bind.annotation.XmlType;
import com.kscs.util.jaxb.Buildable;
import com.kscs.util.jaxb.Copyable;
import com.kscs.util.jaxb.PartialCopyable;
import com.kscs.util.jaxb.PropertyTree;
import com.kscs.util.jaxb.PropertyTreeUse;
import com.kscs.util.jaxb.PropertyVisitor;
import org.mujoco.xml.attributetypes.CollisionType;
import org.mujoco.xml.attributetypes.ConeType;
import org.mujoco.xml.attributetypes.IntegratorType;
import org.mujoco.xml.attributetypes.JacobianType;
import org.mujoco.xml.attributetypes.SolverType;


/**
 * <p>Java class for optionType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="optionType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;attribute name="timestep" type="{http://www.w3.org/2001/XMLSchema}decimal" default=".002" /&gt;
 *       &lt;attribute name="apirate" type="{http://www.w3.org/2001/XMLSchema}decimal" default="100" /&gt;
 *       &lt;attribute name="impratio" type="{http://www.w3.org/2001/XMLSchema}decimal" default="1" /&gt;
 *       &lt;attribute name="gravity" type="{attributeTypes}threeRealsType" default="0 0 -9.81" /&gt;
 *       &lt;attribute name="wind" type="{attributeTypes}threeRealsType" default="0 0 0" /&gt;
 *       &lt;attribute name="magnetic" type="{attributeTypes}threeRealsType" default="0 -.5 0" /&gt;
 *       &lt;attribute name="density" type="{http://www.w3.org/2001/XMLSchema}decimal" default="0" /&gt;
 *       &lt;attribute name="viscosity" type="{http://www.w3.org/2001/XMLSchema}decimal" default="0" /&gt;
 *       &lt;attribute name="o_margin" type="{http://www.w3.org/2001/XMLSchema}decimal" default="0" /&gt;
 *       &lt;attribute name="o_solimp" type="{attributeTypes}solimpType" default="0.9 0.95 0.001 0.5 2" /&gt;
 *       &lt;attribute name="o_solref" type="{attributeTypes}twoRealsType" default="0.02 1" /&gt;
 *       &lt;attribute name="integrator" type="{attributeTypes}integratorType" default="Euler" /&gt;
 *       &lt;attribute name="collision" type="{attributeTypes}collisionType" default="all" /&gt;
 *       &lt;attribute name="cone" type="{attributeTypes}coneType" default="pyramidal" /&gt;
 *       &lt;attribute name="jacobian" type="{attributeTypes}jacobianType" default="auto" /&gt;
 *       &lt;attribute name="solver" type="{attributeTypes}solverType" default="Newton" /&gt;
 *       &lt;attribute name="iterations" type="{http://www.w3.org/2001/XMLSchema}int" default="100" /&gt;
 *       &lt;attribute name="tolerance" type="{http://www.w3.org/2001/XMLSchema}double" default="1e-8" /&gt;
 *       &lt;attribute name="noslip_iterations" type="{http://www.w3.org/2001/XMLSchema}int" default="0" /&gt;
 *       &lt;attribute name="noslip_tolerance" type="{http://www.w3.org/2001/XMLSchema}double" default="1e-6" /&gt;
 *       &lt;attribute name="mpr_iterations" type="{http://www.w3.org/2001/XMLSchema}int" default="50" /&gt;
 *       &lt;attribute name="mpr_tolerance" type="{http://www.w3.org/2001/XMLSchema}double" default="1e-6" /&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "optionType")
@XmlSeeAlso({
    org.mujoco.xml.Mujoco.Option.class
})
public class OptionType implements Cloneable, Copyable, PartialCopyable
{

    @XmlAttribute(name = "timestep")
    protected BigDecimal timestep;
    @XmlAttribute(name = "apirate")
    protected BigDecimal apirate;
    @XmlAttribute(name = "impratio")
    protected BigDecimal impratio;
    @XmlAttribute(name = "gravity")
    protected String gravity;
    @XmlAttribute(name = "wind")
    protected String wind;
    @XmlAttribute(name = "magnetic")
    protected String magnetic;
    @XmlAttribute(name = "density")
    protected BigDecimal density;
    @XmlAttribute(name = "viscosity")
    protected BigDecimal viscosity;
    @XmlAttribute(name = "o_margin")
    protected BigDecimal oMargin;
    @XmlAttribute(name = "o_solimp")
    protected String oSolimp;
    @XmlAttribute(name = "o_solref")
    protected String oSolref;
    @XmlAttribute(name = "integrator")
    protected IntegratorType integrator;
    @XmlAttribute(name = "collision")
    protected CollisionType collision;
    @XmlAttribute(name = "cone")
    protected ConeType cone;
    @XmlAttribute(name = "jacobian")
    protected JacobianType jacobian;
    @XmlAttribute(name = "solver")
    protected SolverType solver;
    @XmlAttribute(name = "iterations")
    protected Integer iterations;
    @XmlAttribute(name = "tolerance")
    protected Double tolerance;
    @XmlAttribute(name = "noslip_iterations")
    protected Integer noslipIterations;
    @XmlAttribute(name = "noslip_tolerance")
    protected Double noslipTolerance;
    @XmlAttribute(name = "mpr_iterations")
    protected Integer mprIterations;
    @XmlAttribute(name = "mpr_tolerance")
    protected Double mprTolerance;
    protected final transient VetoableChangeSupport vetoableChange__Support = new VetoableChangeSupport(this);
    protected final transient PropertyChangeSupport propertyChange__Support = new PropertyChangeSupport(this);

    /**
     * Generated by copy-constructor plugin, JAXB requires public no-arg constructor.
     * 
     */
    public OptionType() {
        // Generated by copy-constructor plugin, JAXB requires public no-arg constructor.
    }

    /**
     * Instantiates a OptionType copying the state of another OptionType
     * 
     * @param _other
     *     The original OptionType from which to copy state.
     */
    public OptionType(final OptionType _other) {
        this.timestep = _other.timestep;
        this.apirate = _other.apirate;
        this.impratio = _other.impratio;
        this.gravity = _other.gravity;
        this.wind = _other.wind;
        this.magnetic = _other.magnetic;
        this.density = _other.density;
        this.viscosity = _other.viscosity;
        this.oMargin = _other.oMargin;
        this.oSolimp = _other.oSolimp;
        this.oSolref = _other.oSolref;
        this.integrator = _other.integrator;
        this.collision = _other.collision;
        this.cone = _other.cone;
        this.jacobian = _other.jacobian;
        this.solver = _other.solver;
        this.iterations = _other.iterations;
        this.tolerance = _other.tolerance;
        this.noslipIterations = _other.noslipIterations;
        this.noslipTolerance = _other.noslipTolerance;
        this.mprIterations = _other.mprIterations;
        this.mprTolerance = _other.mprTolerance;
    }

    /**
     * Instantiates a OptionType copying the state of another OptionType
     * 
     * @param _propertyTreeUse
     *     Meaning of the : Exclude or include members contained in property path.
     * @param _propertyTree
     *     A restricting  that defines which nodes of the source object tree should actually be copied.
     * @param _other
     *     The original OptionType from which to copy state.
     */
    public OptionType(final OptionType _other, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        final PropertyTree timestepPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("timestep"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(timestepPropertyTree!= null):((timestepPropertyTree == null)||(!timestepPropertyTree.isLeaf())))) {
            this.timestep = _other.timestep;
        }
        final PropertyTree apiratePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("apirate"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(apiratePropertyTree!= null):((apiratePropertyTree == null)||(!apiratePropertyTree.isLeaf())))) {
            this.apirate = _other.apirate;
        }
        final PropertyTree impratioPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("impratio"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(impratioPropertyTree!= null):((impratioPropertyTree == null)||(!impratioPropertyTree.isLeaf())))) {
            this.impratio = _other.impratio;
        }
        final PropertyTree gravityPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("gravity"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(gravityPropertyTree!= null):((gravityPropertyTree == null)||(!gravityPropertyTree.isLeaf())))) {
            this.gravity = _other.gravity;
        }
        final PropertyTree windPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("wind"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(windPropertyTree!= null):((windPropertyTree == null)||(!windPropertyTree.isLeaf())))) {
            this.wind = _other.wind;
        }
        final PropertyTree magneticPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("magnetic"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(magneticPropertyTree!= null):((magneticPropertyTree == null)||(!magneticPropertyTree.isLeaf())))) {
            this.magnetic = _other.magnetic;
        }
        final PropertyTree densityPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("density"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(densityPropertyTree!= null):((densityPropertyTree == null)||(!densityPropertyTree.isLeaf())))) {
            this.density = _other.density;
        }
        final PropertyTree viscosityPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("viscosity"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(viscosityPropertyTree!= null):((viscosityPropertyTree == null)||(!viscosityPropertyTree.isLeaf())))) {
            this.viscosity = _other.viscosity;
        }
        final PropertyTree oMarginPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("oMargin"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(oMarginPropertyTree!= null):((oMarginPropertyTree == null)||(!oMarginPropertyTree.isLeaf())))) {
            this.oMargin = _other.oMargin;
        }
        final PropertyTree oSolimpPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("oSolimp"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(oSolimpPropertyTree!= null):((oSolimpPropertyTree == null)||(!oSolimpPropertyTree.isLeaf())))) {
            this.oSolimp = _other.oSolimp;
        }
        final PropertyTree oSolrefPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("oSolref"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(oSolrefPropertyTree!= null):((oSolrefPropertyTree == null)||(!oSolrefPropertyTree.isLeaf())))) {
            this.oSolref = _other.oSolref;
        }
        final PropertyTree integratorPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("integrator"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(integratorPropertyTree!= null):((integratorPropertyTree == null)||(!integratorPropertyTree.isLeaf())))) {
            this.integrator = _other.integrator;
        }
        final PropertyTree collisionPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("collision"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(collisionPropertyTree!= null):((collisionPropertyTree == null)||(!collisionPropertyTree.isLeaf())))) {
            this.collision = _other.collision;
        }
        final PropertyTree conePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("cone"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(conePropertyTree!= null):((conePropertyTree == null)||(!conePropertyTree.isLeaf())))) {
            this.cone = _other.cone;
        }
        final PropertyTree jacobianPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("jacobian"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(jacobianPropertyTree!= null):((jacobianPropertyTree == null)||(!jacobianPropertyTree.isLeaf())))) {
            this.jacobian = _other.jacobian;
        }
        final PropertyTree solverPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("solver"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(solverPropertyTree!= null):((solverPropertyTree == null)||(!solverPropertyTree.isLeaf())))) {
            this.solver = _other.solver;
        }
        final PropertyTree iterationsPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("iterations"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(iterationsPropertyTree!= null):((iterationsPropertyTree == null)||(!iterationsPropertyTree.isLeaf())))) {
            this.iterations = _other.iterations;
        }
        final PropertyTree tolerancePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("tolerance"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(tolerancePropertyTree!= null):((tolerancePropertyTree == null)||(!tolerancePropertyTree.isLeaf())))) {
            this.tolerance = _other.tolerance;
        }
        final PropertyTree noslipIterationsPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("noslipIterations"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(noslipIterationsPropertyTree!= null):((noslipIterationsPropertyTree == null)||(!noslipIterationsPropertyTree.isLeaf())))) {
            this.noslipIterations = _other.noslipIterations;
        }
        final PropertyTree noslipTolerancePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("noslipTolerance"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(noslipTolerancePropertyTree!= null):((noslipTolerancePropertyTree == null)||(!noslipTolerancePropertyTree.isLeaf())))) {
            this.noslipTolerance = _other.noslipTolerance;
        }
        final PropertyTree mprIterationsPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("mprIterations"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(mprIterationsPropertyTree!= null):((mprIterationsPropertyTree == null)||(!mprIterationsPropertyTree.isLeaf())))) {
            this.mprIterations = _other.mprIterations;
        }
        final PropertyTree mprTolerancePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("mprTolerance"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(mprTolerancePropertyTree!= null):((mprTolerancePropertyTree == null)||(!mprTolerancePropertyTree.isLeaf())))) {
            this.mprTolerance = _other.mprTolerance;
        }
    }

    /**
     * Gets the value of the timestep property.
     * 
     * @return
     *     possible object is
     *     {@link BigDecimal }
     *     
     */
    public BigDecimal getTimestep() {
        if (timestep == null) {
            return new BigDecimal(".002");
        } else {
            return timestep;
        }
    }

    /**
     * Gets the value of the apirate property.
     * 
     * @return
     *     possible object is
     *     {@link BigDecimal }
     *     
     */
    public BigDecimal getApirate() {
        if (apirate == null) {
            return new BigDecimal("100");
        } else {
            return apirate;
        }
    }

    /**
     * Gets the value of the impratio property.
     * 
     * @return
     *     possible object is
     *     {@link BigDecimal }
     *     
     */
    public BigDecimal getImpratio() {
        if (impratio == null) {
            return new BigDecimal("1");
        } else {
            return impratio;
        }
    }

    /**
     * Gets the value of the gravity property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getGravity() {
        if (gravity == null) {
            return "0 0 -9.81";
        } else {
            return gravity;
        }
    }

    /**
     * Gets the value of the wind property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getWind() {
        if (wind == null) {
            return "0 0 0";
        } else {
            return wind;
        }
    }

    /**
     * Gets the value of the magnetic property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getMagnetic() {
        if (magnetic == null) {
            return "0 -.5 0";
        } else {
            return magnetic;
        }
    }

    /**
     * Gets the value of the density property.
     * 
     * @return
     *     possible object is
     *     {@link BigDecimal }
     *     
     */
    public BigDecimal getDensity() {
        if (density == null) {
            return new BigDecimal("0");
        } else {
            return density;
        }
    }

    /**
     * Gets the value of the viscosity property.
     * 
     * @return
     *     possible object is
     *     {@link BigDecimal }
     *     
     */
    public BigDecimal getViscosity() {
        if (viscosity == null) {
            return new BigDecimal("0");
        } else {
            return viscosity;
        }
    }

    /**
     * Gets the value of the oMargin property.
     * 
     * @return
     *     possible object is
     *     {@link BigDecimal }
     *     
     */
    public BigDecimal getOMargin() {
        if (oMargin == null) {
            return new BigDecimal("0");
        } else {
            return oMargin;
        }
    }

    /**
     * Gets the value of the oSolimp property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getOSolimp() {
        if (oSolimp == null) {
            return "0.9 0.95 0.001 0.5 2";
        } else {
            return oSolimp;
        }
    }

    /**
     * Gets the value of the oSolref property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getOSolref() {
        if (oSolref == null) {
            return "0.02 1";
        } else {
            return oSolref;
        }
    }

    /**
     * Gets the value of the integrator property.
     * 
     * @return
     *     possible object is
     *     {@link IntegratorType }
     *     
     */
    public IntegratorType getIntegrator() {
        if (integrator == null) {
            return IntegratorType.EULER;
        } else {
            return integrator;
        }
    }

    /**
     * Gets the value of the collision property.
     * 
     * @return
     *     possible object is
     *     {@link CollisionType }
     *     
     */
    public CollisionType getCollision() {
        if (collision == null) {
            return CollisionType.ALL;
        } else {
            return collision;
        }
    }

    /**
     * Gets the value of the cone property.
     * 
     * @return
     *     possible object is
     *     {@link ConeType }
     *     
     */
    public ConeType getCone() {
        if (cone == null) {
            return ConeType.PYRAMIDAL;
        } else {
            return cone;
        }
    }

    /**
     * Gets the value of the jacobian property.
     * 
     * @return
     *     possible object is
     *     {@link JacobianType }
     *     
     */
    public JacobianType getJacobian() {
        if (jacobian == null) {
            return JacobianType.AUTO;
        } else {
            return jacobian;
        }
    }

    /**
     * Gets the value of the solver property.
     * 
     * @return
     *     possible object is
     *     {@link SolverType }
     *     
     */
    public SolverType getSolver() {
        if (solver == null) {
            return SolverType.NEWTON;
        } else {
            return solver;
        }
    }

    /**
     * Gets the value of the iterations property.
     * 
     * @return
     *     possible object is
     *     {@link Integer }
     *     
     */
    public int getIterations() {
        if (iterations == null) {
            return  100;
        } else {
            return iterations;
        }
    }

    /**
     * Gets the value of the tolerance property.
     * 
     * @return
     *     possible object is
     *     {@link Double }
     *     
     */
    public double getTolerance() {
        if (tolerance == null) {
            return  1.0E-8D;
        } else {
            return tolerance;
        }
    }

    /**
     * Gets the value of the noslipIterations property.
     * 
     * @return
     *     possible object is
     *     {@link Integer }
     *     
     */
    public int getNoslipIterations() {
        if (noslipIterations == null) {
            return  0;
        } else {
            return noslipIterations;
        }
    }

    /**
     * Gets the value of the noslipTolerance property.
     * 
     * @return
     *     possible object is
     *     {@link Double }
     *     
     */
    public double getNoslipTolerance() {
        if (noslipTolerance == null) {
            return  1.0E-6D;
        } else {
            return noslipTolerance;
        }
    }

    /**
     * Gets the value of the mprIterations property.
     * 
     * @return
     *     possible object is
     *     {@link Integer }
     *     
     */
    public int getMprIterations() {
        if (mprIterations == null) {
            return  50;
        } else {
            return mprIterations;
        }
    }

    /**
     * Gets the value of the mprTolerance property.
     * 
     * @return
     *     possible object is
     *     {@link Double }
     *     
     */
    public double getMprTolerance() {
        if (mprTolerance == null) {
            return  1.0E-6D;
        } else {
            return mprTolerance;
        }
    }

    public void addVetoableChangeListener(final VetoableChangeListener vetoableChangeListener) {
        this.vetoableChange__Support.addVetoableChangeListener(vetoableChangeListener);
    }

    public void removeVetoableChangeListener(final VetoableChangeListener vetoableChangeListener) {
        this.vetoableChange__Support.removeVetoableChangeListener(vetoableChangeListener);
    }

    public OptionType withVetoableChangeListener(final VetoableChangeListener vetoableChangeListener) {
        addVetoableChangeListener(vetoableChangeListener);
        return this;
    }

    public void addPropertyChangeListener(final PropertyChangeListener propertyChangeListener) {
        this.propertyChange__Support.addPropertyChangeListener(propertyChangeListener);
    }

    public void removePropertyChangeListener(final PropertyChangeListener propertyChangeListener) {
        this.propertyChange__Support.removePropertyChangeListener(propertyChangeListener);
    }

    public OptionType withPropertyChangeListener(final PropertyChangeListener propertyChangeListener) {
        addPropertyChangeListener(propertyChangeListener);
        return this;
    }

    public void setTimestep(final BigDecimal value) {
        final BigDecimal __oldValue = this.timestep;
        try {
            this.vetoableChange__Support.fireVetoableChange("timestep", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.timestep = value;
        this.propertyChange__Support.firePropertyChange("timestep", __oldValue, value);
    }

    public void setApirate(final BigDecimal value) {
        final BigDecimal __oldValue = this.apirate;
        try {
            this.vetoableChange__Support.fireVetoableChange("apirate", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.apirate = value;
        this.propertyChange__Support.firePropertyChange("apirate", __oldValue, value);
    }

    public void setImpratio(final BigDecimal value) {
        final BigDecimal __oldValue = this.impratio;
        try {
            this.vetoableChange__Support.fireVetoableChange("impratio", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.impratio = value;
        this.propertyChange__Support.firePropertyChange("impratio", __oldValue, value);
    }

    public void setGravity(final String value) {
        final String __oldValue = this.gravity;
        try {
            this.vetoableChange__Support.fireVetoableChange("gravity", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.gravity = value;
        this.propertyChange__Support.firePropertyChange("gravity", __oldValue, value);
    }

    public void setWind(final String value) {
        final String __oldValue = this.wind;
        try {
            this.vetoableChange__Support.fireVetoableChange("wind", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.wind = value;
        this.propertyChange__Support.firePropertyChange("wind", __oldValue, value);
    }

    public void setMagnetic(final String value) {
        final String __oldValue = this.magnetic;
        try {
            this.vetoableChange__Support.fireVetoableChange("magnetic", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.magnetic = value;
        this.propertyChange__Support.firePropertyChange("magnetic", __oldValue, value);
    }

    public void setDensity(final BigDecimal value) {
        final BigDecimal __oldValue = this.density;
        try {
            this.vetoableChange__Support.fireVetoableChange("density", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.density = value;
        this.propertyChange__Support.firePropertyChange("density", __oldValue, value);
    }

    public void setViscosity(final BigDecimal value) {
        final BigDecimal __oldValue = this.viscosity;
        try {
            this.vetoableChange__Support.fireVetoableChange("viscosity", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.viscosity = value;
        this.propertyChange__Support.firePropertyChange("viscosity", __oldValue, value);
    }

    public void setOMargin(final BigDecimal value) {
        final BigDecimal __oldValue = this.oMargin;
        try {
            this.vetoableChange__Support.fireVetoableChange("oMargin", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.oMargin = value;
        this.propertyChange__Support.firePropertyChange("oMargin", __oldValue, value);
    }

    public void setOSolimp(final String value) {
        final String __oldValue = this.oSolimp;
        try {
            this.vetoableChange__Support.fireVetoableChange("oSolimp", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.oSolimp = value;
        this.propertyChange__Support.firePropertyChange("oSolimp", __oldValue, value);
    }

    public void setOSolref(final String value) {
        final String __oldValue = this.oSolref;
        try {
            this.vetoableChange__Support.fireVetoableChange("oSolref", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.oSolref = value;
        this.propertyChange__Support.firePropertyChange("oSolref", __oldValue, value);
    }

    public void setIntegrator(final IntegratorType value) {
        final IntegratorType __oldValue = this.integrator;
        try {
            this.vetoableChange__Support.fireVetoableChange("integrator", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.integrator = value;
        this.propertyChange__Support.firePropertyChange("integrator", __oldValue, value);
    }

    public void setCollision(final CollisionType value) {
        final CollisionType __oldValue = this.collision;
        try {
            this.vetoableChange__Support.fireVetoableChange("collision", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.collision = value;
        this.propertyChange__Support.firePropertyChange("collision", __oldValue, value);
    }

    public void setCone(final ConeType value) {
        final ConeType __oldValue = this.cone;
        try {
            this.vetoableChange__Support.fireVetoableChange("cone", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.cone = value;
        this.propertyChange__Support.firePropertyChange("cone", __oldValue, value);
    }

    public void setJacobian(final JacobianType value) {
        final JacobianType __oldValue = this.jacobian;
        try {
            this.vetoableChange__Support.fireVetoableChange("jacobian", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.jacobian = value;
        this.propertyChange__Support.firePropertyChange("jacobian", __oldValue, value);
    }

    public void setSolver(final SolverType value) {
        final SolverType __oldValue = this.solver;
        try {
            this.vetoableChange__Support.fireVetoableChange("solver", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.solver = value;
        this.propertyChange__Support.firePropertyChange("solver", __oldValue, value);
    }

    public void setIterations(final Integer value) {
        final Integer __oldValue = this.iterations;
        try {
            this.vetoableChange__Support.fireVetoableChange("iterations", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.iterations = value;
        this.propertyChange__Support.firePropertyChange("iterations", __oldValue, value);
    }

    public void setTolerance(final Double value) {
        final Double __oldValue = this.tolerance;
        try {
            this.vetoableChange__Support.fireVetoableChange("tolerance", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.tolerance = value;
        this.propertyChange__Support.firePropertyChange("tolerance", __oldValue, value);
    }

    public void setNoslipIterations(final Integer value) {
        final Integer __oldValue = this.noslipIterations;
        try {
            this.vetoableChange__Support.fireVetoableChange("noslipIterations", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.noslipIterations = value;
        this.propertyChange__Support.firePropertyChange("noslipIterations", __oldValue, value);
    }

    public void setNoslipTolerance(final Double value) {
        final Double __oldValue = this.noslipTolerance;
        try {
            this.vetoableChange__Support.fireVetoableChange("noslipTolerance", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.noslipTolerance = value;
        this.propertyChange__Support.firePropertyChange("noslipTolerance", __oldValue, value);
    }

    public void setMprIterations(final Integer value) {
        final Integer __oldValue = this.mprIterations;
        try {
            this.vetoableChange__Support.fireVetoableChange("mprIterations", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.mprIterations = value;
        this.propertyChange__Support.firePropertyChange("mprIterations", __oldValue, value);
    }

    public void setMprTolerance(final Double value) {
        final Double __oldValue = this.mprTolerance;
        try {
            this.vetoableChange__Support.fireVetoableChange("mprTolerance", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.mprTolerance = value;
        this.propertyChange__Support.firePropertyChange("mprTolerance", __oldValue, value);
    }

    @Override
    public OptionType clone() {
        final OptionType _newObject;
        try {
            _newObject = ((OptionType) super.clone());
        } catch (CloneNotSupportedException e) {
            throw new RuntimeException(e);
        }
        return _newObject;
    }

    @Override
    public OptionType createCopy() {
        final OptionType _newObject;
        try {
            _newObject = ((OptionType) super.clone());
        } catch (CloneNotSupportedException e) {
            throw new RuntimeException(e);
        }
        _newObject.timestep = this.timestep;
        _newObject.apirate = this.apirate;
        _newObject.impratio = this.impratio;
        _newObject.gravity = this.gravity;
        _newObject.wind = this.wind;
        _newObject.magnetic = this.magnetic;
        _newObject.density = this.density;
        _newObject.viscosity = this.viscosity;
        _newObject.oMargin = this.oMargin;
        _newObject.oSolimp = this.oSolimp;
        _newObject.oSolref = this.oSolref;
        _newObject.integrator = this.integrator;
        _newObject.collision = this.collision;
        _newObject.cone = this.cone;
        _newObject.jacobian = this.jacobian;
        _newObject.solver = this.solver;
        _newObject.iterations = this.iterations;
        _newObject.tolerance = this.tolerance;
        _newObject.noslipIterations = this.noslipIterations;
        _newObject.noslipTolerance = this.noslipTolerance;
        _newObject.mprIterations = this.mprIterations;
        _newObject.mprTolerance = this.mprTolerance;
        return _newObject;
    }

    @Override
    public OptionType createCopy(final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        final OptionType _newObject;
        try {
            _newObject = ((OptionType) super.clone());
        } catch (CloneNotSupportedException e) {
            throw new RuntimeException(e);
        }
        final PropertyTree timestepPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("timestep"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(timestepPropertyTree!= null):((timestepPropertyTree == null)||(!timestepPropertyTree.isLeaf())))) {
            _newObject.timestep = this.timestep;
        }
        final PropertyTree apiratePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("apirate"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(apiratePropertyTree!= null):((apiratePropertyTree == null)||(!apiratePropertyTree.isLeaf())))) {
            _newObject.apirate = this.apirate;
        }
        final PropertyTree impratioPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("impratio"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(impratioPropertyTree!= null):((impratioPropertyTree == null)||(!impratioPropertyTree.isLeaf())))) {
            _newObject.impratio = this.impratio;
        }
        final PropertyTree gravityPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("gravity"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(gravityPropertyTree!= null):((gravityPropertyTree == null)||(!gravityPropertyTree.isLeaf())))) {
            _newObject.gravity = this.gravity;
        }
        final PropertyTree windPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("wind"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(windPropertyTree!= null):((windPropertyTree == null)||(!windPropertyTree.isLeaf())))) {
            _newObject.wind = this.wind;
        }
        final PropertyTree magneticPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("magnetic"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(magneticPropertyTree!= null):((magneticPropertyTree == null)||(!magneticPropertyTree.isLeaf())))) {
            _newObject.magnetic = this.magnetic;
        }
        final PropertyTree densityPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("density"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(densityPropertyTree!= null):((densityPropertyTree == null)||(!densityPropertyTree.isLeaf())))) {
            _newObject.density = this.density;
        }
        final PropertyTree viscosityPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("viscosity"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(viscosityPropertyTree!= null):((viscosityPropertyTree == null)||(!viscosityPropertyTree.isLeaf())))) {
            _newObject.viscosity = this.viscosity;
        }
        final PropertyTree oMarginPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("oMargin"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(oMarginPropertyTree!= null):((oMarginPropertyTree == null)||(!oMarginPropertyTree.isLeaf())))) {
            _newObject.oMargin = this.oMargin;
        }
        final PropertyTree oSolimpPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("oSolimp"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(oSolimpPropertyTree!= null):((oSolimpPropertyTree == null)||(!oSolimpPropertyTree.isLeaf())))) {
            _newObject.oSolimp = this.oSolimp;
        }
        final PropertyTree oSolrefPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("oSolref"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(oSolrefPropertyTree!= null):((oSolrefPropertyTree == null)||(!oSolrefPropertyTree.isLeaf())))) {
            _newObject.oSolref = this.oSolref;
        }
        final PropertyTree integratorPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("integrator"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(integratorPropertyTree!= null):((integratorPropertyTree == null)||(!integratorPropertyTree.isLeaf())))) {
            _newObject.integrator = this.integrator;
        }
        final PropertyTree collisionPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("collision"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(collisionPropertyTree!= null):((collisionPropertyTree == null)||(!collisionPropertyTree.isLeaf())))) {
            _newObject.collision = this.collision;
        }
        final PropertyTree conePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("cone"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(conePropertyTree!= null):((conePropertyTree == null)||(!conePropertyTree.isLeaf())))) {
            _newObject.cone = this.cone;
        }
        final PropertyTree jacobianPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("jacobian"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(jacobianPropertyTree!= null):((jacobianPropertyTree == null)||(!jacobianPropertyTree.isLeaf())))) {
            _newObject.jacobian = this.jacobian;
        }
        final PropertyTree solverPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("solver"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(solverPropertyTree!= null):((solverPropertyTree == null)||(!solverPropertyTree.isLeaf())))) {
            _newObject.solver = this.solver;
        }
        final PropertyTree iterationsPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("iterations"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(iterationsPropertyTree!= null):((iterationsPropertyTree == null)||(!iterationsPropertyTree.isLeaf())))) {
            _newObject.iterations = this.iterations;
        }
        final PropertyTree tolerancePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("tolerance"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(tolerancePropertyTree!= null):((tolerancePropertyTree == null)||(!tolerancePropertyTree.isLeaf())))) {
            _newObject.tolerance = this.tolerance;
        }
        final PropertyTree noslipIterationsPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("noslipIterations"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(noslipIterationsPropertyTree!= null):((noslipIterationsPropertyTree == null)||(!noslipIterationsPropertyTree.isLeaf())))) {
            _newObject.noslipIterations = this.noslipIterations;
        }
        final PropertyTree noslipTolerancePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("noslipTolerance"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(noslipTolerancePropertyTree!= null):((noslipTolerancePropertyTree == null)||(!noslipTolerancePropertyTree.isLeaf())))) {
            _newObject.noslipTolerance = this.noslipTolerance;
        }
        final PropertyTree mprIterationsPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("mprIterations"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(mprIterationsPropertyTree!= null):((mprIterationsPropertyTree == null)||(!mprIterationsPropertyTree.isLeaf())))) {
            _newObject.mprIterations = this.mprIterations;
        }
        final PropertyTree mprTolerancePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("mprTolerance"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(mprTolerancePropertyTree!= null):((mprTolerancePropertyTree == null)||(!mprTolerancePropertyTree.isLeaf())))) {
            _newObject.mprTolerance = this.mprTolerance;
        }
        return _newObject;
    }

    @Override
    public OptionType copyExcept(final PropertyTree _propertyTree) {
        return createCopy(_propertyTree, PropertyTreeUse.EXCLUDE);
    }

    @Override
    public OptionType copyOnly(final PropertyTree _propertyTree) {
        return createCopy(_propertyTree, PropertyTreeUse.INCLUDE);
    }

    /**
     * Copies all state of this object to a builder. This method is used by the {@link #copyOf} method and should not be called directly by client code.
     * 
     * @param _other
     *     A builder instance to which the state of this object will be copied.
     */
    public<_B >void copyTo(final OptionType.Builder<_B> _other) {
        _other.timestep = this.timestep;
        _other.apirate = this.apirate;
        _other.impratio = this.impratio;
        _other.gravity = this.gravity;
        _other.wind = this.wind;
        _other.magnetic = this.magnetic;
        _other.density = this.density;
        _other.viscosity = this.viscosity;
        _other.oMargin = this.oMargin;
        _other.oSolimp = this.oSolimp;
        _other.oSolref = this.oSolref;
        _other.integrator = this.integrator;
        _other.collision = this.collision;
        _other.cone = this.cone;
        _other.jacobian = this.jacobian;
        _other.solver = this.solver;
        _other.iterations = this.iterations;
        _other.tolerance = this.tolerance;
        _other.noslipIterations = this.noslipIterations;
        _other.noslipTolerance = this.noslipTolerance;
        _other.mprIterations = this.mprIterations;
        _other.mprTolerance = this.mprTolerance;
    }

    public<_B >OptionType.Builder<_B> newCopyBuilder(final _B _parentBuilder) {
        return new OptionType.Builder<_B>(_parentBuilder, this, true);
    }

    public OptionType.Builder<Void> newCopyBuilder() {
        return newCopyBuilder(null);
    }

    public static OptionType.Builder<Void> builder() {
        return new OptionType.Builder<Void>(null, null, false);
    }

    public static<_B >OptionType.Builder<_B> copyOf(final OptionType _other) {
        final OptionType.Builder<_B> _newBuilder = new OptionType.Builder<_B>(null, null, false);
        _other.copyTo(_newBuilder);
        return _newBuilder;
    }

    /**
     * Copies all state of this object to a builder. This method is used by the {@link #copyOf} method and should not be called directly by client code.
     * 
     * @param _other
     *     A builder instance to which the state of this object will be copied.
     */
    public<_B >void copyTo(final OptionType.Builder<_B> _other, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        final PropertyTree timestepPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("timestep"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(timestepPropertyTree!= null):((timestepPropertyTree == null)||(!timestepPropertyTree.isLeaf())))) {
            _other.timestep = this.timestep;
        }
        final PropertyTree apiratePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("apirate"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(apiratePropertyTree!= null):((apiratePropertyTree == null)||(!apiratePropertyTree.isLeaf())))) {
            _other.apirate = this.apirate;
        }
        final PropertyTree impratioPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("impratio"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(impratioPropertyTree!= null):((impratioPropertyTree == null)||(!impratioPropertyTree.isLeaf())))) {
            _other.impratio = this.impratio;
        }
        final PropertyTree gravityPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("gravity"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(gravityPropertyTree!= null):((gravityPropertyTree == null)||(!gravityPropertyTree.isLeaf())))) {
            _other.gravity = this.gravity;
        }
        final PropertyTree windPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("wind"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(windPropertyTree!= null):((windPropertyTree == null)||(!windPropertyTree.isLeaf())))) {
            _other.wind = this.wind;
        }
        final PropertyTree magneticPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("magnetic"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(magneticPropertyTree!= null):((magneticPropertyTree == null)||(!magneticPropertyTree.isLeaf())))) {
            _other.magnetic = this.magnetic;
        }
        final PropertyTree densityPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("density"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(densityPropertyTree!= null):((densityPropertyTree == null)||(!densityPropertyTree.isLeaf())))) {
            _other.density = this.density;
        }
        final PropertyTree viscosityPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("viscosity"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(viscosityPropertyTree!= null):((viscosityPropertyTree == null)||(!viscosityPropertyTree.isLeaf())))) {
            _other.viscosity = this.viscosity;
        }
        final PropertyTree oMarginPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("oMargin"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(oMarginPropertyTree!= null):((oMarginPropertyTree == null)||(!oMarginPropertyTree.isLeaf())))) {
            _other.oMargin = this.oMargin;
        }
        final PropertyTree oSolimpPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("oSolimp"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(oSolimpPropertyTree!= null):((oSolimpPropertyTree == null)||(!oSolimpPropertyTree.isLeaf())))) {
            _other.oSolimp = this.oSolimp;
        }
        final PropertyTree oSolrefPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("oSolref"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(oSolrefPropertyTree!= null):((oSolrefPropertyTree == null)||(!oSolrefPropertyTree.isLeaf())))) {
            _other.oSolref = this.oSolref;
        }
        final PropertyTree integratorPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("integrator"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(integratorPropertyTree!= null):((integratorPropertyTree == null)||(!integratorPropertyTree.isLeaf())))) {
            _other.integrator = this.integrator;
        }
        final PropertyTree collisionPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("collision"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(collisionPropertyTree!= null):((collisionPropertyTree == null)||(!collisionPropertyTree.isLeaf())))) {
            _other.collision = this.collision;
        }
        final PropertyTree conePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("cone"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(conePropertyTree!= null):((conePropertyTree == null)||(!conePropertyTree.isLeaf())))) {
            _other.cone = this.cone;
        }
        final PropertyTree jacobianPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("jacobian"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(jacobianPropertyTree!= null):((jacobianPropertyTree == null)||(!jacobianPropertyTree.isLeaf())))) {
            _other.jacobian = this.jacobian;
        }
        final PropertyTree solverPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("solver"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(solverPropertyTree!= null):((solverPropertyTree == null)||(!solverPropertyTree.isLeaf())))) {
            _other.solver = this.solver;
        }
        final PropertyTree iterationsPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("iterations"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(iterationsPropertyTree!= null):((iterationsPropertyTree == null)||(!iterationsPropertyTree.isLeaf())))) {
            _other.iterations = this.iterations;
        }
        final PropertyTree tolerancePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("tolerance"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(tolerancePropertyTree!= null):((tolerancePropertyTree == null)||(!tolerancePropertyTree.isLeaf())))) {
            _other.tolerance = this.tolerance;
        }
        final PropertyTree noslipIterationsPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("noslipIterations"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(noslipIterationsPropertyTree!= null):((noslipIterationsPropertyTree == null)||(!noslipIterationsPropertyTree.isLeaf())))) {
            _other.noslipIterations = this.noslipIterations;
        }
        final PropertyTree noslipTolerancePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("noslipTolerance"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(noslipTolerancePropertyTree!= null):((noslipTolerancePropertyTree == null)||(!noslipTolerancePropertyTree.isLeaf())))) {
            _other.noslipTolerance = this.noslipTolerance;
        }
        final PropertyTree mprIterationsPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("mprIterations"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(mprIterationsPropertyTree!= null):((mprIterationsPropertyTree == null)||(!mprIterationsPropertyTree.isLeaf())))) {
            _other.mprIterations = this.mprIterations;
        }
        final PropertyTree mprTolerancePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("mprTolerance"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(mprTolerancePropertyTree!= null):((mprTolerancePropertyTree == null)||(!mprTolerancePropertyTree.isLeaf())))) {
            _other.mprTolerance = this.mprTolerance;
        }
    }

    public<_B >OptionType.Builder<_B> newCopyBuilder(final _B _parentBuilder, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        return new OptionType.Builder<_B>(_parentBuilder, this, true, _propertyTree, _propertyTreeUse);
    }

    public OptionType.Builder<Void> newCopyBuilder(final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        return newCopyBuilder(null, _propertyTree, _propertyTreeUse);
    }

    public static<_B >OptionType.Builder<_B> copyOf(final OptionType _other, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        final OptionType.Builder<_B> _newBuilder = new OptionType.Builder<_B>(null, null, false);
        _other.copyTo(_newBuilder, _propertyTree, _propertyTreeUse);
        return _newBuilder;
    }

    public static OptionType.Builder<Void> copyExcept(final OptionType _other, final PropertyTree _propertyTree) {
        return copyOf(_other, _propertyTree, PropertyTreeUse.EXCLUDE);
    }

    public static OptionType.Builder<Void> copyOnly(final OptionType _other, final PropertyTree _propertyTree) {
        return copyOf(_other, _propertyTree, PropertyTreeUse.INCLUDE);
    }

    public OptionType visit(final PropertyVisitor _visitor_) {
        _visitor_.visit(this);
        return this;
    }

    public static class Builder<_B >implements Buildable
    {

        protected final _B _parentBuilder;
        private BigDecimal timestep;
        private BigDecimal apirate;
        private BigDecimal impratio;
        private String gravity;
        private String wind;
        private String magnetic;
        private BigDecimal density;
        private BigDecimal viscosity;
        private BigDecimal oMargin;
        private String oSolimp;
        private String oSolref;
        private IntegratorType integrator;
        private CollisionType collision;
        private ConeType cone;
        private JacobianType jacobian;
        private SolverType solver;
        private Integer iterations;
        private Double tolerance;
        private Integer noslipIterations;
        private Double noslipTolerance;
        private Integer mprIterations;
        private Double mprTolerance;

        public Builder(final _B _parentBuilder, final OptionType _other, final boolean _copy) {
            this._parentBuilder = _parentBuilder;
            if (_other!= null) {
                this.timestep = _other.timestep;
                this.apirate = _other.apirate;
                this.impratio = _other.impratio;
                this.gravity = _other.gravity;
                this.wind = _other.wind;
                this.magnetic = _other.magnetic;
                this.density = _other.density;
                this.viscosity = _other.viscosity;
                this.oMargin = _other.oMargin;
                this.oSolimp = _other.oSolimp;
                this.oSolref = _other.oSolref;
                this.integrator = _other.integrator;
                this.collision = _other.collision;
                this.cone = _other.cone;
                this.jacobian = _other.jacobian;
                this.solver = _other.solver;
                this.iterations = _other.iterations;
                this.tolerance = _other.tolerance;
                this.noslipIterations = _other.noslipIterations;
                this.noslipTolerance = _other.noslipTolerance;
                this.mprIterations = _other.mprIterations;
                this.mprTolerance = _other.mprTolerance;
            }
        }

        public Builder(final _B _parentBuilder, final OptionType _other, final boolean _copy, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
            this._parentBuilder = _parentBuilder;
            if (_other!= null) {
                final PropertyTree timestepPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("timestep"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(timestepPropertyTree!= null):((timestepPropertyTree == null)||(!timestepPropertyTree.isLeaf())))) {
                    this.timestep = _other.timestep;
                }
                final PropertyTree apiratePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("apirate"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(apiratePropertyTree!= null):((apiratePropertyTree == null)||(!apiratePropertyTree.isLeaf())))) {
                    this.apirate = _other.apirate;
                }
                final PropertyTree impratioPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("impratio"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(impratioPropertyTree!= null):((impratioPropertyTree == null)||(!impratioPropertyTree.isLeaf())))) {
                    this.impratio = _other.impratio;
                }
                final PropertyTree gravityPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("gravity"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(gravityPropertyTree!= null):((gravityPropertyTree == null)||(!gravityPropertyTree.isLeaf())))) {
                    this.gravity = _other.gravity;
                }
                final PropertyTree windPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("wind"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(windPropertyTree!= null):((windPropertyTree == null)||(!windPropertyTree.isLeaf())))) {
                    this.wind = _other.wind;
                }
                final PropertyTree magneticPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("magnetic"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(magneticPropertyTree!= null):((magneticPropertyTree == null)||(!magneticPropertyTree.isLeaf())))) {
                    this.magnetic = _other.magnetic;
                }
                final PropertyTree densityPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("density"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(densityPropertyTree!= null):((densityPropertyTree == null)||(!densityPropertyTree.isLeaf())))) {
                    this.density = _other.density;
                }
                final PropertyTree viscosityPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("viscosity"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(viscosityPropertyTree!= null):((viscosityPropertyTree == null)||(!viscosityPropertyTree.isLeaf())))) {
                    this.viscosity = _other.viscosity;
                }
                final PropertyTree oMarginPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("oMargin"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(oMarginPropertyTree!= null):((oMarginPropertyTree == null)||(!oMarginPropertyTree.isLeaf())))) {
                    this.oMargin = _other.oMargin;
                }
                final PropertyTree oSolimpPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("oSolimp"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(oSolimpPropertyTree!= null):((oSolimpPropertyTree == null)||(!oSolimpPropertyTree.isLeaf())))) {
                    this.oSolimp = _other.oSolimp;
                }
                final PropertyTree oSolrefPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("oSolref"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(oSolrefPropertyTree!= null):((oSolrefPropertyTree == null)||(!oSolrefPropertyTree.isLeaf())))) {
                    this.oSolref = _other.oSolref;
                }
                final PropertyTree integratorPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("integrator"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(integratorPropertyTree!= null):((integratorPropertyTree == null)||(!integratorPropertyTree.isLeaf())))) {
                    this.integrator = _other.integrator;
                }
                final PropertyTree collisionPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("collision"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(collisionPropertyTree!= null):((collisionPropertyTree == null)||(!collisionPropertyTree.isLeaf())))) {
                    this.collision = _other.collision;
                }
                final PropertyTree conePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("cone"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(conePropertyTree!= null):((conePropertyTree == null)||(!conePropertyTree.isLeaf())))) {
                    this.cone = _other.cone;
                }
                final PropertyTree jacobianPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("jacobian"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(jacobianPropertyTree!= null):((jacobianPropertyTree == null)||(!jacobianPropertyTree.isLeaf())))) {
                    this.jacobian = _other.jacobian;
                }
                final PropertyTree solverPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("solver"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(solverPropertyTree!= null):((solverPropertyTree == null)||(!solverPropertyTree.isLeaf())))) {
                    this.solver = _other.solver;
                }
                final PropertyTree iterationsPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("iterations"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(iterationsPropertyTree!= null):((iterationsPropertyTree == null)||(!iterationsPropertyTree.isLeaf())))) {
                    this.iterations = _other.iterations;
                }
                final PropertyTree tolerancePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("tolerance"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(tolerancePropertyTree!= null):((tolerancePropertyTree == null)||(!tolerancePropertyTree.isLeaf())))) {
                    this.tolerance = _other.tolerance;
                }
                final PropertyTree noslipIterationsPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("noslipIterations"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(noslipIterationsPropertyTree!= null):((noslipIterationsPropertyTree == null)||(!noslipIterationsPropertyTree.isLeaf())))) {
                    this.noslipIterations = _other.noslipIterations;
                }
                final PropertyTree noslipTolerancePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("noslipTolerance"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(noslipTolerancePropertyTree!= null):((noslipTolerancePropertyTree == null)||(!noslipTolerancePropertyTree.isLeaf())))) {
                    this.noslipTolerance = _other.noslipTolerance;
                }
                final PropertyTree mprIterationsPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("mprIterations"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(mprIterationsPropertyTree!= null):((mprIterationsPropertyTree == null)||(!mprIterationsPropertyTree.isLeaf())))) {
                    this.mprIterations = _other.mprIterations;
                }
                final PropertyTree mprTolerancePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("mprTolerance"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(mprTolerancePropertyTree!= null):((mprTolerancePropertyTree == null)||(!mprTolerancePropertyTree.isLeaf())))) {
                    this.mprTolerance = _other.mprTolerance;
                }
            }
        }

        public _B end() {
            return this._parentBuilder;
        }

        protected<_P extends OptionType >_P init(final _P _product) {
            _product.timestep = this.timestep;
            _product.apirate = this.apirate;
            _product.impratio = this.impratio;
            _product.gravity = this.gravity;
            _product.wind = this.wind;
            _product.magnetic = this.magnetic;
            _product.density = this.density;
            _product.viscosity = this.viscosity;
            _product.oMargin = this.oMargin;
            _product.oSolimp = this.oSolimp;
            _product.oSolref = this.oSolref;
            _product.integrator = this.integrator;
            _product.collision = this.collision;
            _product.cone = this.cone;
            _product.jacobian = this.jacobian;
            _product.solver = this.solver;
            _product.iterations = this.iterations;
            _product.tolerance = this.tolerance;
            _product.noslipIterations = this.noslipIterations;
            _product.noslipTolerance = this.noslipTolerance;
            _product.mprIterations = this.mprIterations;
            _product.mprTolerance = this.mprTolerance;
            return _product;
        }

        /**
         * Sets the new value of "timestep" (any previous value will be replaced)
         * 
         * @param timestep
         *     New value of the "timestep" property.
         */
        public OptionType.Builder<_B> withTimestep(final BigDecimal timestep) {
            this.timestep = timestep;
            return this;
        }

        /**
         * Sets the new value of "apirate" (any previous value will be replaced)
         * 
         * @param apirate
         *     New value of the "apirate" property.
         */
        public OptionType.Builder<_B> withApirate(final BigDecimal apirate) {
            this.apirate = apirate;
            return this;
        }

        /**
         * Sets the new value of "impratio" (any previous value will be replaced)
         * 
         * @param impratio
         *     New value of the "impratio" property.
         */
        public OptionType.Builder<_B> withImpratio(final BigDecimal impratio) {
            this.impratio = impratio;
            return this;
        }

        /**
         * Sets the new value of "gravity" (any previous value will be replaced)
         * 
         * @param gravity
         *     New value of the "gravity" property.
         */
        public OptionType.Builder<_B> withGravity(final String gravity) {
            this.gravity = gravity;
            return this;
        }

        /**
         * Sets the new value of "wind" (any previous value will be replaced)
         * 
         * @param wind
         *     New value of the "wind" property.
         */
        public OptionType.Builder<_B> withWind(final String wind) {
            this.wind = wind;
            return this;
        }

        /**
         * Sets the new value of "magnetic" (any previous value will be replaced)
         * 
         * @param magnetic
         *     New value of the "magnetic" property.
         */
        public OptionType.Builder<_B> withMagnetic(final String magnetic) {
            this.magnetic = magnetic;
            return this;
        }

        /**
         * Sets the new value of "density" (any previous value will be replaced)
         * 
         * @param density
         *     New value of the "density" property.
         */
        public OptionType.Builder<_B> withDensity(final BigDecimal density) {
            this.density = density;
            return this;
        }

        /**
         * Sets the new value of "viscosity" (any previous value will be replaced)
         * 
         * @param viscosity
         *     New value of the "viscosity" property.
         */
        public OptionType.Builder<_B> withViscosity(final BigDecimal viscosity) {
            this.viscosity = viscosity;
            return this;
        }

        /**
         * Sets the new value of "oMargin" (any previous value will be replaced)
         * 
         * @param oMargin
         *     New value of the "oMargin" property.
         */
        public OptionType.Builder<_B> withOMargin(final BigDecimal oMargin) {
            this.oMargin = oMargin;
            return this;
        }

        /**
         * Sets the new value of "oSolimp" (any previous value will be replaced)
         * 
         * @param oSolimp
         *     New value of the "oSolimp" property.
         */
        public OptionType.Builder<_B> withOSolimp(final String oSolimp) {
            this.oSolimp = oSolimp;
            return this;
        }

        /**
         * Sets the new value of "oSolref" (any previous value will be replaced)
         * 
         * @param oSolref
         *     New value of the "oSolref" property.
         */
        public OptionType.Builder<_B> withOSolref(final String oSolref) {
            this.oSolref = oSolref;
            return this;
        }

        /**
         * Sets the new value of "integrator" (any previous value will be replaced)
         * 
         * @param integrator
         *     New value of the "integrator" property.
         */
        public OptionType.Builder<_B> withIntegrator(final IntegratorType integrator) {
            this.integrator = integrator;
            return this;
        }

        /**
         * Sets the new value of "collision" (any previous value will be replaced)
         * 
         * @param collision
         *     New value of the "collision" property.
         */
        public OptionType.Builder<_B> withCollision(final CollisionType collision) {
            this.collision = collision;
            return this;
        }

        /**
         * Sets the new value of "cone" (any previous value will be replaced)
         * 
         * @param cone
         *     New value of the "cone" property.
         */
        public OptionType.Builder<_B> withCone(final ConeType cone) {
            this.cone = cone;
            return this;
        }

        /**
         * Sets the new value of "jacobian" (any previous value will be replaced)
         * 
         * @param jacobian
         *     New value of the "jacobian" property.
         */
        public OptionType.Builder<_B> withJacobian(final JacobianType jacobian) {
            this.jacobian = jacobian;
            return this;
        }

        /**
         * Sets the new value of "solver" (any previous value will be replaced)
         * 
         * @param solver
         *     New value of the "solver" property.
         */
        public OptionType.Builder<_B> withSolver(final SolverType solver) {
            this.solver = solver;
            return this;
        }

        /**
         * Sets the new value of "iterations" (any previous value will be replaced)
         * 
         * @param iterations
         *     New value of the "iterations" property.
         */
        public OptionType.Builder<_B> withIterations(final Integer iterations) {
            this.iterations = iterations;
            return this;
        }

        /**
         * Sets the new value of "tolerance" (any previous value will be replaced)
         * 
         * @param tolerance
         *     New value of the "tolerance" property.
         */
        public OptionType.Builder<_B> withTolerance(final Double tolerance) {
            this.tolerance = tolerance;
            return this;
        }

        /**
         * Sets the new value of "noslipIterations" (any previous value will be replaced)
         * 
         * @param noslipIterations
         *     New value of the "noslipIterations" property.
         */
        public OptionType.Builder<_B> withNoslipIterations(final Integer noslipIterations) {
            this.noslipIterations = noslipIterations;
            return this;
        }

        /**
         * Sets the new value of "noslipTolerance" (any previous value will be replaced)
         * 
         * @param noslipTolerance
         *     New value of the "noslipTolerance" property.
         */
        public OptionType.Builder<_B> withNoslipTolerance(final Double noslipTolerance) {
            this.noslipTolerance = noslipTolerance;
            return this;
        }

        /**
         * Sets the new value of "mprIterations" (any previous value will be replaced)
         * 
         * @param mprIterations
         *     New value of the "mprIterations" property.
         */
        public OptionType.Builder<_B> withMprIterations(final Integer mprIterations) {
            this.mprIterations = mprIterations;
            return this;
        }

        /**
         * Sets the new value of "mprTolerance" (any previous value will be replaced)
         * 
         * @param mprTolerance
         *     New value of the "mprTolerance" property.
         */
        public OptionType.Builder<_B> withMprTolerance(final Double mprTolerance) {
            this.mprTolerance = mprTolerance;
            return this;
        }

        @Override
        public OptionType build() {
            return this.init(new OptionType());
        }

        public OptionType.Builder<_B> copyOf(final OptionType _other) {
            _other.copyTo(this);
            return this;
        }

        public OptionType.Builder<_B> copyOf(final OptionType.Builder _other) {
            return copyOf(_other.build());
        }

    }

    public static class PropInfo {

        public final static transient String TIMESTEP = "timestep";
        public final static transient String APIRATE = "apirate";
        public final static transient String IMPRATIO = "impratio";
        public final static transient String GRAVITY = "gravity";
        public final static transient String WIND = "wind";
        public final static transient String MAGNETIC = "magnetic";
        public final static transient String DENSITY = "density";
        public final static transient String VISCOSITY = "viscosity";
        public final static transient String O_MARGIN = "oMargin";
        public final static transient String O_SOLIMP = "oSolimp";
        public final static transient String O_SOLREF = "oSolref";
        public final static transient String INTEGRATOR = "integrator";
        public final static transient String COLLISION = "collision";
        public final static transient String CONE = "cone";
        public final static transient String JACOBIAN = "jacobian";
        public final static transient String SOLVER = "solver";
        public final static transient String ITERATIONS = "iterations";
        public final static transient String TOLERANCE = "tolerance";
        public final static transient String NOSLIP_ITERATIONS = "noslipIterations";
        public final static transient String NOSLIP_TOLERANCE = "noslipTolerance";
        public final static transient String MPR_ITERATIONS = "mprIterations";
        public final static transient String MPR_TOLERANCE = "mprTolerance";

    }

    public static class Select
        extends OptionType.Selector<OptionType.Select, Void>
    {


        Select() {
            super(null, null, null);
        }

        public static OptionType.Select _root() {
            return new OptionType.Select();
        }

    }

    public static class Selector<TRoot extends com.kscs.util.jaxb.Selector<TRoot, ?> , TParent >
        extends com.kscs.util.jaxb.Selector<TRoot, TParent>
    {

        private com.kscs.util.jaxb.Selector<TRoot, OptionType.Selector<TRoot, TParent>> timestep = null;
        private com.kscs.util.jaxb.Selector<TRoot, OptionType.Selector<TRoot, TParent>> apirate = null;
        private com.kscs.util.jaxb.Selector<TRoot, OptionType.Selector<TRoot, TParent>> impratio = null;
        private com.kscs.util.jaxb.Selector<TRoot, OptionType.Selector<TRoot, TParent>> gravity = null;
        private com.kscs.util.jaxb.Selector<TRoot, OptionType.Selector<TRoot, TParent>> wind = null;
        private com.kscs.util.jaxb.Selector<TRoot, OptionType.Selector<TRoot, TParent>> magnetic = null;
        private com.kscs.util.jaxb.Selector<TRoot, OptionType.Selector<TRoot, TParent>> density = null;
        private com.kscs.util.jaxb.Selector<TRoot, OptionType.Selector<TRoot, TParent>> viscosity = null;
        private com.kscs.util.jaxb.Selector<TRoot, OptionType.Selector<TRoot, TParent>> oMargin = null;
        private com.kscs.util.jaxb.Selector<TRoot, OptionType.Selector<TRoot, TParent>> oSolimp = null;
        private com.kscs.util.jaxb.Selector<TRoot, OptionType.Selector<TRoot, TParent>> oSolref = null;
        private com.kscs.util.jaxb.Selector<TRoot, OptionType.Selector<TRoot, TParent>> integrator = null;
        private com.kscs.util.jaxb.Selector<TRoot, OptionType.Selector<TRoot, TParent>> collision = null;
        private com.kscs.util.jaxb.Selector<TRoot, OptionType.Selector<TRoot, TParent>> cone = null;
        private com.kscs.util.jaxb.Selector<TRoot, OptionType.Selector<TRoot, TParent>> jacobian = null;
        private com.kscs.util.jaxb.Selector<TRoot, OptionType.Selector<TRoot, TParent>> solver = null;
        private com.kscs.util.jaxb.Selector<TRoot, OptionType.Selector<TRoot, TParent>> iterations = null;
        private com.kscs.util.jaxb.Selector<TRoot, OptionType.Selector<TRoot, TParent>> tolerance = null;
        private com.kscs.util.jaxb.Selector<TRoot, OptionType.Selector<TRoot, TParent>> noslipIterations = null;
        private com.kscs.util.jaxb.Selector<TRoot, OptionType.Selector<TRoot, TParent>> noslipTolerance = null;
        private com.kscs.util.jaxb.Selector<TRoot, OptionType.Selector<TRoot, TParent>> mprIterations = null;
        private com.kscs.util.jaxb.Selector<TRoot, OptionType.Selector<TRoot, TParent>> mprTolerance = null;

        public Selector(final TRoot root, final TParent parent, final String propertyName) {
            super(root, parent, propertyName);
        }

        @Override
        public Map<String, PropertyTree> buildChildren() {
            final Map<String, PropertyTree> products = new HashMap<String, PropertyTree>();
            products.putAll(super.buildChildren());
            if (this.timestep!= null) {
                products.put("timestep", this.timestep.init());
            }
            if (this.apirate!= null) {
                products.put("apirate", this.apirate.init());
            }
            if (this.impratio!= null) {
                products.put("impratio", this.impratio.init());
            }
            if (this.gravity!= null) {
                products.put("gravity", this.gravity.init());
            }
            if (this.wind!= null) {
                products.put("wind", this.wind.init());
            }
            if (this.magnetic!= null) {
                products.put("magnetic", this.magnetic.init());
            }
            if (this.density!= null) {
                products.put("density", this.density.init());
            }
            if (this.viscosity!= null) {
                products.put("viscosity", this.viscosity.init());
            }
            if (this.oMargin!= null) {
                products.put("oMargin", this.oMargin.init());
            }
            if (this.oSolimp!= null) {
                products.put("oSolimp", this.oSolimp.init());
            }
            if (this.oSolref!= null) {
                products.put("oSolref", this.oSolref.init());
            }
            if (this.integrator!= null) {
                products.put("integrator", this.integrator.init());
            }
            if (this.collision!= null) {
                products.put("collision", this.collision.init());
            }
            if (this.cone!= null) {
                products.put("cone", this.cone.init());
            }
            if (this.jacobian!= null) {
                products.put("jacobian", this.jacobian.init());
            }
            if (this.solver!= null) {
                products.put("solver", this.solver.init());
            }
            if (this.iterations!= null) {
                products.put("iterations", this.iterations.init());
            }
            if (this.tolerance!= null) {
                products.put("tolerance", this.tolerance.init());
            }
            if (this.noslipIterations!= null) {
                products.put("noslipIterations", this.noslipIterations.init());
            }
            if (this.noslipTolerance!= null) {
                products.put("noslipTolerance", this.noslipTolerance.init());
            }
            if (this.mprIterations!= null) {
                products.put("mprIterations", this.mprIterations.init());
            }
            if (this.mprTolerance!= null) {
                products.put("mprTolerance", this.mprTolerance.init());
            }
            return products;
        }

        public com.kscs.util.jaxb.Selector<TRoot, OptionType.Selector<TRoot, TParent>> timestep() {
            return ((this.timestep == null)?this.timestep = new com.kscs.util.jaxb.Selector<TRoot, OptionType.Selector<TRoot, TParent>>(this._root, this, "timestep"):this.timestep);
        }

        public com.kscs.util.jaxb.Selector<TRoot, OptionType.Selector<TRoot, TParent>> apirate() {
            return ((this.apirate == null)?this.apirate = new com.kscs.util.jaxb.Selector<TRoot, OptionType.Selector<TRoot, TParent>>(this._root, this, "apirate"):this.apirate);
        }

        public com.kscs.util.jaxb.Selector<TRoot, OptionType.Selector<TRoot, TParent>> impratio() {
            return ((this.impratio == null)?this.impratio = new com.kscs.util.jaxb.Selector<TRoot, OptionType.Selector<TRoot, TParent>>(this._root, this, "impratio"):this.impratio);
        }

        public com.kscs.util.jaxb.Selector<TRoot, OptionType.Selector<TRoot, TParent>> gravity() {
            return ((this.gravity == null)?this.gravity = new com.kscs.util.jaxb.Selector<TRoot, OptionType.Selector<TRoot, TParent>>(this._root, this, "gravity"):this.gravity);
        }

        public com.kscs.util.jaxb.Selector<TRoot, OptionType.Selector<TRoot, TParent>> wind() {
            return ((this.wind == null)?this.wind = new com.kscs.util.jaxb.Selector<TRoot, OptionType.Selector<TRoot, TParent>>(this._root, this, "wind"):this.wind);
        }

        public com.kscs.util.jaxb.Selector<TRoot, OptionType.Selector<TRoot, TParent>> magnetic() {
            return ((this.magnetic == null)?this.magnetic = new com.kscs.util.jaxb.Selector<TRoot, OptionType.Selector<TRoot, TParent>>(this._root, this, "magnetic"):this.magnetic);
        }

        public com.kscs.util.jaxb.Selector<TRoot, OptionType.Selector<TRoot, TParent>> density() {
            return ((this.density == null)?this.density = new com.kscs.util.jaxb.Selector<TRoot, OptionType.Selector<TRoot, TParent>>(this._root, this, "density"):this.density);
        }

        public com.kscs.util.jaxb.Selector<TRoot, OptionType.Selector<TRoot, TParent>> viscosity() {
            return ((this.viscosity == null)?this.viscosity = new com.kscs.util.jaxb.Selector<TRoot, OptionType.Selector<TRoot, TParent>>(this._root, this, "viscosity"):this.viscosity);
        }

        public com.kscs.util.jaxb.Selector<TRoot, OptionType.Selector<TRoot, TParent>> oMargin() {
            return ((this.oMargin == null)?this.oMargin = new com.kscs.util.jaxb.Selector<TRoot, OptionType.Selector<TRoot, TParent>>(this._root, this, "oMargin"):this.oMargin);
        }

        public com.kscs.util.jaxb.Selector<TRoot, OptionType.Selector<TRoot, TParent>> oSolimp() {
            return ((this.oSolimp == null)?this.oSolimp = new com.kscs.util.jaxb.Selector<TRoot, OptionType.Selector<TRoot, TParent>>(this._root, this, "oSolimp"):this.oSolimp);
        }

        public com.kscs.util.jaxb.Selector<TRoot, OptionType.Selector<TRoot, TParent>> oSolref() {
            return ((this.oSolref == null)?this.oSolref = new com.kscs.util.jaxb.Selector<TRoot, OptionType.Selector<TRoot, TParent>>(this._root, this, "oSolref"):this.oSolref);
        }

        public com.kscs.util.jaxb.Selector<TRoot, OptionType.Selector<TRoot, TParent>> integrator() {
            return ((this.integrator == null)?this.integrator = new com.kscs.util.jaxb.Selector<TRoot, OptionType.Selector<TRoot, TParent>>(this._root, this, "integrator"):this.integrator);
        }

        public com.kscs.util.jaxb.Selector<TRoot, OptionType.Selector<TRoot, TParent>> collision() {
            return ((this.collision == null)?this.collision = new com.kscs.util.jaxb.Selector<TRoot, OptionType.Selector<TRoot, TParent>>(this._root, this, "collision"):this.collision);
        }

        public com.kscs.util.jaxb.Selector<TRoot, OptionType.Selector<TRoot, TParent>> cone() {
            return ((this.cone == null)?this.cone = new com.kscs.util.jaxb.Selector<TRoot, OptionType.Selector<TRoot, TParent>>(this._root, this, "cone"):this.cone);
        }

        public com.kscs.util.jaxb.Selector<TRoot, OptionType.Selector<TRoot, TParent>> jacobian() {
            return ((this.jacobian == null)?this.jacobian = new com.kscs.util.jaxb.Selector<TRoot, OptionType.Selector<TRoot, TParent>>(this._root, this, "jacobian"):this.jacobian);
        }

        public com.kscs.util.jaxb.Selector<TRoot, OptionType.Selector<TRoot, TParent>> solver() {
            return ((this.solver == null)?this.solver = new com.kscs.util.jaxb.Selector<TRoot, OptionType.Selector<TRoot, TParent>>(this._root, this, "solver"):this.solver);
        }

        public com.kscs.util.jaxb.Selector<TRoot, OptionType.Selector<TRoot, TParent>> iterations() {
            return ((this.iterations == null)?this.iterations = new com.kscs.util.jaxb.Selector<TRoot, OptionType.Selector<TRoot, TParent>>(this._root, this, "iterations"):this.iterations);
        }

        public com.kscs.util.jaxb.Selector<TRoot, OptionType.Selector<TRoot, TParent>> tolerance() {
            return ((this.tolerance == null)?this.tolerance = new com.kscs.util.jaxb.Selector<TRoot, OptionType.Selector<TRoot, TParent>>(this._root, this, "tolerance"):this.tolerance);
        }

        public com.kscs.util.jaxb.Selector<TRoot, OptionType.Selector<TRoot, TParent>> noslipIterations() {
            return ((this.noslipIterations == null)?this.noslipIterations = new com.kscs.util.jaxb.Selector<TRoot, OptionType.Selector<TRoot, TParent>>(this._root, this, "noslipIterations"):this.noslipIterations);
        }

        public com.kscs.util.jaxb.Selector<TRoot, OptionType.Selector<TRoot, TParent>> noslipTolerance() {
            return ((this.noslipTolerance == null)?this.noslipTolerance = new com.kscs.util.jaxb.Selector<TRoot, OptionType.Selector<TRoot, TParent>>(this._root, this, "noslipTolerance"):this.noslipTolerance);
        }

        public com.kscs.util.jaxb.Selector<TRoot, OptionType.Selector<TRoot, TParent>> mprIterations() {
            return ((this.mprIterations == null)?this.mprIterations = new com.kscs.util.jaxb.Selector<TRoot, OptionType.Selector<TRoot, TParent>>(this._root, this, "mprIterations"):this.mprIterations);
        }

        public com.kscs.util.jaxb.Selector<TRoot, OptionType.Selector<TRoot, TParent>> mprTolerance() {
            return ((this.mprTolerance == null)?this.mprTolerance = new com.kscs.util.jaxb.Selector<TRoot, OptionType.Selector<TRoot, TParent>>(this._root, this, "mprTolerance"):this.mprTolerance);
        }

    }

}
