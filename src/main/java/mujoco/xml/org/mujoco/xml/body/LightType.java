//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.3.0 
// See <a href="https://javaee.github.io/jaxb-v2/">https://javaee.github.io/jaxb-v2/</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2024.03.13 at 04:24:41 PM EDT 
//


package org.mujoco.xml.body;

import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeSupport;
import java.beans.PropertyVetoException;
import java.beans.VetoableChangeListener;
import java.beans.VetoableChangeSupport;
import java.math.BigDecimal;
import java.util.HashMap;
import java.util.Map;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlType;
import com.kscs.util.jaxb.Buildable;
import com.kscs.util.jaxb.Copyable;
import com.kscs.util.jaxb.PartialCopyable;
import com.kscs.util.jaxb.PropertyTree;
import com.kscs.util.jaxb.PropertyTreeUse;
import com.kscs.util.jaxb.PropertyVisitor;
import org.mujoco.xml.attributetypes.CameramodeType;


/**
 * <p>Java class for lightType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="lightType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;attribute name="name" type="{http://www.w3.org/2001/XMLSchema}string" /&gt;
 *       &lt;attribute name="class" type="{http://www.w3.org/2001/XMLSchema}string" /&gt;
 *       &lt;attribute name="mode" type="{attributeTypes}cameramodeType" default="fixed" /&gt;
 *       &lt;attribute name="target" type="{http://www.w3.org/2001/XMLSchema}string" /&gt;
 *       &lt;attribute name="directional" type="{http://www.w3.org/2001/XMLSchema}boolean" default="false" /&gt;
 *       &lt;attribute name="castshadow" type="{http://www.w3.org/2001/XMLSchema}boolean" default="true" /&gt;
 *       &lt;attribute name="active" type="{http://www.w3.org/2001/XMLSchema}boolean" default="true" /&gt;
 *       &lt;attribute name="pos" type="{attributeTypes}threeRealsType" default="0 0 0" /&gt;
 *       &lt;attribute name="dir" type="{attributeTypes}threeRealsType" default="0 0 -1" /&gt;
 *       &lt;attribute name="attenuation" type="{attributeTypes}threeRealsType" default="1 0 0" /&gt;
 *       &lt;attribute name="cutoff" type="{http://www.w3.org/2001/XMLSchema}decimal" default="45" /&gt;
 *       &lt;attribute name="exponent" type="{http://www.w3.org/2001/XMLSchema}decimal" default="10" /&gt;
 *       &lt;attribute name="ambient" type="{attributeTypes}threeRealsType" default="0 0 0" /&gt;
 *       &lt;attribute name="diffuse" type="{attributeTypes}threeRealsType" default="0.7 0.7 0.7" /&gt;
 *       &lt;attribute name="specular" type="{attributeTypes}threeRealsType" default="0.3 0.3 0.3" /&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "lightType")
public class LightType implements Cloneable, Copyable, PartialCopyable
{

    @XmlAttribute(name = "name")
    protected String name;
    @XmlAttribute(name = "class")
    protected String clazz;
    @XmlAttribute(name = "mode")
    protected CameramodeType mode;
    @XmlAttribute(name = "target")
    protected String target;
    @XmlAttribute(name = "directional")
    protected Boolean directional;
    @XmlAttribute(name = "castshadow")
    protected Boolean castshadow;
    @XmlAttribute(name = "active")
    protected Boolean active;
    @XmlAttribute(name = "pos")
    protected String pos;
    @XmlAttribute(name = "dir")
    protected String dir;
    @XmlAttribute(name = "attenuation")
    protected String attenuation;
    @XmlAttribute(name = "cutoff")
    protected BigDecimal cutoff;
    @XmlAttribute(name = "exponent")
    protected BigDecimal exponent;
    @XmlAttribute(name = "ambient")
    protected String ambient;
    @XmlAttribute(name = "diffuse")
    protected String diffuse;
    @XmlAttribute(name = "specular")
    protected String specular;
    protected final transient VetoableChangeSupport vetoableChange__Support = new VetoableChangeSupport(this);
    protected final transient PropertyChangeSupport propertyChange__Support = new PropertyChangeSupport(this);

    /**
     * Generated by copy-constructor plugin, JAXB requires public no-arg constructor.
     * 
     */
    public LightType() {
        // Generated by copy-constructor plugin, JAXB requires public no-arg constructor.
    }

    /**
     * Instantiates a LightType copying the state of another LightType
     * 
     * @param _other
     *     The original LightType from which to copy state.
     */
    public LightType(final LightType _other) {
        this.name = _other.name;
        this.clazz = _other.clazz;
        this.mode = _other.mode;
        this.target = _other.target;
        this.directional = _other.directional;
        this.castshadow = _other.castshadow;
        this.active = _other.active;
        this.pos = _other.pos;
        this.dir = _other.dir;
        this.attenuation = _other.attenuation;
        this.cutoff = _other.cutoff;
        this.exponent = _other.exponent;
        this.ambient = _other.ambient;
        this.diffuse = _other.diffuse;
        this.specular = _other.specular;
    }

    /**
     * Instantiates a LightType copying the state of another LightType
     * 
     * @param _propertyTreeUse
     *     Meaning of the {@link PropertyPath}: Exclude or include members contained in property path.
     * @param _propertyTree
     *     A restricting {@link PropertyPath} that defines which nodes of the source object tree should actually be copied.
     * @param _other
     *     The original LightType from which to copy state.
     */
    public LightType(final LightType _other, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        final PropertyTree namePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("name"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(namePropertyTree!= null):((namePropertyTree == null)||(!namePropertyTree.isLeaf())))) {
            this.name = _other.name;
        }
        final PropertyTree clazzPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("clazz"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(clazzPropertyTree!= null):((clazzPropertyTree == null)||(!clazzPropertyTree.isLeaf())))) {
            this.clazz = _other.clazz;
        }
        final PropertyTree modePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("mode"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(modePropertyTree!= null):((modePropertyTree == null)||(!modePropertyTree.isLeaf())))) {
            this.mode = _other.mode;
        }
        final PropertyTree targetPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("target"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(targetPropertyTree!= null):((targetPropertyTree == null)||(!targetPropertyTree.isLeaf())))) {
            this.target = _other.target;
        }
        final PropertyTree directionalPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("directional"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(directionalPropertyTree!= null):((directionalPropertyTree == null)||(!directionalPropertyTree.isLeaf())))) {
            this.directional = _other.directional;
        }
        final PropertyTree castshadowPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("castshadow"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(castshadowPropertyTree!= null):((castshadowPropertyTree == null)||(!castshadowPropertyTree.isLeaf())))) {
            this.castshadow = _other.castshadow;
        }
        final PropertyTree activePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("active"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(activePropertyTree!= null):((activePropertyTree == null)||(!activePropertyTree.isLeaf())))) {
            this.active = _other.active;
        }
        final PropertyTree posPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("pos"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(posPropertyTree!= null):((posPropertyTree == null)||(!posPropertyTree.isLeaf())))) {
            this.pos = _other.pos;
        }
        final PropertyTree dirPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("dir"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(dirPropertyTree!= null):((dirPropertyTree == null)||(!dirPropertyTree.isLeaf())))) {
            this.dir = _other.dir;
        }
        final PropertyTree attenuationPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("attenuation"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(attenuationPropertyTree!= null):((attenuationPropertyTree == null)||(!attenuationPropertyTree.isLeaf())))) {
            this.attenuation = _other.attenuation;
        }
        final PropertyTree cutoffPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("cutoff"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(cutoffPropertyTree!= null):((cutoffPropertyTree == null)||(!cutoffPropertyTree.isLeaf())))) {
            this.cutoff = _other.cutoff;
        }
        final PropertyTree exponentPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("exponent"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(exponentPropertyTree!= null):((exponentPropertyTree == null)||(!exponentPropertyTree.isLeaf())))) {
            this.exponent = _other.exponent;
        }
        final PropertyTree ambientPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("ambient"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(ambientPropertyTree!= null):((ambientPropertyTree == null)||(!ambientPropertyTree.isLeaf())))) {
            this.ambient = _other.ambient;
        }
        final PropertyTree diffusePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("diffuse"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(diffusePropertyTree!= null):((diffusePropertyTree == null)||(!diffusePropertyTree.isLeaf())))) {
            this.diffuse = _other.diffuse;
        }
        final PropertyTree specularPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("specular"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(specularPropertyTree!= null):((specularPropertyTree == null)||(!specularPropertyTree.isLeaf())))) {
            this.specular = _other.specular;
        }
    }

    /**
     * Gets the value of the name property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getName() {
        return name;
    }

    /**
     * Gets the value of the clazz property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getClazz() {
        return clazz;
    }

    /**
     * Gets the value of the mode property.
     * 
     * @return
     *     possible object is
     *     {@link CameramodeType }
     *     
     */
    public CameramodeType getMode() {
        if (mode == null) {
            return CameramodeType.FIXED;
        } else {
            return mode;
        }
    }

    /**
     * Gets the value of the target property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getTarget() {
        return target;
    }

    /**
     * Gets the value of the directional property.
     * 
     * @return
     *     possible object is
     *     {@link Boolean }
     *     
     */
    public boolean isDirectional() {
        if (directional == null) {
            return false;
        } else {
            return directional;
        }
    }

    /**
     * Gets the value of the castshadow property.
     * 
     * @return
     *     possible object is
     *     {@link Boolean }
     *     
     */
    public boolean isCastshadow() {
        if (castshadow == null) {
            return true;
        } else {
            return castshadow;
        }
    }

    /**
     * Gets the value of the active property.
     * 
     * @return
     *     possible object is
     *     {@link Boolean }
     *     
     */
    public boolean isActive() {
        if (active == null) {
            return true;
        } else {
            return active;
        }
    }

    /**
     * Gets the value of the pos property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getPos() {
        if (pos == null) {
            return "0 0 0";
        } else {
            return pos;
        }
    }

    /**
     * Gets the value of the dir property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getDir() {
        if (dir == null) {
            return "0 0 -1";
        } else {
            return dir;
        }
    }

    /**
     * Gets the value of the attenuation property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getAttenuation() {
        if (attenuation == null) {
            return "1 0 0";
        } else {
            return attenuation;
        }
    }

    /**
     * Gets the value of the cutoff property.
     * 
     * @return
     *     possible object is
     *     {@link BigDecimal }
     *     
     */
    public BigDecimal getCutoff() {
        if (cutoff == null) {
            return new BigDecimal("45");
        } else {
            return cutoff;
        }
    }

    /**
     * Gets the value of the exponent property.
     * 
     * @return
     *     possible object is
     *     {@link BigDecimal }
     *     
     */
    public BigDecimal getExponent() {
        if (exponent == null) {
            return new BigDecimal("10");
        } else {
            return exponent;
        }
    }

    /**
     * Gets the value of the ambient property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getAmbient() {
        if (ambient == null) {
            return "0 0 0";
        } else {
            return ambient;
        }
    }

    /**
     * Gets the value of the diffuse property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getDiffuse() {
        if (diffuse == null) {
            return "0.7 0.7 0.7";
        } else {
            return diffuse;
        }
    }

    /**
     * Gets the value of the specular property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getSpecular() {
        if (specular == null) {
            return "0.3 0.3 0.3";
        } else {
            return specular;
        }
    }

    public void addVetoableChangeListener(final VetoableChangeListener vetoableChangeListener) {
        this.vetoableChange__Support.addVetoableChangeListener(vetoableChangeListener);
    }

    public void removeVetoableChangeListener(final VetoableChangeListener vetoableChangeListener) {
        this.vetoableChange__Support.removeVetoableChangeListener(vetoableChangeListener);
    }

    public LightType withVetoableChangeListener(final VetoableChangeListener vetoableChangeListener) {
        addVetoableChangeListener(vetoableChangeListener);
        return this;
    }

    public void addPropertyChangeListener(final PropertyChangeListener propertyChangeListener) {
        this.propertyChange__Support.addPropertyChangeListener(propertyChangeListener);
    }

    public void removePropertyChangeListener(final PropertyChangeListener propertyChangeListener) {
        this.propertyChange__Support.removePropertyChangeListener(propertyChangeListener);
    }

    public LightType withPropertyChangeListener(final PropertyChangeListener propertyChangeListener) {
        addPropertyChangeListener(propertyChangeListener);
        return this;
    }

    public void setName(final String value) {
        final String __oldValue = this.name;
        try {
            this.vetoableChange__Support.fireVetoableChange("name", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.name = value;
        this.propertyChange__Support.firePropertyChange("name", __oldValue, value);
    }

    public void setClazz(final String value) {
        final String __oldValue = this.clazz;
        try {
            this.vetoableChange__Support.fireVetoableChange("clazz", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.clazz = value;
        this.propertyChange__Support.firePropertyChange("clazz", __oldValue, value);
    }

    public void setMode(final CameramodeType value) {
        final CameramodeType __oldValue = this.mode;
        try {
            this.vetoableChange__Support.fireVetoableChange("mode", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.mode = value;
        this.propertyChange__Support.firePropertyChange("mode", __oldValue, value);
    }

    public void setTarget(final String value) {
        final String __oldValue = this.target;
        try {
            this.vetoableChange__Support.fireVetoableChange("target", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.target = value;
        this.propertyChange__Support.firePropertyChange("target", __oldValue, value);
    }

    public void setDirectional(final Boolean value) {
        final Boolean __oldValue = this.directional;
        try {
            this.vetoableChange__Support.fireVetoableChange("directional", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.directional = value;
        this.propertyChange__Support.firePropertyChange("directional", __oldValue, value);
    }

    public void setCastshadow(final Boolean value) {
        final Boolean __oldValue = this.castshadow;
        try {
            this.vetoableChange__Support.fireVetoableChange("castshadow", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.castshadow = value;
        this.propertyChange__Support.firePropertyChange("castshadow", __oldValue, value);
    }

    public void setActive(final Boolean value) {
        final Boolean __oldValue = this.active;
        try {
            this.vetoableChange__Support.fireVetoableChange("active", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.active = value;
        this.propertyChange__Support.firePropertyChange("active", __oldValue, value);
    }

    public void setPos(final String value) {
        final String __oldValue = this.pos;
        try {
            this.vetoableChange__Support.fireVetoableChange("pos", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.pos = value;
        this.propertyChange__Support.firePropertyChange("pos", __oldValue, value);
    }

    public void setDir(final String value) {
        final String __oldValue = this.dir;
        try {
            this.vetoableChange__Support.fireVetoableChange("dir", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.dir = value;
        this.propertyChange__Support.firePropertyChange("dir", __oldValue, value);
    }

    public void setAttenuation(final String value) {
        final String __oldValue = this.attenuation;
        try {
            this.vetoableChange__Support.fireVetoableChange("attenuation", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.attenuation = value;
        this.propertyChange__Support.firePropertyChange("attenuation", __oldValue, value);
    }

    public void setCutoff(final BigDecimal value) {
        final BigDecimal __oldValue = this.cutoff;
        try {
            this.vetoableChange__Support.fireVetoableChange("cutoff", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.cutoff = value;
        this.propertyChange__Support.firePropertyChange("cutoff", __oldValue, value);
    }

    public void setExponent(final BigDecimal value) {
        final BigDecimal __oldValue = this.exponent;
        try {
            this.vetoableChange__Support.fireVetoableChange("exponent", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.exponent = value;
        this.propertyChange__Support.firePropertyChange("exponent", __oldValue, value);
    }

    public void setAmbient(final String value) {
        final String __oldValue = this.ambient;
        try {
            this.vetoableChange__Support.fireVetoableChange("ambient", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.ambient = value;
        this.propertyChange__Support.firePropertyChange("ambient", __oldValue, value);
    }

    public void setDiffuse(final String value) {
        final String __oldValue = this.diffuse;
        try {
            this.vetoableChange__Support.fireVetoableChange("diffuse", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.diffuse = value;
        this.propertyChange__Support.firePropertyChange("diffuse", __oldValue, value);
    }

    public void setSpecular(final String value) {
        final String __oldValue = this.specular;
        try {
            this.vetoableChange__Support.fireVetoableChange("specular", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.specular = value;
        this.propertyChange__Support.firePropertyChange("specular", __oldValue, value);
    }

    @Override
    public LightType clone() {
        final LightType _newObject;
        try {
            _newObject = ((LightType) super.clone());
        } catch (CloneNotSupportedException e) {
            throw new RuntimeException(e);
        }
        return _newObject;
    }

    @Override
    public LightType createCopy() {
        final LightType _newObject;
        try {
            _newObject = ((LightType) super.clone());
        } catch (CloneNotSupportedException e) {
            throw new RuntimeException(e);
        }
        _newObject.name = this.name;
        _newObject.clazz = this.clazz;
        _newObject.mode = this.mode;
        _newObject.target = this.target;
        _newObject.directional = this.directional;
        _newObject.castshadow = this.castshadow;
        _newObject.active = this.active;
        _newObject.pos = this.pos;
        _newObject.dir = this.dir;
        _newObject.attenuation = this.attenuation;
        _newObject.cutoff = this.cutoff;
        _newObject.exponent = this.exponent;
        _newObject.ambient = this.ambient;
        _newObject.diffuse = this.diffuse;
        _newObject.specular = this.specular;
        return _newObject;
    }

    @Override
    public LightType createCopy(final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        final LightType _newObject;
        try {
            _newObject = ((LightType) super.clone());
        } catch (CloneNotSupportedException e) {
            throw new RuntimeException(e);
        }
        final PropertyTree namePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("name"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(namePropertyTree!= null):((namePropertyTree == null)||(!namePropertyTree.isLeaf())))) {
            _newObject.name = this.name;
        }
        final PropertyTree clazzPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("clazz"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(clazzPropertyTree!= null):((clazzPropertyTree == null)||(!clazzPropertyTree.isLeaf())))) {
            _newObject.clazz = this.clazz;
        }
        final PropertyTree modePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("mode"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(modePropertyTree!= null):((modePropertyTree == null)||(!modePropertyTree.isLeaf())))) {
            _newObject.mode = this.mode;
        }
        final PropertyTree targetPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("target"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(targetPropertyTree!= null):((targetPropertyTree == null)||(!targetPropertyTree.isLeaf())))) {
            _newObject.target = this.target;
        }
        final PropertyTree directionalPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("directional"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(directionalPropertyTree!= null):((directionalPropertyTree == null)||(!directionalPropertyTree.isLeaf())))) {
            _newObject.directional = this.directional;
        }
        final PropertyTree castshadowPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("castshadow"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(castshadowPropertyTree!= null):((castshadowPropertyTree == null)||(!castshadowPropertyTree.isLeaf())))) {
            _newObject.castshadow = this.castshadow;
        }
        final PropertyTree activePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("active"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(activePropertyTree!= null):((activePropertyTree == null)||(!activePropertyTree.isLeaf())))) {
            _newObject.active = this.active;
        }
        final PropertyTree posPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("pos"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(posPropertyTree!= null):((posPropertyTree == null)||(!posPropertyTree.isLeaf())))) {
            _newObject.pos = this.pos;
        }
        final PropertyTree dirPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("dir"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(dirPropertyTree!= null):((dirPropertyTree == null)||(!dirPropertyTree.isLeaf())))) {
            _newObject.dir = this.dir;
        }
        final PropertyTree attenuationPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("attenuation"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(attenuationPropertyTree!= null):((attenuationPropertyTree == null)||(!attenuationPropertyTree.isLeaf())))) {
            _newObject.attenuation = this.attenuation;
        }
        final PropertyTree cutoffPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("cutoff"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(cutoffPropertyTree!= null):((cutoffPropertyTree == null)||(!cutoffPropertyTree.isLeaf())))) {
            _newObject.cutoff = this.cutoff;
        }
        final PropertyTree exponentPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("exponent"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(exponentPropertyTree!= null):((exponentPropertyTree == null)||(!exponentPropertyTree.isLeaf())))) {
            _newObject.exponent = this.exponent;
        }
        final PropertyTree ambientPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("ambient"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(ambientPropertyTree!= null):((ambientPropertyTree == null)||(!ambientPropertyTree.isLeaf())))) {
            _newObject.ambient = this.ambient;
        }
        final PropertyTree diffusePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("diffuse"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(diffusePropertyTree!= null):((diffusePropertyTree == null)||(!diffusePropertyTree.isLeaf())))) {
            _newObject.diffuse = this.diffuse;
        }
        final PropertyTree specularPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("specular"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(specularPropertyTree!= null):((specularPropertyTree == null)||(!specularPropertyTree.isLeaf())))) {
            _newObject.specular = this.specular;
        }
        return _newObject;
    }

    @Override
    public LightType copyExcept(final PropertyTree _propertyTree) {
        return createCopy(_propertyTree, PropertyTreeUse.EXCLUDE);
    }

    @Override
    public LightType copyOnly(final PropertyTree _propertyTree) {
        return createCopy(_propertyTree, PropertyTreeUse.INCLUDE);
    }

    /**
     * Copies all state of this object to a builder. This method is used by the {@link #copyOf} method and should not be called directly by client code.
     * 
     * @param _other
     *     A builder instance to which the state of this object will be copied.
     */
    public<_B >void copyTo(final LightType.Builder<_B> _other) {
        _other.name = this.name;
        _other.clazz = this.clazz;
        _other.mode = this.mode;
        _other.target = this.target;
        _other.directional = this.directional;
        _other.castshadow = this.castshadow;
        _other.active = this.active;
        _other.pos = this.pos;
        _other.dir = this.dir;
        _other.attenuation = this.attenuation;
        _other.cutoff = this.cutoff;
        _other.exponent = this.exponent;
        _other.ambient = this.ambient;
        _other.diffuse = this.diffuse;
        _other.specular = this.specular;
    }

    public<_B >LightType.Builder<_B> newCopyBuilder(final _B _parentBuilder) {
        return new LightType.Builder<_B>(_parentBuilder, this, true);
    }

    public LightType.Builder<Void> newCopyBuilder() {
        return newCopyBuilder(null);
    }

    public static LightType.Builder<Void> builder() {
        return new LightType.Builder<Void>(null, null, false);
    }

    public static<_B >LightType.Builder<_B> copyOf(final LightType _other) {
        final LightType.Builder<_B> _newBuilder = new LightType.Builder<_B>(null, null, false);
        _other.copyTo(_newBuilder);
        return _newBuilder;
    }

    /**
     * Copies all state of this object to a builder. This method is used by the {@link #copyOf} method and should not be called directly by client code.
     * 
     * @param _other
     *     A builder instance to which the state of this object will be copied.
     */
    public<_B >void copyTo(final LightType.Builder<_B> _other, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        final PropertyTree namePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("name"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(namePropertyTree!= null):((namePropertyTree == null)||(!namePropertyTree.isLeaf())))) {
            _other.name = this.name;
        }
        final PropertyTree clazzPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("clazz"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(clazzPropertyTree!= null):((clazzPropertyTree == null)||(!clazzPropertyTree.isLeaf())))) {
            _other.clazz = this.clazz;
        }
        final PropertyTree modePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("mode"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(modePropertyTree!= null):((modePropertyTree == null)||(!modePropertyTree.isLeaf())))) {
            _other.mode = this.mode;
        }
        final PropertyTree targetPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("target"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(targetPropertyTree!= null):((targetPropertyTree == null)||(!targetPropertyTree.isLeaf())))) {
            _other.target = this.target;
        }
        final PropertyTree directionalPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("directional"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(directionalPropertyTree!= null):((directionalPropertyTree == null)||(!directionalPropertyTree.isLeaf())))) {
            _other.directional = this.directional;
        }
        final PropertyTree castshadowPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("castshadow"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(castshadowPropertyTree!= null):((castshadowPropertyTree == null)||(!castshadowPropertyTree.isLeaf())))) {
            _other.castshadow = this.castshadow;
        }
        final PropertyTree activePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("active"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(activePropertyTree!= null):((activePropertyTree == null)||(!activePropertyTree.isLeaf())))) {
            _other.active = this.active;
        }
        final PropertyTree posPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("pos"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(posPropertyTree!= null):((posPropertyTree == null)||(!posPropertyTree.isLeaf())))) {
            _other.pos = this.pos;
        }
        final PropertyTree dirPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("dir"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(dirPropertyTree!= null):((dirPropertyTree == null)||(!dirPropertyTree.isLeaf())))) {
            _other.dir = this.dir;
        }
        final PropertyTree attenuationPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("attenuation"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(attenuationPropertyTree!= null):((attenuationPropertyTree == null)||(!attenuationPropertyTree.isLeaf())))) {
            _other.attenuation = this.attenuation;
        }
        final PropertyTree cutoffPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("cutoff"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(cutoffPropertyTree!= null):((cutoffPropertyTree == null)||(!cutoffPropertyTree.isLeaf())))) {
            _other.cutoff = this.cutoff;
        }
        final PropertyTree exponentPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("exponent"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(exponentPropertyTree!= null):((exponentPropertyTree == null)||(!exponentPropertyTree.isLeaf())))) {
            _other.exponent = this.exponent;
        }
        final PropertyTree ambientPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("ambient"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(ambientPropertyTree!= null):((ambientPropertyTree == null)||(!ambientPropertyTree.isLeaf())))) {
            _other.ambient = this.ambient;
        }
        final PropertyTree diffusePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("diffuse"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(diffusePropertyTree!= null):((diffusePropertyTree == null)||(!diffusePropertyTree.isLeaf())))) {
            _other.diffuse = this.diffuse;
        }
        final PropertyTree specularPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("specular"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(specularPropertyTree!= null):((specularPropertyTree == null)||(!specularPropertyTree.isLeaf())))) {
            _other.specular = this.specular;
        }
    }

    public<_B >LightType.Builder<_B> newCopyBuilder(final _B _parentBuilder, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        return new LightType.Builder<_B>(_parentBuilder, this, true, _propertyTree, _propertyTreeUse);
    }

    public LightType.Builder<Void> newCopyBuilder(final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        return newCopyBuilder(null, _propertyTree, _propertyTreeUse);
    }

    public static<_B >LightType.Builder<_B> copyOf(final LightType _other, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        final LightType.Builder<_B> _newBuilder = new LightType.Builder<_B>(null, null, false);
        _other.copyTo(_newBuilder, _propertyTree, _propertyTreeUse);
        return _newBuilder;
    }

    public static LightType.Builder<Void> copyExcept(final LightType _other, final PropertyTree _propertyTree) {
        return copyOf(_other, _propertyTree, PropertyTreeUse.EXCLUDE);
    }

    public static LightType.Builder<Void> copyOnly(final LightType _other, final PropertyTree _propertyTree) {
        return copyOf(_other, _propertyTree, PropertyTreeUse.INCLUDE);
    }

    public LightType visit(final PropertyVisitor _visitor_) {
        _visitor_.visit(this);
        return this;
    }

    public static class Builder<_B >implements Buildable
    {

        protected final _B _parentBuilder;
        private String name;
        private String clazz;
        private CameramodeType mode;
        private String target;
        private Boolean directional;
        private Boolean castshadow;
        private Boolean active;
        private String pos;
        private String dir;
        private String attenuation;
        private BigDecimal cutoff;
        private BigDecimal exponent;
        private String ambient;
        private String diffuse;
        private String specular;

        public Builder(final _B _parentBuilder, final LightType _other, final boolean _copy) {
            this._parentBuilder = _parentBuilder;
            if (_other!= null) {
                this.name = _other.name;
                this.clazz = _other.clazz;
                this.mode = _other.mode;
                this.target = _other.target;
                this.directional = _other.directional;
                this.castshadow = _other.castshadow;
                this.active = _other.active;
                this.pos = _other.pos;
                this.dir = _other.dir;
                this.attenuation = _other.attenuation;
                this.cutoff = _other.cutoff;
                this.exponent = _other.exponent;
                this.ambient = _other.ambient;
                this.diffuse = _other.diffuse;
                this.specular = _other.specular;
            }
        }

        public Builder(final _B _parentBuilder, final LightType _other, final boolean _copy, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
            this._parentBuilder = _parentBuilder;
            if (_other!= null) {
                final PropertyTree namePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("name"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(namePropertyTree!= null):((namePropertyTree == null)||(!namePropertyTree.isLeaf())))) {
                    this.name = _other.name;
                }
                final PropertyTree clazzPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("clazz"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(clazzPropertyTree!= null):((clazzPropertyTree == null)||(!clazzPropertyTree.isLeaf())))) {
                    this.clazz = _other.clazz;
                }
                final PropertyTree modePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("mode"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(modePropertyTree!= null):((modePropertyTree == null)||(!modePropertyTree.isLeaf())))) {
                    this.mode = _other.mode;
                }
                final PropertyTree targetPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("target"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(targetPropertyTree!= null):((targetPropertyTree == null)||(!targetPropertyTree.isLeaf())))) {
                    this.target = _other.target;
                }
                final PropertyTree directionalPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("directional"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(directionalPropertyTree!= null):((directionalPropertyTree == null)||(!directionalPropertyTree.isLeaf())))) {
                    this.directional = _other.directional;
                }
                final PropertyTree castshadowPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("castshadow"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(castshadowPropertyTree!= null):((castshadowPropertyTree == null)||(!castshadowPropertyTree.isLeaf())))) {
                    this.castshadow = _other.castshadow;
                }
                final PropertyTree activePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("active"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(activePropertyTree!= null):((activePropertyTree == null)||(!activePropertyTree.isLeaf())))) {
                    this.active = _other.active;
                }
                final PropertyTree posPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("pos"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(posPropertyTree!= null):((posPropertyTree == null)||(!posPropertyTree.isLeaf())))) {
                    this.pos = _other.pos;
                }
                final PropertyTree dirPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("dir"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(dirPropertyTree!= null):((dirPropertyTree == null)||(!dirPropertyTree.isLeaf())))) {
                    this.dir = _other.dir;
                }
                final PropertyTree attenuationPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("attenuation"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(attenuationPropertyTree!= null):((attenuationPropertyTree == null)||(!attenuationPropertyTree.isLeaf())))) {
                    this.attenuation = _other.attenuation;
                }
                final PropertyTree cutoffPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("cutoff"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(cutoffPropertyTree!= null):((cutoffPropertyTree == null)||(!cutoffPropertyTree.isLeaf())))) {
                    this.cutoff = _other.cutoff;
                }
                final PropertyTree exponentPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("exponent"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(exponentPropertyTree!= null):((exponentPropertyTree == null)||(!exponentPropertyTree.isLeaf())))) {
                    this.exponent = _other.exponent;
                }
                final PropertyTree ambientPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("ambient"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(ambientPropertyTree!= null):((ambientPropertyTree == null)||(!ambientPropertyTree.isLeaf())))) {
                    this.ambient = _other.ambient;
                }
                final PropertyTree diffusePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("diffuse"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(diffusePropertyTree!= null):((diffusePropertyTree == null)||(!diffusePropertyTree.isLeaf())))) {
                    this.diffuse = _other.diffuse;
                }
                final PropertyTree specularPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("specular"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(specularPropertyTree!= null):((specularPropertyTree == null)||(!specularPropertyTree.isLeaf())))) {
                    this.specular = _other.specular;
                }
            }
        }

        public _B end() {
            return this._parentBuilder;
        }

        protected<_P extends LightType >_P init(final _P _product) {
            _product.name = this.name;
            _product.clazz = this.clazz;
            _product.mode = this.mode;
            _product.target = this.target;
            _product.directional = this.directional;
            _product.castshadow = this.castshadow;
            _product.active = this.active;
            _product.pos = this.pos;
            _product.dir = this.dir;
            _product.attenuation = this.attenuation;
            _product.cutoff = this.cutoff;
            _product.exponent = this.exponent;
            _product.ambient = this.ambient;
            _product.diffuse = this.diffuse;
            _product.specular = this.specular;
            return _product;
        }

        /**
         * Sets the new value of "name" (any previous value will be replaced)
         * 
         * @param name
         *     New value of the "name" property.
         */
        public LightType.Builder<_B> withName(final String name) {
            this.name = name;
            return this;
        }

        /**
         * Sets the new value of "clazz" (any previous value will be replaced)
         * 
         * @param clazz
         *     New value of the "clazz" property.
         */
        public LightType.Builder<_B> withClazz(final String clazz) {
            this.clazz = clazz;
            return this;
        }

        /**
         * Sets the new value of "mode" (any previous value will be replaced)
         * 
         * @param mode
         *     New value of the "mode" property.
         */
        public LightType.Builder<_B> withMode(final CameramodeType mode) {
            this.mode = mode;
            return this;
        }

        /**
         * Sets the new value of "target" (any previous value will be replaced)
         * 
         * @param target
         *     New value of the "target" property.
         */
        public LightType.Builder<_B> withTarget(final String target) {
            this.target = target;
            return this;
        }

        /**
         * Sets the new value of "directional" (any previous value will be replaced)
         * 
         * @param directional
         *     New value of the "directional" property.
         */
        public LightType.Builder<_B> withDirectional(final Boolean directional) {
            this.directional = directional;
            return this;
        }

        /**
         * Sets the new value of "castshadow" (any previous value will be replaced)
         * 
         * @param castshadow
         *     New value of the "castshadow" property.
         */
        public LightType.Builder<_B> withCastshadow(final Boolean castshadow) {
            this.castshadow = castshadow;
            return this;
        }

        /**
         * Sets the new value of "active" (any previous value will be replaced)
         * 
         * @param active
         *     New value of the "active" property.
         */
        public LightType.Builder<_B> withActive(final Boolean active) {
            this.active = active;
            return this;
        }

        /**
         * Sets the new value of "pos" (any previous value will be replaced)
         * 
         * @param pos
         *     New value of the "pos" property.
         */
        public LightType.Builder<_B> withPos(final String pos) {
            this.pos = pos;
            return this;
        }

        /**
         * Sets the new value of "dir" (any previous value will be replaced)
         * 
         * @param dir
         *     New value of the "dir" property.
         */
        public LightType.Builder<_B> withDir(final String dir) {
            this.dir = dir;
            return this;
        }

        /**
         * Sets the new value of "attenuation" (any previous value will be replaced)
         * 
         * @param attenuation
         *     New value of the "attenuation" property.
         */
        public LightType.Builder<_B> withAttenuation(final String attenuation) {
            this.attenuation = attenuation;
            return this;
        }

        /**
         * Sets the new value of "cutoff" (any previous value will be replaced)
         * 
         * @param cutoff
         *     New value of the "cutoff" property.
         */
        public LightType.Builder<_B> withCutoff(final BigDecimal cutoff) {
            this.cutoff = cutoff;
            return this;
        }

        /**
         * Sets the new value of "exponent" (any previous value will be replaced)
         * 
         * @param exponent
         *     New value of the "exponent" property.
         */
        public LightType.Builder<_B> withExponent(final BigDecimal exponent) {
            this.exponent = exponent;
            return this;
        }

        /**
         * Sets the new value of "ambient" (any previous value will be replaced)
         * 
         * @param ambient
         *     New value of the "ambient" property.
         */
        public LightType.Builder<_B> withAmbient(final String ambient) {
            this.ambient = ambient;
            return this;
        }

        /**
         * Sets the new value of "diffuse" (any previous value will be replaced)
         * 
         * @param diffuse
         *     New value of the "diffuse" property.
         */
        public LightType.Builder<_B> withDiffuse(final String diffuse) {
            this.diffuse = diffuse;
            return this;
        }

        /**
         * Sets the new value of "specular" (any previous value will be replaced)
         * 
         * @param specular
         *     New value of the "specular" property.
         */
        public LightType.Builder<_B> withSpecular(final String specular) {
            this.specular = specular;
            return this;
        }

        @Override
        public LightType build() {
            return this.init(new LightType());
        }

        public LightType.Builder<_B> copyOf(final LightType _other) {
            _other.copyTo(this);
            return this;
        }

        public LightType.Builder<_B> copyOf(final LightType.Builder _other) {
            return copyOf(_other.build());
        }

    }

    public static class PropInfo {

        public final static transient String NAME = "name";
        public final static transient String CLAZZ = "clazz";
        public final static transient String MODE = "mode";
        public final static transient String TARGET = "target";
        public final static transient String DIRECTIONAL = "directional";
        public final static transient String CASTSHADOW = "castshadow";
        public final static transient String ACTIVE = "active";
        public final static transient String POS = "pos";
        public final static transient String DIR = "dir";
        public final static transient String ATTENUATION = "attenuation";
        public final static transient String CUTOFF = "cutoff";
        public final static transient String EXPONENT = "exponent";
        public final static transient String AMBIENT = "ambient";
        public final static transient String DIFFUSE = "diffuse";
        public final static transient String SPECULAR = "specular";

    }

    public static class Select
        extends LightType.Selector<LightType.Select, Void>
    {


        Select() {
            super(null, null, null);
        }

        public static LightType.Select _root() {
            return new LightType.Select();
        }

    }

    public static class Selector<TRoot extends com.kscs.util.jaxb.Selector<TRoot, ?> , TParent >
        extends com.kscs.util.jaxb.Selector<TRoot, TParent>
    {

        private com.kscs.util.jaxb.Selector<TRoot, LightType.Selector<TRoot, TParent>> name = null;
        private com.kscs.util.jaxb.Selector<TRoot, LightType.Selector<TRoot, TParent>> clazz = null;
        private com.kscs.util.jaxb.Selector<TRoot, LightType.Selector<TRoot, TParent>> mode = null;
        private com.kscs.util.jaxb.Selector<TRoot, LightType.Selector<TRoot, TParent>> target = null;
        private com.kscs.util.jaxb.Selector<TRoot, LightType.Selector<TRoot, TParent>> directional = null;
        private com.kscs.util.jaxb.Selector<TRoot, LightType.Selector<TRoot, TParent>> castshadow = null;
        private com.kscs.util.jaxb.Selector<TRoot, LightType.Selector<TRoot, TParent>> active = null;
        private com.kscs.util.jaxb.Selector<TRoot, LightType.Selector<TRoot, TParent>> pos = null;
        private com.kscs.util.jaxb.Selector<TRoot, LightType.Selector<TRoot, TParent>> dir = null;
        private com.kscs.util.jaxb.Selector<TRoot, LightType.Selector<TRoot, TParent>> attenuation = null;
        private com.kscs.util.jaxb.Selector<TRoot, LightType.Selector<TRoot, TParent>> cutoff = null;
        private com.kscs.util.jaxb.Selector<TRoot, LightType.Selector<TRoot, TParent>> exponent = null;
        private com.kscs.util.jaxb.Selector<TRoot, LightType.Selector<TRoot, TParent>> ambient = null;
        private com.kscs.util.jaxb.Selector<TRoot, LightType.Selector<TRoot, TParent>> diffuse = null;
        private com.kscs.util.jaxb.Selector<TRoot, LightType.Selector<TRoot, TParent>> specular = null;

        public Selector(final TRoot root, final TParent parent, final String propertyName) {
            super(root, parent, propertyName);
        }

        @Override
        public Map<String, PropertyTree> buildChildren() {
            final Map<String, PropertyTree> products = new HashMap<String, PropertyTree>();
            products.putAll(super.buildChildren());
            if (this.name!= null) {
                products.put("name", this.name.init());
            }
            if (this.clazz!= null) {
                products.put("clazz", this.clazz.init());
            }
            if (this.mode!= null) {
                products.put("mode", this.mode.init());
            }
            if (this.target!= null) {
                products.put("target", this.target.init());
            }
            if (this.directional!= null) {
                products.put("directional", this.directional.init());
            }
            if (this.castshadow!= null) {
                products.put("castshadow", this.castshadow.init());
            }
            if (this.active!= null) {
                products.put("active", this.active.init());
            }
            if (this.pos!= null) {
                products.put("pos", this.pos.init());
            }
            if (this.dir!= null) {
                products.put("dir", this.dir.init());
            }
            if (this.attenuation!= null) {
                products.put("attenuation", this.attenuation.init());
            }
            if (this.cutoff!= null) {
                products.put("cutoff", this.cutoff.init());
            }
            if (this.exponent!= null) {
                products.put("exponent", this.exponent.init());
            }
            if (this.ambient!= null) {
                products.put("ambient", this.ambient.init());
            }
            if (this.diffuse!= null) {
                products.put("diffuse", this.diffuse.init());
            }
            if (this.specular!= null) {
                products.put("specular", this.specular.init());
            }
            return products;
        }

        public com.kscs.util.jaxb.Selector<TRoot, LightType.Selector<TRoot, TParent>> name() {
            return ((this.name == null)?this.name = new com.kscs.util.jaxb.Selector<TRoot, LightType.Selector<TRoot, TParent>>(this._root, this, "name"):this.name);
        }

        public com.kscs.util.jaxb.Selector<TRoot, LightType.Selector<TRoot, TParent>> clazz() {
            return ((this.clazz == null)?this.clazz = new com.kscs.util.jaxb.Selector<TRoot, LightType.Selector<TRoot, TParent>>(this._root, this, "clazz"):this.clazz);
        }

        public com.kscs.util.jaxb.Selector<TRoot, LightType.Selector<TRoot, TParent>> mode() {
            return ((this.mode == null)?this.mode = new com.kscs.util.jaxb.Selector<TRoot, LightType.Selector<TRoot, TParent>>(this._root, this, "mode"):this.mode);
        }

        public com.kscs.util.jaxb.Selector<TRoot, LightType.Selector<TRoot, TParent>> target() {
            return ((this.target == null)?this.target = new com.kscs.util.jaxb.Selector<TRoot, LightType.Selector<TRoot, TParent>>(this._root, this, "target"):this.target);
        }

        public com.kscs.util.jaxb.Selector<TRoot, LightType.Selector<TRoot, TParent>> directional() {
            return ((this.directional == null)?this.directional = new com.kscs.util.jaxb.Selector<TRoot, LightType.Selector<TRoot, TParent>>(this._root, this, "directional"):this.directional);
        }

        public com.kscs.util.jaxb.Selector<TRoot, LightType.Selector<TRoot, TParent>> castshadow() {
            return ((this.castshadow == null)?this.castshadow = new com.kscs.util.jaxb.Selector<TRoot, LightType.Selector<TRoot, TParent>>(this._root, this, "castshadow"):this.castshadow);
        }

        public com.kscs.util.jaxb.Selector<TRoot, LightType.Selector<TRoot, TParent>> active() {
            return ((this.active == null)?this.active = new com.kscs.util.jaxb.Selector<TRoot, LightType.Selector<TRoot, TParent>>(this._root, this, "active"):this.active);
        }

        public com.kscs.util.jaxb.Selector<TRoot, LightType.Selector<TRoot, TParent>> pos() {
            return ((this.pos == null)?this.pos = new com.kscs.util.jaxb.Selector<TRoot, LightType.Selector<TRoot, TParent>>(this._root, this, "pos"):this.pos);
        }

        public com.kscs.util.jaxb.Selector<TRoot, LightType.Selector<TRoot, TParent>> dir() {
            return ((this.dir == null)?this.dir = new com.kscs.util.jaxb.Selector<TRoot, LightType.Selector<TRoot, TParent>>(this._root, this, "dir"):this.dir);
        }

        public com.kscs.util.jaxb.Selector<TRoot, LightType.Selector<TRoot, TParent>> attenuation() {
            return ((this.attenuation == null)?this.attenuation = new com.kscs.util.jaxb.Selector<TRoot, LightType.Selector<TRoot, TParent>>(this._root, this, "attenuation"):this.attenuation);
        }

        public com.kscs.util.jaxb.Selector<TRoot, LightType.Selector<TRoot, TParent>> cutoff() {
            return ((this.cutoff == null)?this.cutoff = new com.kscs.util.jaxb.Selector<TRoot, LightType.Selector<TRoot, TParent>>(this._root, this, "cutoff"):this.cutoff);
        }

        public com.kscs.util.jaxb.Selector<TRoot, LightType.Selector<TRoot, TParent>> exponent() {
            return ((this.exponent == null)?this.exponent = new com.kscs.util.jaxb.Selector<TRoot, LightType.Selector<TRoot, TParent>>(this._root, this, "exponent"):this.exponent);
        }

        public com.kscs.util.jaxb.Selector<TRoot, LightType.Selector<TRoot, TParent>> ambient() {
            return ((this.ambient == null)?this.ambient = new com.kscs.util.jaxb.Selector<TRoot, LightType.Selector<TRoot, TParent>>(this._root, this, "ambient"):this.ambient);
        }

        public com.kscs.util.jaxb.Selector<TRoot, LightType.Selector<TRoot, TParent>> diffuse() {
            return ((this.diffuse == null)?this.diffuse = new com.kscs.util.jaxb.Selector<TRoot, LightType.Selector<TRoot, TParent>>(this._root, this, "diffuse"):this.diffuse);
        }

        public com.kscs.util.jaxb.Selector<TRoot, LightType.Selector<TRoot, TParent>> specular() {
            return ((this.specular == null)?this.specular = new com.kscs.util.jaxb.Selector<TRoot, LightType.Selector<TRoot, TParent>>(this._root, this, "specular"):this.specular);
        }

    }

}
