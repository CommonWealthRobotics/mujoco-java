//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.3.0 
// See <a href="https://javaee.github.io/jaxb-v2/">https://javaee.github.io/jaxb-v2/</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2024.03.13 at 04:45:57 PM EDT 
//


package org.mujoco.xml.visual;

import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeSupport;
import java.beans.PropertyVetoException;
import java.beans.VetoableChangeListener;
import java.beans.VetoableChangeSupport;
import java.math.BigDecimal;
import java.util.HashMap;
import java.util.Map;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlType;
import com.kscs.util.jaxb.Buildable;
import com.kscs.util.jaxb.Copyable;
import com.kscs.util.jaxb.PartialCopyable;
import com.kscs.util.jaxb.PropertyTree;
import com.kscs.util.jaxb.PropertyTreeUse;
import com.kscs.util.jaxb.PropertyVisitor;


/**
 * <p>Java class for mapType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="mapType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;attribute name="stiffness" type="{http://www.w3.org/2001/XMLSchema}decimal" default="100" /&gt;
 *       &lt;attribute name="stiffnessrot" type="{http://www.w3.org/2001/XMLSchema}decimal" default="500" /&gt;
 *       &lt;attribute name="force" type="{http://www.w3.org/2001/XMLSchema}decimal" default="0.005" /&gt;
 *       &lt;attribute name="torque" type="{http://www.w3.org/2001/XMLSchema}decimal" default="0.1" /&gt;
 *       &lt;attribute name="alpha" type="{http://www.w3.org/2001/XMLSchema}decimal" default="0.3" /&gt;
 *       &lt;attribute name="fogstart" type="{http://www.w3.org/2001/XMLSchema}decimal" default="3" /&gt;
 *       &lt;attribute name="fogend" type="{http://www.w3.org/2001/XMLSchema}decimal" default="10" /&gt;
 *       &lt;attribute name="znear" type="{http://www.w3.org/2001/XMLSchema}decimal" default="0.01" /&gt;
 *       &lt;attribute name="zfar" type="{http://www.w3.org/2001/XMLSchema}decimal" default="50" /&gt;
 *       &lt;attribute name="haze" type="{http://www.w3.org/2001/XMLSchema}decimal" default="0.3" /&gt;
 *       &lt;attribute name="shadowclip" type="{http://www.w3.org/2001/XMLSchema}decimal" default="1" /&gt;
 *       &lt;attribute name="shadowscale" type="{http://www.w3.org/2001/XMLSchema}decimal" default="0.6" /&gt;
 *       &lt;attribute name="actuatortendon" type="{http://www.w3.org/2001/XMLSchema}decimal" default="2" /&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "mapType")
public class MapType implements Cloneable, Copyable, PartialCopyable
{

    @XmlAttribute(name = "stiffness")
    protected BigDecimal stiffness;
    @XmlAttribute(name = "stiffnessrot")
    protected BigDecimal stiffnessrot;
    @XmlAttribute(name = "force")
    protected BigDecimal force;
    @XmlAttribute(name = "torque")
    protected BigDecimal torque;
    @XmlAttribute(name = "alpha")
    protected BigDecimal alpha;
    @XmlAttribute(name = "fogstart")
    protected BigDecimal fogstart;
    @XmlAttribute(name = "fogend")
    protected BigDecimal fogend;
    @XmlAttribute(name = "znear")
    protected BigDecimal znear;
    @XmlAttribute(name = "zfar")
    protected BigDecimal zfar;
    @XmlAttribute(name = "haze")
    protected BigDecimal haze;
    @XmlAttribute(name = "shadowclip")
    protected BigDecimal shadowclip;
    @XmlAttribute(name = "shadowscale")
    protected BigDecimal shadowscale;
    @XmlAttribute(name = "actuatortendon")
    protected BigDecimal actuatortendon;
    protected final transient VetoableChangeSupport vetoableChange__Support = new VetoableChangeSupport(this);
    protected final transient PropertyChangeSupport propertyChange__Support = new PropertyChangeSupport(this);

    /**
     * Generated by copy-constructor plugin, JAXB requires public no-arg constructor.
     * 
     */
    public MapType() {
        // Generated by copy-constructor plugin, JAXB requires public no-arg constructor.
    }

    /**
     * Instantiates a MapType copying the state of another MapType
     * 
     * @param _other
     *     The original MapType from which to copy state.
     */
    public MapType(final MapType _other) {
        this.stiffness = _other.stiffness;
        this.stiffnessrot = _other.stiffnessrot;
        this.force = _other.force;
        this.torque = _other.torque;
        this.alpha = _other.alpha;
        this.fogstart = _other.fogstart;
        this.fogend = _other.fogend;
        this.znear = _other.znear;
        this.zfar = _other.zfar;
        this.haze = _other.haze;
        this.shadowclip = _other.shadowclip;
        this.shadowscale = _other.shadowscale;
        this.actuatortendon = _other.actuatortendon;
    }

    /**
     * Instantiates a MapType copying the state of another MapType
     * 
     * @param _propertyTreeUse
     *     Meaning of the : Exclude or include members contained in property path.
     * @param _propertyTree
     *     A restricting  that defines which nodes of the source object tree should actually be copied.
     * @param _other
     *     The original MapType from which to copy state.
     */
    public MapType(final MapType _other, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        final PropertyTree stiffnessPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("stiffness"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(stiffnessPropertyTree!= null):((stiffnessPropertyTree == null)||(!stiffnessPropertyTree.isLeaf())))) {
            this.stiffness = _other.stiffness;
        }
        final PropertyTree stiffnessrotPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("stiffnessrot"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(stiffnessrotPropertyTree!= null):((stiffnessrotPropertyTree == null)||(!stiffnessrotPropertyTree.isLeaf())))) {
            this.stiffnessrot = _other.stiffnessrot;
        }
        final PropertyTree forcePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("force"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(forcePropertyTree!= null):((forcePropertyTree == null)||(!forcePropertyTree.isLeaf())))) {
            this.force = _other.force;
        }
        final PropertyTree torquePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("torque"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(torquePropertyTree!= null):((torquePropertyTree == null)||(!torquePropertyTree.isLeaf())))) {
            this.torque = _other.torque;
        }
        final PropertyTree alphaPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("alpha"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(alphaPropertyTree!= null):((alphaPropertyTree == null)||(!alphaPropertyTree.isLeaf())))) {
            this.alpha = _other.alpha;
        }
        final PropertyTree fogstartPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("fogstart"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(fogstartPropertyTree!= null):((fogstartPropertyTree == null)||(!fogstartPropertyTree.isLeaf())))) {
            this.fogstart = _other.fogstart;
        }
        final PropertyTree fogendPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("fogend"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(fogendPropertyTree!= null):((fogendPropertyTree == null)||(!fogendPropertyTree.isLeaf())))) {
            this.fogend = _other.fogend;
        }
        final PropertyTree znearPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("znear"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(znearPropertyTree!= null):((znearPropertyTree == null)||(!znearPropertyTree.isLeaf())))) {
            this.znear = _other.znear;
        }
        final PropertyTree zfarPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("zfar"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(zfarPropertyTree!= null):((zfarPropertyTree == null)||(!zfarPropertyTree.isLeaf())))) {
            this.zfar = _other.zfar;
        }
        final PropertyTree hazePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("haze"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(hazePropertyTree!= null):((hazePropertyTree == null)||(!hazePropertyTree.isLeaf())))) {
            this.haze = _other.haze;
        }
        final PropertyTree shadowclipPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("shadowclip"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(shadowclipPropertyTree!= null):((shadowclipPropertyTree == null)||(!shadowclipPropertyTree.isLeaf())))) {
            this.shadowclip = _other.shadowclip;
        }
        final PropertyTree shadowscalePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("shadowscale"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(shadowscalePropertyTree!= null):((shadowscalePropertyTree == null)||(!shadowscalePropertyTree.isLeaf())))) {
            this.shadowscale = _other.shadowscale;
        }
        final PropertyTree actuatortendonPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("actuatortendon"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(actuatortendonPropertyTree!= null):((actuatortendonPropertyTree == null)||(!actuatortendonPropertyTree.isLeaf())))) {
            this.actuatortendon = _other.actuatortendon;
        }
    }

    /**
     * Gets the value of the stiffness property.
     * 
     * @return
     *     possible object is
     *     {@link BigDecimal }
     *     
     */
    public BigDecimal getStiffness() {
        if (stiffness == null) {
            return new BigDecimal("100");
        } else {
            return stiffness;
        }
    }

    /**
     * Gets the value of the stiffnessrot property.
     * 
     * @return
     *     possible object is
     *     {@link BigDecimal }
     *     
     */
    public BigDecimal getStiffnessrot() {
        if (stiffnessrot == null) {
            return new BigDecimal("500");
        } else {
            return stiffnessrot;
        }
    }

    /**
     * Gets the value of the force property.
     * 
     * @return
     *     possible object is
     *     {@link BigDecimal }
     *     
     */
    public BigDecimal getForce() {
        if (force == null) {
            return new BigDecimal("0.005");
        } else {
            return force;
        }
    }

    /**
     * Gets the value of the torque property.
     * 
     * @return
     *     possible object is
     *     {@link BigDecimal }
     *     
     */
    public BigDecimal getTorque() {
        if (torque == null) {
            return new BigDecimal("0.1");
        } else {
            return torque;
        }
    }

    /**
     * Gets the value of the alpha property.
     * 
     * @return
     *     possible object is
     *     {@link BigDecimal }
     *     
     */
    public BigDecimal getAlpha() {
        if (alpha == null) {
            return new BigDecimal("0.3");
        } else {
            return alpha;
        }
    }

    /**
     * Gets the value of the fogstart property.
     * 
     * @return
     *     possible object is
     *     {@link BigDecimal }
     *     
     */
    public BigDecimal getFogstart() {
        if (fogstart == null) {
            return new BigDecimal("3");
        } else {
            return fogstart;
        }
    }

    /**
     * Gets the value of the fogend property.
     * 
     * @return
     *     possible object is
     *     {@link BigDecimal }
     *     
     */
    public BigDecimal getFogend() {
        if (fogend == null) {
            return new BigDecimal("10");
        } else {
            return fogend;
        }
    }

    /**
     * Gets the value of the znear property.
     * 
     * @return
     *     possible object is
     *     {@link BigDecimal }
     *     
     */
    public BigDecimal getZnear() {
        if (znear == null) {
            return new BigDecimal("0.01");
        } else {
            return znear;
        }
    }

    /**
     * Gets the value of the zfar property.
     * 
     * @return
     *     possible object is
     *     {@link BigDecimal }
     *     
     */
    public BigDecimal getZfar() {
        if (zfar == null) {
            return new BigDecimal("50");
        } else {
            return zfar;
        }
    }

    /**
     * Gets the value of the haze property.
     * 
     * @return
     *     possible object is
     *     {@link BigDecimal }
     *     
     */
    public BigDecimal getHaze() {
        if (haze == null) {
            return new BigDecimal("0.3");
        } else {
            return haze;
        }
    }

    /**
     * Gets the value of the shadowclip property.
     * 
     * @return
     *     possible object is
     *     {@link BigDecimal }
     *     
     */
    public BigDecimal getShadowclip() {
        if (shadowclip == null) {
            return new BigDecimal("1");
        } else {
            return shadowclip;
        }
    }

    /**
     * Gets the value of the shadowscale property.
     * 
     * @return
     *     possible object is
     *     {@link BigDecimal }
     *     
     */
    public BigDecimal getShadowscale() {
        if (shadowscale == null) {
            return new BigDecimal("0.6");
        } else {
            return shadowscale;
        }
    }

    /**
     * Gets the value of the actuatortendon property.
     * 
     * @return
     *     possible object is
     *     {@link BigDecimal }
     *     
     */
    public BigDecimal getActuatortendon() {
        if (actuatortendon == null) {
            return new BigDecimal("2");
        } else {
            return actuatortendon;
        }
    }

    public void addVetoableChangeListener(final VetoableChangeListener vetoableChangeListener) {
        this.vetoableChange__Support.addVetoableChangeListener(vetoableChangeListener);
    }

    public void removeVetoableChangeListener(final VetoableChangeListener vetoableChangeListener) {
        this.vetoableChange__Support.removeVetoableChangeListener(vetoableChangeListener);
    }

    public MapType withVetoableChangeListener(final VetoableChangeListener vetoableChangeListener) {
        addVetoableChangeListener(vetoableChangeListener);
        return this;
    }

    public void addPropertyChangeListener(final PropertyChangeListener propertyChangeListener) {
        this.propertyChange__Support.addPropertyChangeListener(propertyChangeListener);
    }

    public void removePropertyChangeListener(final PropertyChangeListener propertyChangeListener) {
        this.propertyChange__Support.removePropertyChangeListener(propertyChangeListener);
    }

    public MapType withPropertyChangeListener(final PropertyChangeListener propertyChangeListener) {
        addPropertyChangeListener(propertyChangeListener);
        return this;
    }

    public void setStiffness(final BigDecimal value) {
        final BigDecimal __oldValue = this.stiffness;
        try {
            this.vetoableChange__Support.fireVetoableChange("stiffness", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.stiffness = value;
        this.propertyChange__Support.firePropertyChange("stiffness", __oldValue, value);
    }

    public void setStiffnessrot(final BigDecimal value) {
        final BigDecimal __oldValue = this.stiffnessrot;
        try {
            this.vetoableChange__Support.fireVetoableChange("stiffnessrot", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.stiffnessrot = value;
        this.propertyChange__Support.firePropertyChange("stiffnessrot", __oldValue, value);
    }

    public void setForce(final BigDecimal value) {
        final BigDecimal __oldValue = this.force;
        try {
            this.vetoableChange__Support.fireVetoableChange("force", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.force = value;
        this.propertyChange__Support.firePropertyChange("force", __oldValue, value);
    }

    public void setTorque(final BigDecimal value) {
        final BigDecimal __oldValue = this.torque;
        try {
            this.vetoableChange__Support.fireVetoableChange("torque", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.torque = value;
        this.propertyChange__Support.firePropertyChange("torque", __oldValue, value);
    }

    public void setAlpha(final BigDecimal value) {
        final BigDecimal __oldValue = this.alpha;
        try {
            this.vetoableChange__Support.fireVetoableChange("alpha", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.alpha = value;
        this.propertyChange__Support.firePropertyChange("alpha", __oldValue, value);
    }

    public void setFogstart(final BigDecimal value) {
        final BigDecimal __oldValue = this.fogstart;
        try {
            this.vetoableChange__Support.fireVetoableChange("fogstart", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.fogstart = value;
        this.propertyChange__Support.firePropertyChange("fogstart", __oldValue, value);
    }

    public void setFogend(final BigDecimal value) {
        final BigDecimal __oldValue = this.fogend;
        try {
            this.vetoableChange__Support.fireVetoableChange("fogend", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.fogend = value;
        this.propertyChange__Support.firePropertyChange("fogend", __oldValue, value);
    }

    public void setZnear(final BigDecimal value) {
        final BigDecimal __oldValue = this.znear;
        try {
            this.vetoableChange__Support.fireVetoableChange("znear", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.znear = value;
        this.propertyChange__Support.firePropertyChange("znear", __oldValue, value);
    }

    public void setZfar(final BigDecimal value) {
        final BigDecimal __oldValue = this.zfar;
        try {
            this.vetoableChange__Support.fireVetoableChange("zfar", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.zfar = value;
        this.propertyChange__Support.firePropertyChange("zfar", __oldValue, value);
    }

    public void setHaze(final BigDecimal value) {
        final BigDecimal __oldValue = this.haze;
        try {
            this.vetoableChange__Support.fireVetoableChange("haze", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.haze = value;
        this.propertyChange__Support.firePropertyChange("haze", __oldValue, value);
    }

    public void setShadowclip(final BigDecimal value) {
        final BigDecimal __oldValue = this.shadowclip;
        try {
            this.vetoableChange__Support.fireVetoableChange("shadowclip", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.shadowclip = value;
        this.propertyChange__Support.firePropertyChange("shadowclip", __oldValue, value);
    }

    public void setShadowscale(final BigDecimal value) {
        final BigDecimal __oldValue = this.shadowscale;
        try {
            this.vetoableChange__Support.fireVetoableChange("shadowscale", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.shadowscale = value;
        this.propertyChange__Support.firePropertyChange("shadowscale", __oldValue, value);
    }

    public void setActuatortendon(final BigDecimal value) {
        final BigDecimal __oldValue = this.actuatortendon;
        try {
            this.vetoableChange__Support.fireVetoableChange("actuatortendon", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.actuatortendon = value;
        this.propertyChange__Support.firePropertyChange("actuatortendon", __oldValue, value);
    }

    @Override
    public MapType clone() {
        final MapType _newObject;
        try {
            _newObject = ((MapType) super.clone());
        } catch (CloneNotSupportedException e) {
            throw new RuntimeException(e);
        }
        return _newObject;
    }

    @Override
    public MapType createCopy() {
        final MapType _newObject;
        try {
            _newObject = ((MapType) super.clone());
        } catch (CloneNotSupportedException e) {
            throw new RuntimeException(e);
        }
        _newObject.stiffness = this.stiffness;
        _newObject.stiffnessrot = this.stiffnessrot;
        _newObject.force = this.force;
        _newObject.torque = this.torque;
        _newObject.alpha = this.alpha;
        _newObject.fogstart = this.fogstart;
        _newObject.fogend = this.fogend;
        _newObject.znear = this.znear;
        _newObject.zfar = this.zfar;
        _newObject.haze = this.haze;
        _newObject.shadowclip = this.shadowclip;
        _newObject.shadowscale = this.shadowscale;
        _newObject.actuatortendon = this.actuatortendon;
        return _newObject;
    }

    @Override
    public MapType createCopy(final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        final MapType _newObject;
        try {
            _newObject = ((MapType) super.clone());
        } catch (CloneNotSupportedException e) {
            throw new RuntimeException(e);
        }
        final PropertyTree stiffnessPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("stiffness"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(stiffnessPropertyTree!= null):((stiffnessPropertyTree == null)||(!stiffnessPropertyTree.isLeaf())))) {
            _newObject.stiffness = this.stiffness;
        }
        final PropertyTree stiffnessrotPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("stiffnessrot"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(stiffnessrotPropertyTree!= null):((stiffnessrotPropertyTree == null)||(!stiffnessrotPropertyTree.isLeaf())))) {
            _newObject.stiffnessrot = this.stiffnessrot;
        }
        final PropertyTree forcePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("force"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(forcePropertyTree!= null):((forcePropertyTree == null)||(!forcePropertyTree.isLeaf())))) {
            _newObject.force = this.force;
        }
        final PropertyTree torquePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("torque"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(torquePropertyTree!= null):((torquePropertyTree == null)||(!torquePropertyTree.isLeaf())))) {
            _newObject.torque = this.torque;
        }
        final PropertyTree alphaPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("alpha"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(alphaPropertyTree!= null):((alphaPropertyTree == null)||(!alphaPropertyTree.isLeaf())))) {
            _newObject.alpha = this.alpha;
        }
        final PropertyTree fogstartPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("fogstart"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(fogstartPropertyTree!= null):((fogstartPropertyTree == null)||(!fogstartPropertyTree.isLeaf())))) {
            _newObject.fogstart = this.fogstart;
        }
        final PropertyTree fogendPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("fogend"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(fogendPropertyTree!= null):((fogendPropertyTree == null)||(!fogendPropertyTree.isLeaf())))) {
            _newObject.fogend = this.fogend;
        }
        final PropertyTree znearPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("znear"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(znearPropertyTree!= null):((znearPropertyTree == null)||(!znearPropertyTree.isLeaf())))) {
            _newObject.znear = this.znear;
        }
        final PropertyTree zfarPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("zfar"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(zfarPropertyTree!= null):((zfarPropertyTree == null)||(!zfarPropertyTree.isLeaf())))) {
            _newObject.zfar = this.zfar;
        }
        final PropertyTree hazePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("haze"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(hazePropertyTree!= null):((hazePropertyTree == null)||(!hazePropertyTree.isLeaf())))) {
            _newObject.haze = this.haze;
        }
        final PropertyTree shadowclipPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("shadowclip"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(shadowclipPropertyTree!= null):((shadowclipPropertyTree == null)||(!shadowclipPropertyTree.isLeaf())))) {
            _newObject.shadowclip = this.shadowclip;
        }
        final PropertyTree shadowscalePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("shadowscale"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(shadowscalePropertyTree!= null):((shadowscalePropertyTree == null)||(!shadowscalePropertyTree.isLeaf())))) {
            _newObject.shadowscale = this.shadowscale;
        }
        final PropertyTree actuatortendonPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("actuatortendon"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(actuatortendonPropertyTree!= null):((actuatortendonPropertyTree == null)||(!actuatortendonPropertyTree.isLeaf())))) {
            _newObject.actuatortendon = this.actuatortendon;
        }
        return _newObject;
    }

    @Override
    public MapType copyExcept(final PropertyTree _propertyTree) {
        return createCopy(_propertyTree, PropertyTreeUse.EXCLUDE);
    }

    @Override
    public MapType copyOnly(final PropertyTree _propertyTree) {
        return createCopy(_propertyTree, PropertyTreeUse.INCLUDE);
    }

    /**
     * Copies all state of this object to a builder. This method is used by the {@link #copyOf} method and should not be called directly by client code.
     * 
     * @param _other
     *     A builder instance to which the state of this object will be copied.
     */
    public<_B >void copyTo(final MapType.Builder<_B> _other) {
        _other.stiffness = this.stiffness;
        _other.stiffnessrot = this.stiffnessrot;
        _other.force = this.force;
        _other.torque = this.torque;
        _other.alpha = this.alpha;
        _other.fogstart = this.fogstart;
        _other.fogend = this.fogend;
        _other.znear = this.znear;
        _other.zfar = this.zfar;
        _other.haze = this.haze;
        _other.shadowclip = this.shadowclip;
        _other.shadowscale = this.shadowscale;
        _other.actuatortendon = this.actuatortendon;
    }

    public<_B >MapType.Builder<_B> newCopyBuilder(final _B _parentBuilder) {
        return new MapType.Builder<_B>(_parentBuilder, this, true);
    }

    public MapType.Builder<Void> newCopyBuilder() {
        return newCopyBuilder(null);
    }

    public static MapType.Builder<Void> builder() {
        return new MapType.Builder<Void>(null, null, false);
    }

    public static<_B >MapType.Builder<_B> copyOf(final MapType _other) {
        final MapType.Builder<_B> _newBuilder = new MapType.Builder<_B>(null, null, false);
        _other.copyTo(_newBuilder);
        return _newBuilder;
    }

    /**
     * Copies all state of this object to a builder. This method is used by the {@link #copyOf} method and should not be called directly by client code.
     * 
     * @param _other
     *     A builder instance to which the state of this object will be copied.
     */
    public<_B >void copyTo(final MapType.Builder<_B> _other, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        final PropertyTree stiffnessPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("stiffness"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(stiffnessPropertyTree!= null):((stiffnessPropertyTree == null)||(!stiffnessPropertyTree.isLeaf())))) {
            _other.stiffness = this.stiffness;
        }
        final PropertyTree stiffnessrotPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("stiffnessrot"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(stiffnessrotPropertyTree!= null):((stiffnessrotPropertyTree == null)||(!stiffnessrotPropertyTree.isLeaf())))) {
            _other.stiffnessrot = this.stiffnessrot;
        }
        final PropertyTree forcePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("force"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(forcePropertyTree!= null):((forcePropertyTree == null)||(!forcePropertyTree.isLeaf())))) {
            _other.force = this.force;
        }
        final PropertyTree torquePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("torque"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(torquePropertyTree!= null):((torquePropertyTree == null)||(!torquePropertyTree.isLeaf())))) {
            _other.torque = this.torque;
        }
        final PropertyTree alphaPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("alpha"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(alphaPropertyTree!= null):((alphaPropertyTree == null)||(!alphaPropertyTree.isLeaf())))) {
            _other.alpha = this.alpha;
        }
        final PropertyTree fogstartPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("fogstart"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(fogstartPropertyTree!= null):((fogstartPropertyTree == null)||(!fogstartPropertyTree.isLeaf())))) {
            _other.fogstart = this.fogstart;
        }
        final PropertyTree fogendPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("fogend"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(fogendPropertyTree!= null):((fogendPropertyTree == null)||(!fogendPropertyTree.isLeaf())))) {
            _other.fogend = this.fogend;
        }
        final PropertyTree znearPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("znear"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(znearPropertyTree!= null):((znearPropertyTree == null)||(!znearPropertyTree.isLeaf())))) {
            _other.znear = this.znear;
        }
        final PropertyTree zfarPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("zfar"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(zfarPropertyTree!= null):((zfarPropertyTree == null)||(!zfarPropertyTree.isLeaf())))) {
            _other.zfar = this.zfar;
        }
        final PropertyTree hazePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("haze"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(hazePropertyTree!= null):((hazePropertyTree == null)||(!hazePropertyTree.isLeaf())))) {
            _other.haze = this.haze;
        }
        final PropertyTree shadowclipPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("shadowclip"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(shadowclipPropertyTree!= null):((shadowclipPropertyTree == null)||(!shadowclipPropertyTree.isLeaf())))) {
            _other.shadowclip = this.shadowclip;
        }
        final PropertyTree shadowscalePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("shadowscale"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(shadowscalePropertyTree!= null):((shadowscalePropertyTree == null)||(!shadowscalePropertyTree.isLeaf())))) {
            _other.shadowscale = this.shadowscale;
        }
        final PropertyTree actuatortendonPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("actuatortendon"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(actuatortendonPropertyTree!= null):((actuatortendonPropertyTree == null)||(!actuatortendonPropertyTree.isLeaf())))) {
            _other.actuatortendon = this.actuatortendon;
        }
    }

    public<_B >MapType.Builder<_B> newCopyBuilder(final _B _parentBuilder, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        return new MapType.Builder<_B>(_parentBuilder, this, true, _propertyTree, _propertyTreeUse);
    }

    public MapType.Builder<Void> newCopyBuilder(final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        return newCopyBuilder(null, _propertyTree, _propertyTreeUse);
    }

    public static<_B >MapType.Builder<_B> copyOf(final MapType _other, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        final MapType.Builder<_B> _newBuilder = new MapType.Builder<_B>(null, null, false);
        _other.copyTo(_newBuilder, _propertyTree, _propertyTreeUse);
        return _newBuilder;
    }

    public static MapType.Builder<Void> copyExcept(final MapType _other, final PropertyTree _propertyTree) {
        return copyOf(_other, _propertyTree, PropertyTreeUse.EXCLUDE);
    }

    public static MapType.Builder<Void> copyOnly(final MapType _other, final PropertyTree _propertyTree) {
        return copyOf(_other, _propertyTree, PropertyTreeUse.INCLUDE);
    }

    public MapType visit(final PropertyVisitor _visitor_) {
        _visitor_.visit(this);
        return this;
    }

    public static class Builder<_B >implements Buildable
    {

        protected final _B _parentBuilder;
        private BigDecimal stiffness;
        private BigDecimal stiffnessrot;
        private BigDecimal force;
        private BigDecimal torque;
        private BigDecimal alpha;
        private BigDecimal fogstart;
        private BigDecimal fogend;
        private BigDecimal znear;
        private BigDecimal zfar;
        private BigDecimal haze;
        private BigDecimal shadowclip;
        private BigDecimal shadowscale;
        private BigDecimal actuatortendon;

        public Builder(final _B _parentBuilder, final MapType _other, final boolean _copy) {
            this._parentBuilder = _parentBuilder;
            if (_other!= null) {
                this.stiffness = _other.stiffness;
                this.stiffnessrot = _other.stiffnessrot;
                this.force = _other.force;
                this.torque = _other.torque;
                this.alpha = _other.alpha;
                this.fogstart = _other.fogstart;
                this.fogend = _other.fogend;
                this.znear = _other.znear;
                this.zfar = _other.zfar;
                this.haze = _other.haze;
                this.shadowclip = _other.shadowclip;
                this.shadowscale = _other.shadowscale;
                this.actuatortendon = _other.actuatortendon;
            }
        }

        public Builder(final _B _parentBuilder, final MapType _other, final boolean _copy, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
            this._parentBuilder = _parentBuilder;
            if (_other!= null) {
                final PropertyTree stiffnessPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("stiffness"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(stiffnessPropertyTree!= null):((stiffnessPropertyTree == null)||(!stiffnessPropertyTree.isLeaf())))) {
                    this.stiffness = _other.stiffness;
                }
                final PropertyTree stiffnessrotPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("stiffnessrot"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(stiffnessrotPropertyTree!= null):((stiffnessrotPropertyTree == null)||(!stiffnessrotPropertyTree.isLeaf())))) {
                    this.stiffnessrot = _other.stiffnessrot;
                }
                final PropertyTree forcePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("force"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(forcePropertyTree!= null):((forcePropertyTree == null)||(!forcePropertyTree.isLeaf())))) {
                    this.force = _other.force;
                }
                final PropertyTree torquePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("torque"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(torquePropertyTree!= null):((torquePropertyTree == null)||(!torquePropertyTree.isLeaf())))) {
                    this.torque = _other.torque;
                }
                final PropertyTree alphaPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("alpha"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(alphaPropertyTree!= null):((alphaPropertyTree == null)||(!alphaPropertyTree.isLeaf())))) {
                    this.alpha = _other.alpha;
                }
                final PropertyTree fogstartPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("fogstart"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(fogstartPropertyTree!= null):((fogstartPropertyTree == null)||(!fogstartPropertyTree.isLeaf())))) {
                    this.fogstart = _other.fogstart;
                }
                final PropertyTree fogendPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("fogend"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(fogendPropertyTree!= null):((fogendPropertyTree == null)||(!fogendPropertyTree.isLeaf())))) {
                    this.fogend = _other.fogend;
                }
                final PropertyTree znearPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("znear"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(znearPropertyTree!= null):((znearPropertyTree == null)||(!znearPropertyTree.isLeaf())))) {
                    this.znear = _other.znear;
                }
                final PropertyTree zfarPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("zfar"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(zfarPropertyTree!= null):((zfarPropertyTree == null)||(!zfarPropertyTree.isLeaf())))) {
                    this.zfar = _other.zfar;
                }
                final PropertyTree hazePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("haze"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(hazePropertyTree!= null):((hazePropertyTree == null)||(!hazePropertyTree.isLeaf())))) {
                    this.haze = _other.haze;
                }
                final PropertyTree shadowclipPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("shadowclip"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(shadowclipPropertyTree!= null):((shadowclipPropertyTree == null)||(!shadowclipPropertyTree.isLeaf())))) {
                    this.shadowclip = _other.shadowclip;
                }
                final PropertyTree shadowscalePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("shadowscale"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(shadowscalePropertyTree!= null):((shadowscalePropertyTree == null)||(!shadowscalePropertyTree.isLeaf())))) {
                    this.shadowscale = _other.shadowscale;
                }
                final PropertyTree actuatortendonPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("actuatortendon"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(actuatortendonPropertyTree!= null):((actuatortendonPropertyTree == null)||(!actuatortendonPropertyTree.isLeaf())))) {
                    this.actuatortendon = _other.actuatortendon;
                }
            }
        }

        public _B end() {
            return this._parentBuilder;
        }

        protected<_P extends MapType >_P init(final _P _product) {
            _product.stiffness = this.stiffness;
            _product.stiffnessrot = this.stiffnessrot;
            _product.force = this.force;
            _product.torque = this.torque;
            _product.alpha = this.alpha;
            _product.fogstart = this.fogstart;
            _product.fogend = this.fogend;
            _product.znear = this.znear;
            _product.zfar = this.zfar;
            _product.haze = this.haze;
            _product.shadowclip = this.shadowclip;
            _product.shadowscale = this.shadowscale;
            _product.actuatortendon = this.actuatortendon;
            return _product;
        }

        /**
         * Sets the new value of "stiffness" (any previous value will be replaced)
         * 
         * @param stiffness
         *     New value of the "stiffness" property.
         */
        public MapType.Builder<_B> withStiffness(final BigDecimal stiffness) {
            this.stiffness = stiffness;
            return this;
        }

        /**
         * Sets the new value of "stiffnessrot" (any previous value will be replaced)
         * 
         * @param stiffnessrot
         *     New value of the "stiffnessrot" property.
         */
        public MapType.Builder<_B> withStiffnessrot(final BigDecimal stiffnessrot) {
            this.stiffnessrot = stiffnessrot;
            return this;
        }

        /**
         * Sets the new value of "force" (any previous value will be replaced)
         * 
         * @param force
         *     New value of the "force" property.
         */
        public MapType.Builder<_B> withForce(final BigDecimal force) {
            this.force = force;
            return this;
        }

        /**
         * Sets the new value of "torque" (any previous value will be replaced)
         * 
         * @param torque
         *     New value of the "torque" property.
         */
        public MapType.Builder<_B> withTorque(final BigDecimal torque) {
            this.torque = torque;
            return this;
        }

        /**
         * Sets the new value of "alpha" (any previous value will be replaced)
         * 
         * @param alpha
         *     New value of the "alpha" property.
         */
        public MapType.Builder<_B> withAlpha(final BigDecimal alpha) {
            this.alpha = alpha;
            return this;
        }

        /**
         * Sets the new value of "fogstart" (any previous value will be replaced)
         * 
         * @param fogstart
         *     New value of the "fogstart" property.
         */
        public MapType.Builder<_B> withFogstart(final BigDecimal fogstart) {
            this.fogstart = fogstart;
            return this;
        }

        /**
         * Sets the new value of "fogend" (any previous value will be replaced)
         * 
         * @param fogend
         *     New value of the "fogend" property.
         */
        public MapType.Builder<_B> withFogend(final BigDecimal fogend) {
            this.fogend = fogend;
            return this;
        }

        /**
         * Sets the new value of "znear" (any previous value will be replaced)
         * 
         * @param znear
         *     New value of the "znear" property.
         */
        public MapType.Builder<_B> withZnear(final BigDecimal znear) {
            this.znear = znear;
            return this;
        }

        /**
         * Sets the new value of "zfar" (any previous value will be replaced)
         * 
         * @param zfar
         *     New value of the "zfar" property.
         */
        public MapType.Builder<_B> withZfar(final BigDecimal zfar) {
            this.zfar = zfar;
            return this;
        }

        /**
         * Sets the new value of "haze" (any previous value will be replaced)
         * 
         * @param haze
         *     New value of the "haze" property.
         */
        public MapType.Builder<_B> withHaze(final BigDecimal haze) {
            this.haze = haze;
            return this;
        }

        /**
         * Sets the new value of "shadowclip" (any previous value will be replaced)
         * 
         * @param shadowclip
         *     New value of the "shadowclip" property.
         */
        public MapType.Builder<_B> withShadowclip(final BigDecimal shadowclip) {
            this.shadowclip = shadowclip;
            return this;
        }

        /**
         * Sets the new value of "shadowscale" (any previous value will be replaced)
         * 
         * @param shadowscale
         *     New value of the "shadowscale" property.
         */
        public MapType.Builder<_B> withShadowscale(final BigDecimal shadowscale) {
            this.shadowscale = shadowscale;
            return this;
        }

        /**
         * Sets the new value of "actuatortendon" (any previous value will be replaced)
         * 
         * @param actuatortendon
         *     New value of the "actuatortendon" property.
         */
        public MapType.Builder<_B> withActuatortendon(final BigDecimal actuatortendon) {
            this.actuatortendon = actuatortendon;
            return this;
        }

        @Override
        public MapType build() {
            return this.init(new MapType());
        }

        public MapType.Builder<_B> copyOf(final MapType _other) {
            _other.copyTo(this);
            return this;
        }

        public MapType.Builder<_B> copyOf(final MapType.Builder _other) {
            return copyOf(_other.build());
        }

    }

    public static class PropInfo {

        public final static transient String STIFFNESS = "stiffness";
        public final static transient String STIFFNESSROT = "stiffnessrot";
        public final static transient String FORCE = "force";
        public final static transient String TORQUE = "torque";
        public final static transient String ALPHA = "alpha";
        public final static transient String FOGSTART = "fogstart";
        public final static transient String FOGEND = "fogend";
        public final static transient String ZNEAR = "znear";
        public final static transient String ZFAR = "zfar";
        public final static transient String HAZE = "haze";
        public final static transient String SHADOWCLIP = "shadowclip";
        public final static transient String SHADOWSCALE = "shadowscale";
        public final static transient String ACTUATORTENDON = "actuatortendon";

    }

    public static class Select
        extends MapType.Selector<MapType.Select, Void>
    {


        Select() {
            super(null, null, null);
        }

        public static MapType.Select _root() {
            return new MapType.Select();
        }

    }

    public static class Selector<TRoot extends com.kscs.util.jaxb.Selector<TRoot, ?> , TParent >
        extends com.kscs.util.jaxb.Selector<TRoot, TParent>
    {

        private com.kscs.util.jaxb.Selector<TRoot, MapType.Selector<TRoot, TParent>> stiffness = null;
        private com.kscs.util.jaxb.Selector<TRoot, MapType.Selector<TRoot, TParent>> stiffnessrot = null;
        private com.kscs.util.jaxb.Selector<TRoot, MapType.Selector<TRoot, TParent>> force = null;
        private com.kscs.util.jaxb.Selector<TRoot, MapType.Selector<TRoot, TParent>> torque = null;
        private com.kscs.util.jaxb.Selector<TRoot, MapType.Selector<TRoot, TParent>> alpha = null;
        private com.kscs.util.jaxb.Selector<TRoot, MapType.Selector<TRoot, TParent>> fogstart = null;
        private com.kscs.util.jaxb.Selector<TRoot, MapType.Selector<TRoot, TParent>> fogend = null;
        private com.kscs.util.jaxb.Selector<TRoot, MapType.Selector<TRoot, TParent>> znear = null;
        private com.kscs.util.jaxb.Selector<TRoot, MapType.Selector<TRoot, TParent>> zfar = null;
        private com.kscs.util.jaxb.Selector<TRoot, MapType.Selector<TRoot, TParent>> haze = null;
        private com.kscs.util.jaxb.Selector<TRoot, MapType.Selector<TRoot, TParent>> shadowclip = null;
        private com.kscs.util.jaxb.Selector<TRoot, MapType.Selector<TRoot, TParent>> shadowscale = null;
        private com.kscs.util.jaxb.Selector<TRoot, MapType.Selector<TRoot, TParent>> actuatortendon = null;

        public Selector(final TRoot root, final TParent parent, final String propertyName) {
            super(root, parent, propertyName);
        }

        @Override
        public Map<String, PropertyTree> buildChildren() {
            final Map<String, PropertyTree> products = new HashMap<String, PropertyTree>();
            products.putAll(super.buildChildren());
            if (this.stiffness!= null) {
                products.put("stiffness", this.stiffness.init());
            }
            if (this.stiffnessrot!= null) {
                products.put("stiffnessrot", this.stiffnessrot.init());
            }
            if (this.force!= null) {
                products.put("force", this.force.init());
            }
            if (this.torque!= null) {
                products.put("torque", this.torque.init());
            }
            if (this.alpha!= null) {
                products.put("alpha", this.alpha.init());
            }
            if (this.fogstart!= null) {
                products.put("fogstart", this.fogstart.init());
            }
            if (this.fogend!= null) {
                products.put("fogend", this.fogend.init());
            }
            if (this.znear!= null) {
                products.put("znear", this.znear.init());
            }
            if (this.zfar!= null) {
                products.put("zfar", this.zfar.init());
            }
            if (this.haze!= null) {
                products.put("haze", this.haze.init());
            }
            if (this.shadowclip!= null) {
                products.put("shadowclip", this.shadowclip.init());
            }
            if (this.shadowscale!= null) {
                products.put("shadowscale", this.shadowscale.init());
            }
            if (this.actuatortendon!= null) {
                products.put("actuatortendon", this.actuatortendon.init());
            }
            return products;
        }

        public com.kscs.util.jaxb.Selector<TRoot, MapType.Selector<TRoot, TParent>> stiffness() {
            return ((this.stiffness == null)?this.stiffness = new com.kscs.util.jaxb.Selector<TRoot, MapType.Selector<TRoot, TParent>>(this._root, this, "stiffness"):this.stiffness);
        }

        public com.kscs.util.jaxb.Selector<TRoot, MapType.Selector<TRoot, TParent>> stiffnessrot() {
            return ((this.stiffnessrot == null)?this.stiffnessrot = new com.kscs.util.jaxb.Selector<TRoot, MapType.Selector<TRoot, TParent>>(this._root, this, "stiffnessrot"):this.stiffnessrot);
        }

        public com.kscs.util.jaxb.Selector<TRoot, MapType.Selector<TRoot, TParent>> force() {
            return ((this.force == null)?this.force = new com.kscs.util.jaxb.Selector<TRoot, MapType.Selector<TRoot, TParent>>(this._root, this, "force"):this.force);
        }

        public com.kscs.util.jaxb.Selector<TRoot, MapType.Selector<TRoot, TParent>> torque() {
            return ((this.torque == null)?this.torque = new com.kscs.util.jaxb.Selector<TRoot, MapType.Selector<TRoot, TParent>>(this._root, this, "torque"):this.torque);
        }

        public com.kscs.util.jaxb.Selector<TRoot, MapType.Selector<TRoot, TParent>> alpha() {
            return ((this.alpha == null)?this.alpha = new com.kscs.util.jaxb.Selector<TRoot, MapType.Selector<TRoot, TParent>>(this._root, this, "alpha"):this.alpha);
        }

        public com.kscs.util.jaxb.Selector<TRoot, MapType.Selector<TRoot, TParent>> fogstart() {
            return ((this.fogstart == null)?this.fogstart = new com.kscs.util.jaxb.Selector<TRoot, MapType.Selector<TRoot, TParent>>(this._root, this, "fogstart"):this.fogstart);
        }

        public com.kscs.util.jaxb.Selector<TRoot, MapType.Selector<TRoot, TParent>> fogend() {
            return ((this.fogend == null)?this.fogend = new com.kscs.util.jaxb.Selector<TRoot, MapType.Selector<TRoot, TParent>>(this._root, this, "fogend"):this.fogend);
        }

        public com.kscs.util.jaxb.Selector<TRoot, MapType.Selector<TRoot, TParent>> znear() {
            return ((this.znear == null)?this.znear = new com.kscs.util.jaxb.Selector<TRoot, MapType.Selector<TRoot, TParent>>(this._root, this, "znear"):this.znear);
        }

        public com.kscs.util.jaxb.Selector<TRoot, MapType.Selector<TRoot, TParent>> zfar() {
            return ((this.zfar == null)?this.zfar = new com.kscs.util.jaxb.Selector<TRoot, MapType.Selector<TRoot, TParent>>(this._root, this, "zfar"):this.zfar);
        }

        public com.kscs.util.jaxb.Selector<TRoot, MapType.Selector<TRoot, TParent>> haze() {
            return ((this.haze == null)?this.haze = new com.kscs.util.jaxb.Selector<TRoot, MapType.Selector<TRoot, TParent>>(this._root, this, "haze"):this.haze);
        }

        public com.kscs.util.jaxb.Selector<TRoot, MapType.Selector<TRoot, TParent>> shadowclip() {
            return ((this.shadowclip == null)?this.shadowclip = new com.kscs.util.jaxb.Selector<TRoot, MapType.Selector<TRoot, TParent>>(this._root, this, "shadowclip"):this.shadowclip);
        }

        public com.kscs.util.jaxb.Selector<TRoot, MapType.Selector<TRoot, TParent>> shadowscale() {
            return ((this.shadowscale == null)?this.shadowscale = new com.kscs.util.jaxb.Selector<TRoot, MapType.Selector<TRoot, TParent>>(this._root, this, "shadowscale"):this.shadowscale);
        }

        public com.kscs.util.jaxb.Selector<TRoot, MapType.Selector<TRoot, TParent>> actuatortendon() {
            return ((this.actuatortendon == null)?this.actuatortendon = new com.kscs.util.jaxb.Selector<TRoot, MapType.Selector<TRoot, TParent>>(this._root, this, "actuatortendon"):this.actuatortendon);
        }

    }

}
