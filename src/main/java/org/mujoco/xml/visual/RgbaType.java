//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.3.0 
// See <a href="https://javaee.github.io/jaxb-v2/">https://javaee.github.io/jaxb-v2/</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2024.03.13 at 04:36:46 PM EDT 
//


package org.mujoco.xml.visual;

import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeSupport;
import java.beans.PropertyVetoException;
import java.beans.VetoableChangeListener;
import java.beans.VetoableChangeSupport;
import java.util.HashMap;
import java.util.Map;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlType;
import com.kscs.util.jaxb.Buildable;
import com.kscs.util.jaxb.Copyable;
import com.kscs.util.jaxb.PartialCopyable;
import com.kscs.util.jaxb.PropertyTree;
import com.kscs.util.jaxb.PropertyTreeUse;
import com.kscs.util.jaxb.PropertyVisitor;


/**
 * <p>Java class for rgbaType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="rgbaType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;attribute name="fog" type="{attributeTypes}fourRealsType" default="0 0 0 1" /&gt;
 *       &lt;attribute name="haze" type="{attributeTypes}fourRealsType" default="1 1 1 1" /&gt;
 *       &lt;attribute name="force" type="{attributeTypes}fourRealsType" default="1 0.5 0.5 1" /&gt;
 *       &lt;attribute name="inertia" type="{attributeTypes}fourRealsType" default="0.8 0.2 0.2 0.6" /&gt;
 *       &lt;attribute name="joint" type="{attributeTypes}fourRealsType" default="0.2 0.6 0.8 1" /&gt;
 *       &lt;attribute name="actuator" type="{attributeTypes}fourRealsType" default="0.2 0.25 0.2 1" /&gt;
 *       &lt;attribute name="actuatornegative" type="{attributeTypes}fourRealsType" default="0.2 0.6 0.9 1" /&gt;
 *       &lt;attribute name="actuatorpositive" type="{attributeTypes}fourRealsType" default="0.9 0.4 0.2 1" /&gt;
 *       &lt;attribute name="com" type="{attributeTypes}fourRealsType" default="0.9 0.9 0.9 1" /&gt;
 *       &lt;attribute name="camera" type="{attributeTypes}fourRealsType" default="0.6 0.9 0.6 1" /&gt;
 *       &lt;attribute name="light" type="{attributeTypes}fourRealsType" default="0.6 0.6 0.9 1" /&gt;
 *       &lt;attribute name="selectpoint" type="{attributeTypes}fourRealsType" default="0.9 0.9 0.1 1" /&gt;
 *       &lt;attribute name="connect" type="{attributeTypes}fourRealsType" default="0.2 0.2 0.8 1" /&gt;
 *       &lt;attribute name="contactpoint" type="{attributeTypes}fourRealsType" default="0.9 0.6 0.2 1" /&gt;
 *       &lt;attribute name="contactforce" type="{attributeTypes}fourRealsType" default="0.7 0.9 0.9 1" /&gt;
 *       &lt;attribute name="contactfriction" type="{attributeTypes}fourRealsType" default="0.9 0.8 0.4 1" /&gt;
 *       &lt;attribute name="contacttorque" type="{attributeTypes}fourRealsType" default="0.9 0.7 0.9 1" /&gt;
 *       &lt;attribute name="contactgap" type="{attributeTypes}fourRealsType" default="0.5 0.8 0.9 1" /&gt;
 *       &lt;attribute name="rangefinder" type="{attributeTypes}fourRealsType" default="1 1 0.1 1" /&gt;
 *       &lt;attribute name="constraint" type="{attributeTypes}fourRealsType" default="0.9 0 0 1" /&gt;
 *       &lt;attribute name="slidercrank" type="{attributeTypes}fourRealsType" default="0.5 0.3 0.8 1" /&gt;
 *       &lt;attribute name="crankbroken" type="{attributeTypes}fourRealsType" default="0.9 0 0 1" /&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "rgbaType")
public class RgbaType implements Cloneable, Copyable, PartialCopyable
{

    @XmlAttribute(name = "fog")
    protected String fog;
    @XmlAttribute(name = "haze")
    protected String haze;
    @XmlAttribute(name = "force")
    protected String force;
    @XmlAttribute(name = "inertia")
    protected String inertia;
    @XmlAttribute(name = "joint")
    protected String joint;
    @XmlAttribute(name = "actuator")
    protected String actuator;
    @XmlAttribute(name = "actuatornegative")
    protected String actuatornegative;
    @XmlAttribute(name = "actuatorpositive")
    protected String actuatorpositive;
    @XmlAttribute(name = "com")
    protected String com;
    @XmlAttribute(name = "camera")
    protected String camera;
    @XmlAttribute(name = "light")
    protected String light;
    @XmlAttribute(name = "selectpoint")
    protected String selectpoint;
    @XmlAttribute(name = "connect")
    protected String connect;
    @XmlAttribute(name = "contactpoint")
    protected String contactpoint;
    @XmlAttribute(name = "contactforce")
    protected String contactforce;
    @XmlAttribute(name = "contactfriction")
    protected String contactfriction;
    @XmlAttribute(name = "contacttorque")
    protected String contacttorque;
    @XmlAttribute(name = "contactgap")
    protected String contactgap;
    @XmlAttribute(name = "rangefinder")
    protected String rangefinder;
    @XmlAttribute(name = "constraint")
    protected String constraint;
    @XmlAttribute(name = "slidercrank")
    protected String slidercrank;
    @XmlAttribute(name = "crankbroken")
    protected String crankbroken;
    protected final transient VetoableChangeSupport vetoableChange__Support = new VetoableChangeSupport(this);
    protected final transient PropertyChangeSupport propertyChange__Support = new PropertyChangeSupport(this);

    /**
     * Generated by copy-constructor plugin, JAXB requires public no-arg constructor.
     * 
     */
    public RgbaType() {
        // Generated by copy-constructor plugin, JAXB requires public no-arg constructor.
    }

    /**
     * Instantiates a RgbaType copying the state of another RgbaType
     * 
     * @param _other
     *     The original RgbaType from which to copy state.
     */
    public RgbaType(final RgbaType _other) {
        this.fog = _other.fog;
        this.haze = _other.haze;
        this.force = _other.force;
        this.inertia = _other.inertia;
        this.joint = _other.joint;
        this.actuator = _other.actuator;
        this.actuatornegative = _other.actuatornegative;
        this.actuatorpositive = _other.actuatorpositive;
        this.com = _other.com;
        this.camera = _other.camera;
        this.light = _other.light;
        this.selectpoint = _other.selectpoint;
        this.connect = _other.connect;
        this.contactpoint = _other.contactpoint;
        this.contactforce = _other.contactforce;
        this.contactfriction = _other.contactfriction;
        this.contacttorque = _other.contacttorque;
        this.contactgap = _other.contactgap;
        this.rangefinder = _other.rangefinder;
        this.constraint = _other.constraint;
        this.slidercrank = _other.slidercrank;
        this.crankbroken = _other.crankbroken;
    }

    /**
     * Instantiates a RgbaType copying the state of another RgbaType
     * 
     * @param _propertyTreeUse
     *     Meaning of the {@link PropertyPath}: Exclude or include members contained in property path.
     * @param _propertyTree
     *     A restricting {@link PropertyPath} that defines which nodes of the source object tree should actually be copied.
     * @param _other
     *     The original RgbaType from which to copy state.
     */
    public RgbaType(final RgbaType _other, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        final PropertyTree fogPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("fog"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(fogPropertyTree!= null):((fogPropertyTree == null)||(!fogPropertyTree.isLeaf())))) {
            this.fog = _other.fog;
        }
        final PropertyTree hazePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("haze"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(hazePropertyTree!= null):((hazePropertyTree == null)||(!hazePropertyTree.isLeaf())))) {
            this.haze = _other.haze;
        }
        final PropertyTree forcePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("force"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(forcePropertyTree!= null):((forcePropertyTree == null)||(!forcePropertyTree.isLeaf())))) {
            this.force = _other.force;
        }
        final PropertyTree inertiaPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("inertia"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(inertiaPropertyTree!= null):((inertiaPropertyTree == null)||(!inertiaPropertyTree.isLeaf())))) {
            this.inertia = _other.inertia;
        }
        final PropertyTree jointPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("joint"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(jointPropertyTree!= null):((jointPropertyTree == null)||(!jointPropertyTree.isLeaf())))) {
            this.joint = _other.joint;
        }
        final PropertyTree actuatorPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("actuator"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(actuatorPropertyTree!= null):((actuatorPropertyTree == null)||(!actuatorPropertyTree.isLeaf())))) {
            this.actuator = _other.actuator;
        }
        final PropertyTree actuatornegativePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("actuatornegative"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(actuatornegativePropertyTree!= null):((actuatornegativePropertyTree == null)||(!actuatornegativePropertyTree.isLeaf())))) {
            this.actuatornegative = _other.actuatornegative;
        }
        final PropertyTree actuatorpositivePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("actuatorpositive"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(actuatorpositivePropertyTree!= null):((actuatorpositivePropertyTree == null)||(!actuatorpositivePropertyTree.isLeaf())))) {
            this.actuatorpositive = _other.actuatorpositive;
        }
        final PropertyTree comPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("com"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(comPropertyTree!= null):((comPropertyTree == null)||(!comPropertyTree.isLeaf())))) {
            this.com = _other.com;
        }
        final PropertyTree cameraPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("camera"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(cameraPropertyTree!= null):((cameraPropertyTree == null)||(!cameraPropertyTree.isLeaf())))) {
            this.camera = _other.camera;
        }
        final PropertyTree lightPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("light"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(lightPropertyTree!= null):((lightPropertyTree == null)||(!lightPropertyTree.isLeaf())))) {
            this.light = _other.light;
        }
        final PropertyTree selectpointPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("selectpoint"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(selectpointPropertyTree!= null):((selectpointPropertyTree == null)||(!selectpointPropertyTree.isLeaf())))) {
            this.selectpoint = _other.selectpoint;
        }
        final PropertyTree connectPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("connect"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(connectPropertyTree!= null):((connectPropertyTree == null)||(!connectPropertyTree.isLeaf())))) {
            this.connect = _other.connect;
        }
        final PropertyTree contactpointPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("contactpoint"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(contactpointPropertyTree!= null):((contactpointPropertyTree == null)||(!contactpointPropertyTree.isLeaf())))) {
            this.contactpoint = _other.contactpoint;
        }
        final PropertyTree contactforcePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("contactforce"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(contactforcePropertyTree!= null):((contactforcePropertyTree == null)||(!contactforcePropertyTree.isLeaf())))) {
            this.contactforce = _other.contactforce;
        }
        final PropertyTree contactfrictionPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("contactfriction"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(contactfrictionPropertyTree!= null):((contactfrictionPropertyTree == null)||(!contactfrictionPropertyTree.isLeaf())))) {
            this.contactfriction = _other.contactfriction;
        }
        final PropertyTree contacttorquePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("contacttorque"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(contacttorquePropertyTree!= null):((contacttorquePropertyTree == null)||(!contacttorquePropertyTree.isLeaf())))) {
            this.contacttorque = _other.contacttorque;
        }
        final PropertyTree contactgapPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("contactgap"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(contactgapPropertyTree!= null):((contactgapPropertyTree == null)||(!contactgapPropertyTree.isLeaf())))) {
            this.contactgap = _other.contactgap;
        }
        final PropertyTree rangefinderPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("rangefinder"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(rangefinderPropertyTree!= null):((rangefinderPropertyTree == null)||(!rangefinderPropertyTree.isLeaf())))) {
            this.rangefinder = _other.rangefinder;
        }
        final PropertyTree constraintPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("constraint"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(constraintPropertyTree!= null):((constraintPropertyTree == null)||(!constraintPropertyTree.isLeaf())))) {
            this.constraint = _other.constraint;
        }
        final PropertyTree slidercrankPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("slidercrank"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(slidercrankPropertyTree!= null):((slidercrankPropertyTree == null)||(!slidercrankPropertyTree.isLeaf())))) {
            this.slidercrank = _other.slidercrank;
        }
        final PropertyTree crankbrokenPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("crankbroken"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(crankbrokenPropertyTree!= null):((crankbrokenPropertyTree == null)||(!crankbrokenPropertyTree.isLeaf())))) {
            this.crankbroken = _other.crankbroken;
        }
    }

    /**
     * Gets the value of the fog property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getFog() {
        if (fog == null) {
            return "0 0 0 1";
        } else {
            return fog;
        }
    }

    /**
     * Gets the value of the haze property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getHaze() {
        if (haze == null) {
            return "1 1 1 1";
        } else {
            return haze;
        }
    }

    /**
     * Gets the value of the force property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getForce() {
        if (force == null) {
            return "1 0.5 0.5 1";
        } else {
            return force;
        }
    }

    /**
     * Gets the value of the inertia property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getInertia() {
        if (inertia == null) {
            return "0.8 0.2 0.2 0.6";
        } else {
            return inertia;
        }
    }

    /**
     * Gets the value of the joint property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getJoint() {
        if (joint == null) {
            return "0.2 0.6 0.8 1";
        } else {
            return joint;
        }
    }

    /**
     * Gets the value of the actuator property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getActuator() {
        if (actuator == null) {
            return "0.2 0.25 0.2 1";
        } else {
            return actuator;
        }
    }

    /**
     * Gets the value of the actuatornegative property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getActuatornegative() {
        if (actuatornegative == null) {
            return "0.2 0.6 0.9 1";
        } else {
            return actuatornegative;
        }
    }

    /**
     * Gets the value of the actuatorpositive property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getActuatorpositive() {
        if (actuatorpositive == null) {
            return "0.9 0.4 0.2 1";
        } else {
            return actuatorpositive;
        }
    }

    /**
     * Gets the value of the com property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getCom() {
        if (com == null) {
            return "0.9 0.9 0.9 1";
        } else {
            return com;
        }
    }

    /**
     * Gets the value of the camera property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getCamera() {
        if (camera == null) {
            return "0.6 0.9 0.6 1";
        } else {
            return camera;
        }
    }

    /**
     * Gets the value of the light property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getLight() {
        if (light == null) {
            return "0.6 0.6 0.9 1";
        } else {
            return light;
        }
    }

    /**
     * Gets the value of the selectpoint property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getSelectpoint() {
        if (selectpoint == null) {
            return "0.9 0.9 0.1 1";
        } else {
            return selectpoint;
        }
    }

    /**
     * Gets the value of the connect property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getConnect() {
        if (connect == null) {
            return "0.2 0.2 0.8 1";
        } else {
            return connect;
        }
    }

    /**
     * Gets the value of the contactpoint property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getContactpoint() {
        if (contactpoint == null) {
            return "0.9 0.6 0.2 1";
        } else {
            return contactpoint;
        }
    }

    /**
     * Gets the value of the contactforce property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getContactforce() {
        if (contactforce == null) {
            return "0.7 0.9 0.9 1";
        } else {
            return contactforce;
        }
    }

    /**
     * Gets the value of the contactfriction property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getContactfriction() {
        if (contactfriction == null) {
            return "0.9 0.8 0.4 1";
        } else {
            return contactfriction;
        }
    }

    /**
     * Gets the value of the contacttorque property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getContacttorque() {
        if (contacttorque == null) {
            return "0.9 0.7 0.9 1";
        } else {
            return contacttorque;
        }
    }

    /**
     * Gets the value of the contactgap property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getContactgap() {
        if (contactgap == null) {
            return "0.5 0.8 0.9 1";
        } else {
            return contactgap;
        }
    }

    /**
     * Gets the value of the rangefinder property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getRangefinder() {
        if (rangefinder == null) {
            return "1 1 0.1 1";
        } else {
            return rangefinder;
        }
    }

    /**
     * Gets the value of the constraint property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getConstraint() {
        if (constraint == null) {
            return "0.9 0 0 1";
        } else {
            return constraint;
        }
    }

    /**
     * Gets the value of the slidercrank property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getSlidercrank() {
        if (slidercrank == null) {
            return "0.5 0.3 0.8 1";
        } else {
            return slidercrank;
        }
    }

    /**
     * Gets the value of the crankbroken property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getCrankbroken() {
        if (crankbroken == null) {
            return "0.9 0 0 1";
        } else {
            return crankbroken;
        }
    }

    public void addVetoableChangeListener(final VetoableChangeListener vetoableChangeListener) {
        this.vetoableChange__Support.addVetoableChangeListener(vetoableChangeListener);
    }

    public void removeVetoableChangeListener(final VetoableChangeListener vetoableChangeListener) {
        this.vetoableChange__Support.removeVetoableChangeListener(vetoableChangeListener);
    }

    public RgbaType withVetoableChangeListener(final VetoableChangeListener vetoableChangeListener) {
        addVetoableChangeListener(vetoableChangeListener);
        return this;
    }

    public void addPropertyChangeListener(final PropertyChangeListener propertyChangeListener) {
        this.propertyChange__Support.addPropertyChangeListener(propertyChangeListener);
    }

    public void removePropertyChangeListener(final PropertyChangeListener propertyChangeListener) {
        this.propertyChange__Support.removePropertyChangeListener(propertyChangeListener);
    }

    public RgbaType withPropertyChangeListener(final PropertyChangeListener propertyChangeListener) {
        addPropertyChangeListener(propertyChangeListener);
        return this;
    }

    public void setFog(final String value) {
        final String __oldValue = this.fog;
        try {
            this.vetoableChange__Support.fireVetoableChange("fog", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.fog = value;
        this.propertyChange__Support.firePropertyChange("fog", __oldValue, value);
    }

    public void setHaze(final String value) {
        final String __oldValue = this.haze;
        try {
            this.vetoableChange__Support.fireVetoableChange("haze", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.haze = value;
        this.propertyChange__Support.firePropertyChange("haze", __oldValue, value);
    }

    public void setForce(final String value) {
        final String __oldValue = this.force;
        try {
            this.vetoableChange__Support.fireVetoableChange("force", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.force = value;
        this.propertyChange__Support.firePropertyChange("force", __oldValue, value);
    }

    public void setInertia(final String value) {
        final String __oldValue = this.inertia;
        try {
            this.vetoableChange__Support.fireVetoableChange("inertia", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.inertia = value;
        this.propertyChange__Support.firePropertyChange("inertia", __oldValue, value);
    }

    public void setJoint(final String value) {
        final String __oldValue = this.joint;
        try {
            this.vetoableChange__Support.fireVetoableChange("joint", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.joint = value;
        this.propertyChange__Support.firePropertyChange("joint", __oldValue, value);
    }

    public void setActuator(final String value) {
        final String __oldValue = this.actuator;
        try {
            this.vetoableChange__Support.fireVetoableChange("actuator", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.actuator = value;
        this.propertyChange__Support.firePropertyChange("actuator", __oldValue, value);
    }

    public void setActuatornegative(final String value) {
        final String __oldValue = this.actuatornegative;
        try {
            this.vetoableChange__Support.fireVetoableChange("actuatornegative", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.actuatornegative = value;
        this.propertyChange__Support.firePropertyChange("actuatornegative", __oldValue, value);
    }

    public void setActuatorpositive(final String value) {
        final String __oldValue = this.actuatorpositive;
        try {
            this.vetoableChange__Support.fireVetoableChange("actuatorpositive", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.actuatorpositive = value;
        this.propertyChange__Support.firePropertyChange("actuatorpositive", __oldValue, value);
    }

    public void setCom(final String value) {
        final String __oldValue = this.com;
        try {
            this.vetoableChange__Support.fireVetoableChange("com", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.com = value;
        this.propertyChange__Support.firePropertyChange("com", __oldValue, value);
    }

    public void setCamera(final String value) {
        final String __oldValue = this.camera;
        try {
            this.vetoableChange__Support.fireVetoableChange("camera", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.camera = value;
        this.propertyChange__Support.firePropertyChange("camera", __oldValue, value);
    }

    public void setLight(final String value) {
        final String __oldValue = this.light;
        try {
            this.vetoableChange__Support.fireVetoableChange("light", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.light = value;
        this.propertyChange__Support.firePropertyChange("light", __oldValue, value);
    }

    public void setSelectpoint(final String value) {
        final String __oldValue = this.selectpoint;
        try {
            this.vetoableChange__Support.fireVetoableChange("selectpoint", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.selectpoint = value;
        this.propertyChange__Support.firePropertyChange("selectpoint", __oldValue, value);
    }

    public void setConnect(final String value) {
        final String __oldValue = this.connect;
        try {
            this.vetoableChange__Support.fireVetoableChange("connect", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.connect = value;
        this.propertyChange__Support.firePropertyChange("connect", __oldValue, value);
    }

    public void setContactpoint(final String value) {
        final String __oldValue = this.contactpoint;
        try {
            this.vetoableChange__Support.fireVetoableChange("contactpoint", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.contactpoint = value;
        this.propertyChange__Support.firePropertyChange("contactpoint", __oldValue, value);
    }

    public void setContactforce(final String value) {
        final String __oldValue = this.contactforce;
        try {
            this.vetoableChange__Support.fireVetoableChange("contactforce", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.contactforce = value;
        this.propertyChange__Support.firePropertyChange("contactforce", __oldValue, value);
    }

    public void setContactfriction(final String value) {
        final String __oldValue = this.contactfriction;
        try {
            this.vetoableChange__Support.fireVetoableChange("contactfriction", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.contactfriction = value;
        this.propertyChange__Support.firePropertyChange("contactfriction", __oldValue, value);
    }

    public void setContacttorque(final String value) {
        final String __oldValue = this.contacttorque;
        try {
            this.vetoableChange__Support.fireVetoableChange("contacttorque", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.contacttorque = value;
        this.propertyChange__Support.firePropertyChange("contacttorque", __oldValue, value);
    }

    public void setContactgap(final String value) {
        final String __oldValue = this.contactgap;
        try {
            this.vetoableChange__Support.fireVetoableChange("contactgap", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.contactgap = value;
        this.propertyChange__Support.firePropertyChange("contactgap", __oldValue, value);
    }

    public void setRangefinder(final String value) {
        final String __oldValue = this.rangefinder;
        try {
            this.vetoableChange__Support.fireVetoableChange("rangefinder", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.rangefinder = value;
        this.propertyChange__Support.firePropertyChange("rangefinder", __oldValue, value);
    }

    public void setConstraint(final String value) {
        final String __oldValue = this.constraint;
        try {
            this.vetoableChange__Support.fireVetoableChange("constraint", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.constraint = value;
        this.propertyChange__Support.firePropertyChange("constraint", __oldValue, value);
    }

    public void setSlidercrank(final String value) {
        final String __oldValue = this.slidercrank;
        try {
            this.vetoableChange__Support.fireVetoableChange("slidercrank", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.slidercrank = value;
        this.propertyChange__Support.firePropertyChange("slidercrank", __oldValue, value);
    }

    public void setCrankbroken(final String value) {
        final String __oldValue = this.crankbroken;
        try {
            this.vetoableChange__Support.fireVetoableChange("crankbroken", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.crankbroken = value;
        this.propertyChange__Support.firePropertyChange("crankbroken", __oldValue, value);
    }

    @Override
    public RgbaType clone() {
        final RgbaType _newObject;
        try {
            _newObject = ((RgbaType) super.clone());
        } catch (CloneNotSupportedException e) {
            throw new RuntimeException(e);
        }
        return _newObject;
    }

    @Override
    public RgbaType createCopy() {
        final RgbaType _newObject;
        try {
            _newObject = ((RgbaType) super.clone());
        } catch (CloneNotSupportedException e) {
            throw new RuntimeException(e);
        }
        _newObject.fog = this.fog;
        _newObject.haze = this.haze;
        _newObject.force = this.force;
        _newObject.inertia = this.inertia;
        _newObject.joint = this.joint;
        _newObject.actuator = this.actuator;
        _newObject.actuatornegative = this.actuatornegative;
        _newObject.actuatorpositive = this.actuatorpositive;
        _newObject.com = this.com;
        _newObject.camera = this.camera;
        _newObject.light = this.light;
        _newObject.selectpoint = this.selectpoint;
        _newObject.connect = this.connect;
        _newObject.contactpoint = this.contactpoint;
        _newObject.contactforce = this.contactforce;
        _newObject.contactfriction = this.contactfriction;
        _newObject.contacttorque = this.contacttorque;
        _newObject.contactgap = this.contactgap;
        _newObject.rangefinder = this.rangefinder;
        _newObject.constraint = this.constraint;
        _newObject.slidercrank = this.slidercrank;
        _newObject.crankbroken = this.crankbroken;
        return _newObject;
    }

    @Override
    public RgbaType createCopy(final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        final RgbaType _newObject;
        try {
            _newObject = ((RgbaType) super.clone());
        } catch (CloneNotSupportedException e) {
            throw new RuntimeException(e);
        }
        final PropertyTree fogPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("fog"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(fogPropertyTree!= null):((fogPropertyTree == null)||(!fogPropertyTree.isLeaf())))) {
            _newObject.fog = this.fog;
        }
        final PropertyTree hazePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("haze"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(hazePropertyTree!= null):((hazePropertyTree == null)||(!hazePropertyTree.isLeaf())))) {
            _newObject.haze = this.haze;
        }
        final PropertyTree forcePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("force"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(forcePropertyTree!= null):((forcePropertyTree == null)||(!forcePropertyTree.isLeaf())))) {
            _newObject.force = this.force;
        }
        final PropertyTree inertiaPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("inertia"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(inertiaPropertyTree!= null):((inertiaPropertyTree == null)||(!inertiaPropertyTree.isLeaf())))) {
            _newObject.inertia = this.inertia;
        }
        final PropertyTree jointPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("joint"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(jointPropertyTree!= null):((jointPropertyTree == null)||(!jointPropertyTree.isLeaf())))) {
            _newObject.joint = this.joint;
        }
        final PropertyTree actuatorPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("actuator"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(actuatorPropertyTree!= null):((actuatorPropertyTree == null)||(!actuatorPropertyTree.isLeaf())))) {
            _newObject.actuator = this.actuator;
        }
        final PropertyTree actuatornegativePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("actuatornegative"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(actuatornegativePropertyTree!= null):((actuatornegativePropertyTree == null)||(!actuatornegativePropertyTree.isLeaf())))) {
            _newObject.actuatornegative = this.actuatornegative;
        }
        final PropertyTree actuatorpositivePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("actuatorpositive"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(actuatorpositivePropertyTree!= null):((actuatorpositivePropertyTree == null)||(!actuatorpositivePropertyTree.isLeaf())))) {
            _newObject.actuatorpositive = this.actuatorpositive;
        }
        final PropertyTree comPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("com"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(comPropertyTree!= null):((comPropertyTree == null)||(!comPropertyTree.isLeaf())))) {
            _newObject.com = this.com;
        }
        final PropertyTree cameraPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("camera"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(cameraPropertyTree!= null):((cameraPropertyTree == null)||(!cameraPropertyTree.isLeaf())))) {
            _newObject.camera = this.camera;
        }
        final PropertyTree lightPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("light"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(lightPropertyTree!= null):((lightPropertyTree == null)||(!lightPropertyTree.isLeaf())))) {
            _newObject.light = this.light;
        }
        final PropertyTree selectpointPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("selectpoint"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(selectpointPropertyTree!= null):((selectpointPropertyTree == null)||(!selectpointPropertyTree.isLeaf())))) {
            _newObject.selectpoint = this.selectpoint;
        }
        final PropertyTree connectPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("connect"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(connectPropertyTree!= null):((connectPropertyTree == null)||(!connectPropertyTree.isLeaf())))) {
            _newObject.connect = this.connect;
        }
        final PropertyTree contactpointPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("contactpoint"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(contactpointPropertyTree!= null):((contactpointPropertyTree == null)||(!contactpointPropertyTree.isLeaf())))) {
            _newObject.contactpoint = this.contactpoint;
        }
        final PropertyTree contactforcePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("contactforce"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(contactforcePropertyTree!= null):((contactforcePropertyTree == null)||(!contactforcePropertyTree.isLeaf())))) {
            _newObject.contactforce = this.contactforce;
        }
        final PropertyTree contactfrictionPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("contactfriction"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(contactfrictionPropertyTree!= null):((contactfrictionPropertyTree == null)||(!contactfrictionPropertyTree.isLeaf())))) {
            _newObject.contactfriction = this.contactfriction;
        }
        final PropertyTree contacttorquePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("contacttorque"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(contacttorquePropertyTree!= null):((contacttorquePropertyTree == null)||(!contacttorquePropertyTree.isLeaf())))) {
            _newObject.contacttorque = this.contacttorque;
        }
        final PropertyTree contactgapPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("contactgap"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(contactgapPropertyTree!= null):((contactgapPropertyTree == null)||(!contactgapPropertyTree.isLeaf())))) {
            _newObject.contactgap = this.contactgap;
        }
        final PropertyTree rangefinderPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("rangefinder"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(rangefinderPropertyTree!= null):((rangefinderPropertyTree == null)||(!rangefinderPropertyTree.isLeaf())))) {
            _newObject.rangefinder = this.rangefinder;
        }
        final PropertyTree constraintPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("constraint"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(constraintPropertyTree!= null):((constraintPropertyTree == null)||(!constraintPropertyTree.isLeaf())))) {
            _newObject.constraint = this.constraint;
        }
        final PropertyTree slidercrankPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("slidercrank"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(slidercrankPropertyTree!= null):((slidercrankPropertyTree == null)||(!slidercrankPropertyTree.isLeaf())))) {
            _newObject.slidercrank = this.slidercrank;
        }
        final PropertyTree crankbrokenPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("crankbroken"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(crankbrokenPropertyTree!= null):((crankbrokenPropertyTree == null)||(!crankbrokenPropertyTree.isLeaf())))) {
            _newObject.crankbroken = this.crankbroken;
        }
        return _newObject;
    }

    @Override
    public RgbaType copyExcept(final PropertyTree _propertyTree) {
        return createCopy(_propertyTree, PropertyTreeUse.EXCLUDE);
    }

    @Override
    public RgbaType copyOnly(final PropertyTree _propertyTree) {
        return createCopy(_propertyTree, PropertyTreeUse.INCLUDE);
    }

    /**
     * Copies all state of this object to a builder. This method is used by the {@link #copyOf} method and should not be called directly by client code.
     * 
     * @param _other
     *     A builder instance to which the state of this object will be copied.
     */
    public<_B >void copyTo(final RgbaType.Builder<_B> _other) {
        _other.fog = this.fog;
        _other.haze = this.haze;
        _other.force = this.force;
        _other.inertia = this.inertia;
        _other.joint = this.joint;
        _other.actuator = this.actuator;
        _other.actuatornegative = this.actuatornegative;
        _other.actuatorpositive = this.actuatorpositive;
        _other.com = this.com;
        _other.camera = this.camera;
        _other.light = this.light;
        _other.selectpoint = this.selectpoint;
        _other.connect = this.connect;
        _other.contactpoint = this.contactpoint;
        _other.contactforce = this.contactforce;
        _other.contactfriction = this.contactfriction;
        _other.contacttorque = this.contacttorque;
        _other.contactgap = this.contactgap;
        _other.rangefinder = this.rangefinder;
        _other.constraint = this.constraint;
        _other.slidercrank = this.slidercrank;
        _other.crankbroken = this.crankbroken;
    }

    public<_B >RgbaType.Builder<_B> newCopyBuilder(final _B _parentBuilder) {
        return new RgbaType.Builder<_B>(_parentBuilder, this, true);
    }

    public RgbaType.Builder<Void> newCopyBuilder() {
        return newCopyBuilder(null);
    }

    public static RgbaType.Builder<Void> builder() {
        return new RgbaType.Builder<Void>(null, null, false);
    }

    public static<_B >RgbaType.Builder<_B> copyOf(final RgbaType _other) {
        final RgbaType.Builder<_B> _newBuilder = new RgbaType.Builder<_B>(null, null, false);
        _other.copyTo(_newBuilder);
        return _newBuilder;
    }

    /**
     * Copies all state of this object to a builder. This method is used by the {@link #copyOf} method and should not be called directly by client code.
     * 
     * @param _other
     *     A builder instance to which the state of this object will be copied.
     */
    public<_B >void copyTo(final RgbaType.Builder<_B> _other, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        final PropertyTree fogPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("fog"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(fogPropertyTree!= null):((fogPropertyTree == null)||(!fogPropertyTree.isLeaf())))) {
            _other.fog = this.fog;
        }
        final PropertyTree hazePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("haze"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(hazePropertyTree!= null):((hazePropertyTree == null)||(!hazePropertyTree.isLeaf())))) {
            _other.haze = this.haze;
        }
        final PropertyTree forcePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("force"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(forcePropertyTree!= null):((forcePropertyTree == null)||(!forcePropertyTree.isLeaf())))) {
            _other.force = this.force;
        }
        final PropertyTree inertiaPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("inertia"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(inertiaPropertyTree!= null):((inertiaPropertyTree == null)||(!inertiaPropertyTree.isLeaf())))) {
            _other.inertia = this.inertia;
        }
        final PropertyTree jointPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("joint"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(jointPropertyTree!= null):((jointPropertyTree == null)||(!jointPropertyTree.isLeaf())))) {
            _other.joint = this.joint;
        }
        final PropertyTree actuatorPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("actuator"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(actuatorPropertyTree!= null):((actuatorPropertyTree == null)||(!actuatorPropertyTree.isLeaf())))) {
            _other.actuator = this.actuator;
        }
        final PropertyTree actuatornegativePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("actuatornegative"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(actuatornegativePropertyTree!= null):((actuatornegativePropertyTree == null)||(!actuatornegativePropertyTree.isLeaf())))) {
            _other.actuatornegative = this.actuatornegative;
        }
        final PropertyTree actuatorpositivePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("actuatorpositive"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(actuatorpositivePropertyTree!= null):((actuatorpositivePropertyTree == null)||(!actuatorpositivePropertyTree.isLeaf())))) {
            _other.actuatorpositive = this.actuatorpositive;
        }
        final PropertyTree comPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("com"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(comPropertyTree!= null):((comPropertyTree == null)||(!comPropertyTree.isLeaf())))) {
            _other.com = this.com;
        }
        final PropertyTree cameraPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("camera"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(cameraPropertyTree!= null):((cameraPropertyTree == null)||(!cameraPropertyTree.isLeaf())))) {
            _other.camera = this.camera;
        }
        final PropertyTree lightPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("light"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(lightPropertyTree!= null):((lightPropertyTree == null)||(!lightPropertyTree.isLeaf())))) {
            _other.light = this.light;
        }
        final PropertyTree selectpointPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("selectpoint"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(selectpointPropertyTree!= null):((selectpointPropertyTree == null)||(!selectpointPropertyTree.isLeaf())))) {
            _other.selectpoint = this.selectpoint;
        }
        final PropertyTree connectPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("connect"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(connectPropertyTree!= null):((connectPropertyTree == null)||(!connectPropertyTree.isLeaf())))) {
            _other.connect = this.connect;
        }
        final PropertyTree contactpointPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("contactpoint"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(contactpointPropertyTree!= null):((contactpointPropertyTree == null)||(!contactpointPropertyTree.isLeaf())))) {
            _other.contactpoint = this.contactpoint;
        }
        final PropertyTree contactforcePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("contactforce"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(contactforcePropertyTree!= null):((contactforcePropertyTree == null)||(!contactforcePropertyTree.isLeaf())))) {
            _other.contactforce = this.contactforce;
        }
        final PropertyTree contactfrictionPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("contactfriction"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(contactfrictionPropertyTree!= null):((contactfrictionPropertyTree == null)||(!contactfrictionPropertyTree.isLeaf())))) {
            _other.contactfriction = this.contactfriction;
        }
        final PropertyTree contacttorquePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("contacttorque"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(contacttorquePropertyTree!= null):((contacttorquePropertyTree == null)||(!contacttorquePropertyTree.isLeaf())))) {
            _other.contacttorque = this.contacttorque;
        }
        final PropertyTree contactgapPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("contactgap"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(contactgapPropertyTree!= null):((contactgapPropertyTree == null)||(!contactgapPropertyTree.isLeaf())))) {
            _other.contactgap = this.contactgap;
        }
        final PropertyTree rangefinderPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("rangefinder"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(rangefinderPropertyTree!= null):((rangefinderPropertyTree == null)||(!rangefinderPropertyTree.isLeaf())))) {
            _other.rangefinder = this.rangefinder;
        }
        final PropertyTree constraintPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("constraint"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(constraintPropertyTree!= null):((constraintPropertyTree == null)||(!constraintPropertyTree.isLeaf())))) {
            _other.constraint = this.constraint;
        }
        final PropertyTree slidercrankPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("slidercrank"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(slidercrankPropertyTree!= null):((slidercrankPropertyTree == null)||(!slidercrankPropertyTree.isLeaf())))) {
            _other.slidercrank = this.slidercrank;
        }
        final PropertyTree crankbrokenPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("crankbroken"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(crankbrokenPropertyTree!= null):((crankbrokenPropertyTree == null)||(!crankbrokenPropertyTree.isLeaf())))) {
            _other.crankbroken = this.crankbroken;
        }
    }

    public<_B >RgbaType.Builder<_B> newCopyBuilder(final _B _parentBuilder, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        return new RgbaType.Builder<_B>(_parentBuilder, this, true, _propertyTree, _propertyTreeUse);
    }

    public RgbaType.Builder<Void> newCopyBuilder(final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        return newCopyBuilder(null, _propertyTree, _propertyTreeUse);
    }

    public static<_B >RgbaType.Builder<_B> copyOf(final RgbaType _other, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        final RgbaType.Builder<_B> _newBuilder = new RgbaType.Builder<_B>(null, null, false);
        _other.copyTo(_newBuilder, _propertyTree, _propertyTreeUse);
        return _newBuilder;
    }

    public static RgbaType.Builder<Void> copyExcept(final RgbaType _other, final PropertyTree _propertyTree) {
        return copyOf(_other, _propertyTree, PropertyTreeUse.EXCLUDE);
    }

    public static RgbaType.Builder<Void> copyOnly(final RgbaType _other, final PropertyTree _propertyTree) {
        return copyOf(_other, _propertyTree, PropertyTreeUse.INCLUDE);
    }

    public RgbaType visit(final PropertyVisitor _visitor_) {
        _visitor_.visit(this);
        return this;
    }

    public static class Builder<_B >implements Buildable
    {

        protected final _B _parentBuilder;
        private String fog;
        private String haze;
        private String force;
        private String inertia;
        private String joint;
        private String actuator;
        private String actuatornegative;
        private String actuatorpositive;
        private String com;
        private String camera;
        private String light;
        private String selectpoint;
        private String connect;
        private String contactpoint;
        private String contactforce;
        private String contactfriction;
        private String contacttorque;
        private String contactgap;
        private String rangefinder;
        private String constraint;
        private String slidercrank;
        private String crankbroken;

        public Builder(final _B _parentBuilder, final RgbaType _other, final boolean _copy) {
            this._parentBuilder = _parentBuilder;
            if (_other!= null) {
                this.fog = _other.fog;
                this.haze = _other.haze;
                this.force = _other.force;
                this.inertia = _other.inertia;
                this.joint = _other.joint;
                this.actuator = _other.actuator;
                this.actuatornegative = _other.actuatornegative;
                this.actuatorpositive = _other.actuatorpositive;
                this.com = _other.com;
                this.camera = _other.camera;
                this.light = _other.light;
                this.selectpoint = _other.selectpoint;
                this.connect = _other.connect;
                this.contactpoint = _other.contactpoint;
                this.contactforce = _other.contactforce;
                this.contactfriction = _other.contactfriction;
                this.contacttorque = _other.contacttorque;
                this.contactgap = _other.contactgap;
                this.rangefinder = _other.rangefinder;
                this.constraint = _other.constraint;
                this.slidercrank = _other.slidercrank;
                this.crankbroken = _other.crankbroken;
            }
        }

        public Builder(final _B _parentBuilder, final RgbaType _other, final boolean _copy, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
            this._parentBuilder = _parentBuilder;
            if (_other!= null) {
                final PropertyTree fogPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("fog"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(fogPropertyTree!= null):((fogPropertyTree == null)||(!fogPropertyTree.isLeaf())))) {
                    this.fog = _other.fog;
                }
                final PropertyTree hazePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("haze"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(hazePropertyTree!= null):((hazePropertyTree == null)||(!hazePropertyTree.isLeaf())))) {
                    this.haze = _other.haze;
                }
                final PropertyTree forcePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("force"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(forcePropertyTree!= null):((forcePropertyTree == null)||(!forcePropertyTree.isLeaf())))) {
                    this.force = _other.force;
                }
                final PropertyTree inertiaPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("inertia"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(inertiaPropertyTree!= null):((inertiaPropertyTree == null)||(!inertiaPropertyTree.isLeaf())))) {
                    this.inertia = _other.inertia;
                }
                final PropertyTree jointPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("joint"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(jointPropertyTree!= null):((jointPropertyTree == null)||(!jointPropertyTree.isLeaf())))) {
                    this.joint = _other.joint;
                }
                final PropertyTree actuatorPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("actuator"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(actuatorPropertyTree!= null):((actuatorPropertyTree == null)||(!actuatorPropertyTree.isLeaf())))) {
                    this.actuator = _other.actuator;
                }
                final PropertyTree actuatornegativePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("actuatornegative"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(actuatornegativePropertyTree!= null):((actuatornegativePropertyTree == null)||(!actuatornegativePropertyTree.isLeaf())))) {
                    this.actuatornegative = _other.actuatornegative;
                }
                final PropertyTree actuatorpositivePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("actuatorpositive"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(actuatorpositivePropertyTree!= null):((actuatorpositivePropertyTree == null)||(!actuatorpositivePropertyTree.isLeaf())))) {
                    this.actuatorpositive = _other.actuatorpositive;
                }
                final PropertyTree comPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("com"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(comPropertyTree!= null):((comPropertyTree == null)||(!comPropertyTree.isLeaf())))) {
                    this.com = _other.com;
                }
                final PropertyTree cameraPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("camera"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(cameraPropertyTree!= null):((cameraPropertyTree == null)||(!cameraPropertyTree.isLeaf())))) {
                    this.camera = _other.camera;
                }
                final PropertyTree lightPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("light"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(lightPropertyTree!= null):((lightPropertyTree == null)||(!lightPropertyTree.isLeaf())))) {
                    this.light = _other.light;
                }
                final PropertyTree selectpointPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("selectpoint"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(selectpointPropertyTree!= null):((selectpointPropertyTree == null)||(!selectpointPropertyTree.isLeaf())))) {
                    this.selectpoint = _other.selectpoint;
                }
                final PropertyTree connectPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("connect"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(connectPropertyTree!= null):((connectPropertyTree == null)||(!connectPropertyTree.isLeaf())))) {
                    this.connect = _other.connect;
                }
                final PropertyTree contactpointPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("contactpoint"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(contactpointPropertyTree!= null):((contactpointPropertyTree == null)||(!contactpointPropertyTree.isLeaf())))) {
                    this.contactpoint = _other.contactpoint;
                }
                final PropertyTree contactforcePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("contactforce"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(contactforcePropertyTree!= null):((contactforcePropertyTree == null)||(!contactforcePropertyTree.isLeaf())))) {
                    this.contactforce = _other.contactforce;
                }
                final PropertyTree contactfrictionPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("contactfriction"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(contactfrictionPropertyTree!= null):((contactfrictionPropertyTree == null)||(!contactfrictionPropertyTree.isLeaf())))) {
                    this.contactfriction = _other.contactfriction;
                }
                final PropertyTree contacttorquePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("contacttorque"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(contacttorquePropertyTree!= null):((contacttorquePropertyTree == null)||(!contacttorquePropertyTree.isLeaf())))) {
                    this.contacttorque = _other.contacttorque;
                }
                final PropertyTree contactgapPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("contactgap"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(contactgapPropertyTree!= null):((contactgapPropertyTree == null)||(!contactgapPropertyTree.isLeaf())))) {
                    this.contactgap = _other.contactgap;
                }
                final PropertyTree rangefinderPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("rangefinder"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(rangefinderPropertyTree!= null):((rangefinderPropertyTree == null)||(!rangefinderPropertyTree.isLeaf())))) {
                    this.rangefinder = _other.rangefinder;
                }
                final PropertyTree constraintPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("constraint"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(constraintPropertyTree!= null):((constraintPropertyTree == null)||(!constraintPropertyTree.isLeaf())))) {
                    this.constraint = _other.constraint;
                }
                final PropertyTree slidercrankPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("slidercrank"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(slidercrankPropertyTree!= null):((slidercrankPropertyTree == null)||(!slidercrankPropertyTree.isLeaf())))) {
                    this.slidercrank = _other.slidercrank;
                }
                final PropertyTree crankbrokenPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("crankbroken"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(crankbrokenPropertyTree!= null):((crankbrokenPropertyTree == null)||(!crankbrokenPropertyTree.isLeaf())))) {
                    this.crankbroken = _other.crankbroken;
                }
            }
        }

        public _B end() {
            return this._parentBuilder;
        }

        protected<_P extends RgbaType >_P init(final _P _product) {
            _product.fog = this.fog;
            _product.haze = this.haze;
            _product.force = this.force;
            _product.inertia = this.inertia;
            _product.joint = this.joint;
            _product.actuator = this.actuator;
            _product.actuatornegative = this.actuatornegative;
            _product.actuatorpositive = this.actuatorpositive;
            _product.com = this.com;
            _product.camera = this.camera;
            _product.light = this.light;
            _product.selectpoint = this.selectpoint;
            _product.connect = this.connect;
            _product.contactpoint = this.contactpoint;
            _product.contactforce = this.contactforce;
            _product.contactfriction = this.contactfriction;
            _product.contacttorque = this.contacttorque;
            _product.contactgap = this.contactgap;
            _product.rangefinder = this.rangefinder;
            _product.constraint = this.constraint;
            _product.slidercrank = this.slidercrank;
            _product.crankbroken = this.crankbroken;
            return _product;
        }

        /**
         * Sets the new value of "fog" (any previous value will be replaced)
         * 
         * @param fog
         *     New value of the "fog" property.
         */
        public RgbaType.Builder<_B> withFog(final String fog) {
            this.fog = fog;
            return this;
        }

        /**
         * Sets the new value of "haze" (any previous value will be replaced)
         * 
         * @param haze
         *     New value of the "haze" property.
         */
        public RgbaType.Builder<_B> withHaze(final String haze) {
            this.haze = haze;
            return this;
        }

        /**
         * Sets the new value of "force" (any previous value will be replaced)
         * 
         * @param force
         *     New value of the "force" property.
         */
        public RgbaType.Builder<_B> withForce(final String force) {
            this.force = force;
            return this;
        }

        /**
         * Sets the new value of "inertia" (any previous value will be replaced)
         * 
         * @param inertia
         *     New value of the "inertia" property.
         */
        public RgbaType.Builder<_B> withInertia(final String inertia) {
            this.inertia = inertia;
            return this;
        }

        /**
         * Sets the new value of "joint" (any previous value will be replaced)
         * 
         * @param joint
         *     New value of the "joint" property.
         */
        public RgbaType.Builder<_B> withJoint(final String joint) {
            this.joint = joint;
            return this;
        }

        /**
         * Sets the new value of "actuator" (any previous value will be replaced)
         * 
         * @param actuator
         *     New value of the "actuator" property.
         */
        public RgbaType.Builder<_B> withActuator(final String actuator) {
            this.actuator = actuator;
            return this;
        }

        /**
         * Sets the new value of "actuatornegative" (any previous value will be replaced)
         * 
         * @param actuatornegative
         *     New value of the "actuatornegative" property.
         */
        public RgbaType.Builder<_B> withActuatornegative(final String actuatornegative) {
            this.actuatornegative = actuatornegative;
            return this;
        }

        /**
         * Sets the new value of "actuatorpositive" (any previous value will be replaced)
         * 
         * @param actuatorpositive
         *     New value of the "actuatorpositive" property.
         */
        public RgbaType.Builder<_B> withActuatorpositive(final String actuatorpositive) {
            this.actuatorpositive = actuatorpositive;
            return this;
        }

        /**
         * Sets the new value of "com" (any previous value will be replaced)
         * 
         * @param com
         *     New value of the "com" property.
         */
        public RgbaType.Builder<_B> withCom(final String com) {
            this.com = com;
            return this;
        }

        /**
         * Sets the new value of "camera" (any previous value will be replaced)
         * 
         * @param camera
         *     New value of the "camera" property.
         */
        public RgbaType.Builder<_B> withCamera(final String camera) {
            this.camera = camera;
            return this;
        }

        /**
         * Sets the new value of "light" (any previous value will be replaced)
         * 
         * @param light
         *     New value of the "light" property.
         */
        public RgbaType.Builder<_B> withLight(final String light) {
            this.light = light;
            return this;
        }

        /**
         * Sets the new value of "selectpoint" (any previous value will be replaced)
         * 
         * @param selectpoint
         *     New value of the "selectpoint" property.
         */
        public RgbaType.Builder<_B> withSelectpoint(final String selectpoint) {
            this.selectpoint = selectpoint;
            return this;
        }

        /**
         * Sets the new value of "connect" (any previous value will be replaced)
         * 
         * @param connect
         *     New value of the "connect" property.
         */
        public RgbaType.Builder<_B> withConnect(final String connect) {
            this.connect = connect;
            return this;
        }

        /**
         * Sets the new value of "contactpoint" (any previous value will be replaced)
         * 
         * @param contactpoint
         *     New value of the "contactpoint" property.
         */
        public RgbaType.Builder<_B> withContactpoint(final String contactpoint) {
            this.contactpoint = contactpoint;
            return this;
        }

        /**
         * Sets the new value of "contactforce" (any previous value will be replaced)
         * 
         * @param contactforce
         *     New value of the "contactforce" property.
         */
        public RgbaType.Builder<_B> withContactforce(final String contactforce) {
            this.contactforce = contactforce;
            return this;
        }

        /**
         * Sets the new value of "contactfriction" (any previous value will be replaced)
         * 
         * @param contactfriction
         *     New value of the "contactfriction" property.
         */
        public RgbaType.Builder<_B> withContactfriction(final String contactfriction) {
            this.contactfriction = contactfriction;
            return this;
        }

        /**
         * Sets the new value of "contacttorque" (any previous value will be replaced)
         * 
         * @param contacttorque
         *     New value of the "contacttorque" property.
         */
        public RgbaType.Builder<_B> withContacttorque(final String contacttorque) {
            this.contacttorque = contacttorque;
            return this;
        }

        /**
         * Sets the new value of "contactgap" (any previous value will be replaced)
         * 
         * @param contactgap
         *     New value of the "contactgap" property.
         */
        public RgbaType.Builder<_B> withContactgap(final String contactgap) {
            this.contactgap = contactgap;
            return this;
        }

        /**
         * Sets the new value of "rangefinder" (any previous value will be replaced)
         * 
         * @param rangefinder
         *     New value of the "rangefinder" property.
         */
        public RgbaType.Builder<_B> withRangefinder(final String rangefinder) {
            this.rangefinder = rangefinder;
            return this;
        }

        /**
         * Sets the new value of "constraint" (any previous value will be replaced)
         * 
         * @param constraint
         *     New value of the "constraint" property.
         */
        public RgbaType.Builder<_B> withConstraint(final String constraint) {
            this.constraint = constraint;
            return this;
        }

        /**
         * Sets the new value of "slidercrank" (any previous value will be replaced)
         * 
         * @param slidercrank
         *     New value of the "slidercrank" property.
         */
        public RgbaType.Builder<_B> withSlidercrank(final String slidercrank) {
            this.slidercrank = slidercrank;
            return this;
        }

        /**
         * Sets the new value of "crankbroken" (any previous value will be replaced)
         * 
         * @param crankbroken
         *     New value of the "crankbroken" property.
         */
        public RgbaType.Builder<_B> withCrankbroken(final String crankbroken) {
            this.crankbroken = crankbroken;
            return this;
        }

        @Override
        public RgbaType build() {
            return this.init(new RgbaType());
        }

        public RgbaType.Builder<_B> copyOf(final RgbaType _other) {
            _other.copyTo(this);
            return this;
        }

        public RgbaType.Builder<_B> copyOf(final RgbaType.Builder _other) {
            return copyOf(_other.build());
        }

    }

    public static class PropInfo {

        public final static transient String FOG = "fog";
        public final static transient String HAZE = "haze";
        public final static transient String FORCE = "force";
        public final static transient String INERTIA = "inertia";
        public final static transient String JOINT = "joint";
        public final static transient String ACTUATOR = "actuator";
        public final static transient String ACTUATORNEGATIVE = "actuatornegative";
        public final static transient String ACTUATORPOSITIVE = "actuatorpositive";
        public final static transient String COM = "com";
        public final static transient String CAMERA = "camera";
        public final static transient String LIGHT = "light";
        public final static transient String SELECTPOINT = "selectpoint";
        public final static transient String CONNECT = "connect";
        public final static transient String CONTACTPOINT = "contactpoint";
        public final static transient String CONTACTFORCE = "contactforce";
        public final static transient String CONTACTFRICTION = "contactfriction";
        public final static transient String CONTACTTORQUE = "contacttorque";
        public final static transient String CONTACTGAP = "contactgap";
        public final static transient String RANGEFINDER = "rangefinder";
        public final static transient String CONSTRAINT = "constraint";
        public final static transient String SLIDERCRANK = "slidercrank";
        public final static transient String CRANKBROKEN = "crankbroken";

    }

    public static class Select
        extends RgbaType.Selector<RgbaType.Select, Void>
    {


        Select() {
            super(null, null, null);
        }

        public static RgbaType.Select _root() {
            return new RgbaType.Select();
        }

    }

    public static class Selector<TRoot extends com.kscs.util.jaxb.Selector<TRoot, ?> , TParent >
        extends com.kscs.util.jaxb.Selector<TRoot, TParent>
    {

        private com.kscs.util.jaxb.Selector<TRoot, RgbaType.Selector<TRoot, TParent>> fog = null;
        private com.kscs.util.jaxb.Selector<TRoot, RgbaType.Selector<TRoot, TParent>> haze = null;
        private com.kscs.util.jaxb.Selector<TRoot, RgbaType.Selector<TRoot, TParent>> force = null;
        private com.kscs.util.jaxb.Selector<TRoot, RgbaType.Selector<TRoot, TParent>> inertia = null;
        private com.kscs.util.jaxb.Selector<TRoot, RgbaType.Selector<TRoot, TParent>> joint = null;
        private com.kscs.util.jaxb.Selector<TRoot, RgbaType.Selector<TRoot, TParent>> actuator = null;
        private com.kscs.util.jaxb.Selector<TRoot, RgbaType.Selector<TRoot, TParent>> actuatornegative = null;
        private com.kscs.util.jaxb.Selector<TRoot, RgbaType.Selector<TRoot, TParent>> actuatorpositive = null;
        private com.kscs.util.jaxb.Selector<TRoot, RgbaType.Selector<TRoot, TParent>> com = null;
        private com.kscs.util.jaxb.Selector<TRoot, RgbaType.Selector<TRoot, TParent>> camera = null;
        private com.kscs.util.jaxb.Selector<TRoot, RgbaType.Selector<TRoot, TParent>> light = null;
        private com.kscs.util.jaxb.Selector<TRoot, RgbaType.Selector<TRoot, TParent>> selectpoint = null;
        private com.kscs.util.jaxb.Selector<TRoot, RgbaType.Selector<TRoot, TParent>> connect = null;
        private com.kscs.util.jaxb.Selector<TRoot, RgbaType.Selector<TRoot, TParent>> contactpoint = null;
        private com.kscs.util.jaxb.Selector<TRoot, RgbaType.Selector<TRoot, TParent>> contactforce = null;
        private com.kscs.util.jaxb.Selector<TRoot, RgbaType.Selector<TRoot, TParent>> contactfriction = null;
        private com.kscs.util.jaxb.Selector<TRoot, RgbaType.Selector<TRoot, TParent>> contacttorque = null;
        private com.kscs.util.jaxb.Selector<TRoot, RgbaType.Selector<TRoot, TParent>> contactgap = null;
        private com.kscs.util.jaxb.Selector<TRoot, RgbaType.Selector<TRoot, TParent>> rangefinder = null;
        private com.kscs.util.jaxb.Selector<TRoot, RgbaType.Selector<TRoot, TParent>> constraint = null;
        private com.kscs.util.jaxb.Selector<TRoot, RgbaType.Selector<TRoot, TParent>> slidercrank = null;
        private com.kscs.util.jaxb.Selector<TRoot, RgbaType.Selector<TRoot, TParent>> crankbroken = null;

        public Selector(final TRoot root, final TParent parent, final String propertyName) {
            super(root, parent, propertyName);
        }

        @Override
        public Map<String, PropertyTree> buildChildren() {
            final Map<String, PropertyTree> products = new HashMap<String, PropertyTree>();
            products.putAll(super.buildChildren());
            if (this.fog!= null) {
                products.put("fog", this.fog.init());
            }
            if (this.haze!= null) {
                products.put("haze", this.haze.init());
            }
            if (this.force!= null) {
                products.put("force", this.force.init());
            }
            if (this.inertia!= null) {
                products.put("inertia", this.inertia.init());
            }
            if (this.joint!= null) {
                products.put("joint", this.joint.init());
            }
            if (this.actuator!= null) {
                products.put("actuator", this.actuator.init());
            }
            if (this.actuatornegative!= null) {
                products.put("actuatornegative", this.actuatornegative.init());
            }
            if (this.actuatorpositive!= null) {
                products.put("actuatorpositive", this.actuatorpositive.init());
            }
            if (this.com!= null) {
                products.put("com", this.com.init());
            }
            if (this.camera!= null) {
                products.put("camera", this.camera.init());
            }
            if (this.light!= null) {
                products.put("light", this.light.init());
            }
            if (this.selectpoint!= null) {
                products.put("selectpoint", this.selectpoint.init());
            }
            if (this.connect!= null) {
                products.put("connect", this.connect.init());
            }
            if (this.contactpoint!= null) {
                products.put("contactpoint", this.contactpoint.init());
            }
            if (this.contactforce!= null) {
                products.put("contactforce", this.contactforce.init());
            }
            if (this.contactfriction!= null) {
                products.put("contactfriction", this.contactfriction.init());
            }
            if (this.contacttorque!= null) {
                products.put("contacttorque", this.contacttorque.init());
            }
            if (this.contactgap!= null) {
                products.put("contactgap", this.contactgap.init());
            }
            if (this.rangefinder!= null) {
                products.put("rangefinder", this.rangefinder.init());
            }
            if (this.constraint!= null) {
                products.put("constraint", this.constraint.init());
            }
            if (this.slidercrank!= null) {
                products.put("slidercrank", this.slidercrank.init());
            }
            if (this.crankbroken!= null) {
                products.put("crankbroken", this.crankbroken.init());
            }
            return products;
        }

        public com.kscs.util.jaxb.Selector<TRoot, RgbaType.Selector<TRoot, TParent>> fog() {
            return ((this.fog == null)?this.fog = new com.kscs.util.jaxb.Selector<TRoot, RgbaType.Selector<TRoot, TParent>>(this._root, this, "fog"):this.fog);
        }

        public com.kscs.util.jaxb.Selector<TRoot, RgbaType.Selector<TRoot, TParent>> haze() {
            return ((this.haze == null)?this.haze = new com.kscs.util.jaxb.Selector<TRoot, RgbaType.Selector<TRoot, TParent>>(this._root, this, "haze"):this.haze);
        }

        public com.kscs.util.jaxb.Selector<TRoot, RgbaType.Selector<TRoot, TParent>> force() {
            return ((this.force == null)?this.force = new com.kscs.util.jaxb.Selector<TRoot, RgbaType.Selector<TRoot, TParent>>(this._root, this, "force"):this.force);
        }

        public com.kscs.util.jaxb.Selector<TRoot, RgbaType.Selector<TRoot, TParent>> inertia() {
            return ((this.inertia == null)?this.inertia = new com.kscs.util.jaxb.Selector<TRoot, RgbaType.Selector<TRoot, TParent>>(this._root, this, "inertia"):this.inertia);
        }

        public com.kscs.util.jaxb.Selector<TRoot, RgbaType.Selector<TRoot, TParent>> joint() {
            return ((this.joint == null)?this.joint = new com.kscs.util.jaxb.Selector<TRoot, RgbaType.Selector<TRoot, TParent>>(this._root, this, "joint"):this.joint);
        }

        public com.kscs.util.jaxb.Selector<TRoot, RgbaType.Selector<TRoot, TParent>> actuator() {
            return ((this.actuator == null)?this.actuator = new com.kscs.util.jaxb.Selector<TRoot, RgbaType.Selector<TRoot, TParent>>(this._root, this, "actuator"):this.actuator);
        }

        public com.kscs.util.jaxb.Selector<TRoot, RgbaType.Selector<TRoot, TParent>> actuatornegative() {
            return ((this.actuatornegative == null)?this.actuatornegative = new com.kscs.util.jaxb.Selector<TRoot, RgbaType.Selector<TRoot, TParent>>(this._root, this, "actuatornegative"):this.actuatornegative);
        }

        public com.kscs.util.jaxb.Selector<TRoot, RgbaType.Selector<TRoot, TParent>> actuatorpositive() {
            return ((this.actuatorpositive == null)?this.actuatorpositive = new com.kscs.util.jaxb.Selector<TRoot, RgbaType.Selector<TRoot, TParent>>(this._root, this, "actuatorpositive"):this.actuatorpositive);
        }

        public com.kscs.util.jaxb.Selector<TRoot, RgbaType.Selector<TRoot, TParent>> com() {
            return ((this.com == null)?this.com = new com.kscs.util.jaxb.Selector<TRoot, RgbaType.Selector<TRoot, TParent>>(this._root, this, "com"):this.com);
        }

        public com.kscs.util.jaxb.Selector<TRoot, RgbaType.Selector<TRoot, TParent>> camera() {
            return ((this.camera == null)?this.camera = new com.kscs.util.jaxb.Selector<TRoot, RgbaType.Selector<TRoot, TParent>>(this._root, this, "camera"):this.camera);
        }

        public com.kscs.util.jaxb.Selector<TRoot, RgbaType.Selector<TRoot, TParent>> light() {
            return ((this.light == null)?this.light = new com.kscs.util.jaxb.Selector<TRoot, RgbaType.Selector<TRoot, TParent>>(this._root, this, "light"):this.light);
        }

        public com.kscs.util.jaxb.Selector<TRoot, RgbaType.Selector<TRoot, TParent>> selectpoint() {
            return ((this.selectpoint == null)?this.selectpoint = new com.kscs.util.jaxb.Selector<TRoot, RgbaType.Selector<TRoot, TParent>>(this._root, this, "selectpoint"):this.selectpoint);
        }

        public com.kscs.util.jaxb.Selector<TRoot, RgbaType.Selector<TRoot, TParent>> connect() {
            return ((this.connect == null)?this.connect = new com.kscs.util.jaxb.Selector<TRoot, RgbaType.Selector<TRoot, TParent>>(this._root, this, "connect"):this.connect);
        }

        public com.kscs.util.jaxb.Selector<TRoot, RgbaType.Selector<TRoot, TParent>> contactpoint() {
            return ((this.contactpoint == null)?this.contactpoint = new com.kscs.util.jaxb.Selector<TRoot, RgbaType.Selector<TRoot, TParent>>(this._root, this, "contactpoint"):this.contactpoint);
        }

        public com.kscs.util.jaxb.Selector<TRoot, RgbaType.Selector<TRoot, TParent>> contactforce() {
            return ((this.contactforce == null)?this.contactforce = new com.kscs.util.jaxb.Selector<TRoot, RgbaType.Selector<TRoot, TParent>>(this._root, this, "contactforce"):this.contactforce);
        }

        public com.kscs.util.jaxb.Selector<TRoot, RgbaType.Selector<TRoot, TParent>> contactfriction() {
            return ((this.contactfriction == null)?this.contactfriction = new com.kscs.util.jaxb.Selector<TRoot, RgbaType.Selector<TRoot, TParent>>(this._root, this, "contactfriction"):this.contactfriction);
        }

        public com.kscs.util.jaxb.Selector<TRoot, RgbaType.Selector<TRoot, TParent>> contacttorque() {
            return ((this.contacttorque == null)?this.contacttorque = new com.kscs.util.jaxb.Selector<TRoot, RgbaType.Selector<TRoot, TParent>>(this._root, this, "contacttorque"):this.contacttorque);
        }

        public com.kscs.util.jaxb.Selector<TRoot, RgbaType.Selector<TRoot, TParent>> contactgap() {
            return ((this.contactgap == null)?this.contactgap = new com.kscs.util.jaxb.Selector<TRoot, RgbaType.Selector<TRoot, TParent>>(this._root, this, "contactgap"):this.contactgap);
        }

        public com.kscs.util.jaxb.Selector<TRoot, RgbaType.Selector<TRoot, TParent>> rangefinder() {
            return ((this.rangefinder == null)?this.rangefinder = new com.kscs.util.jaxb.Selector<TRoot, RgbaType.Selector<TRoot, TParent>>(this._root, this, "rangefinder"):this.rangefinder);
        }

        public com.kscs.util.jaxb.Selector<TRoot, RgbaType.Selector<TRoot, TParent>> constraint() {
            return ((this.constraint == null)?this.constraint = new com.kscs.util.jaxb.Selector<TRoot, RgbaType.Selector<TRoot, TParent>>(this._root, this, "constraint"):this.constraint);
        }

        public com.kscs.util.jaxb.Selector<TRoot, RgbaType.Selector<TRoot, TParent>> slidercrank() {
            return ((this.slidercrank == null)?this.slidercrank = new com.kscs.util.jaxb.Selector<TRoot, RgbaType.Selector<TRoot, TParent>>(this._root, this, "slidercrank"):this.slidercrank);
        }

        public com.kscs.util.jaxb.Selector<TRoot, RgbaType.Selector<TRoot, TParent>> crankbroken() {
            return ((this.crankbroken == null)?this.crankbroken = new com.kscs.util.jaxb.Selector<TRoot, RgbaType.Selector<TRoot, TParent>>(this._root, this, "crankbroken"):this.crankbroken);
        }

    }

}
