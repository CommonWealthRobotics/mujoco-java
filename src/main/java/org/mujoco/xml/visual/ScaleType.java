//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.3.0 
// See <a href="https://javaee.github.io/jaxb-v2/">https://javaee.github.io/jaxb-v2/</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2024.03.14 at 02:05:12 PM EDT 
//


package org.mujoco.xml.visual;

import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeSupport;
import java.beans.PropertyVetoException;
import java.beans.VetoableChangeListener;
import java.beans.VetoableChangeSupport;
import java.math.BigDecimal;
import java.util.HashMap;
import java.util.Map;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlType;
import com.kscs.util.jaxb.Buildable;
import com.kscs.util.jaxb.Copyable;
import com.kscs.util.jaxb.PartialCopyable;
import com.kscs.util.jaxb.PropertyTree;
import com.kscs.util.jaxb.PropertyTreeUse;
import com.kscs.util.jaxb.PropertyVisitor;


/**
 * <p>Java class for scaleType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="scaleType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;attribute name="forcewidth" type="{http://www.w3.org/2001/XMLSchema}decimal" default="0.1" /&gt;
 *       &lt;attribute name="contactwidth" type="{http://www.w3.org/2001/XMLSchema}decimal" default="0.3" /&gt;
 *       &lt;attribute name="contactheight" type="{http://www.w3.org/2001/XMLSchema}decimal" default="0.1" /&gt;
 *       &lt;attribute name="connect" type="{http://www.w3.org/2001/XMLSchema}decimal" default="0.2" /&gt;
 *       &lt;attribute name="com" type="{http://www.w3.org/2001/XMLSchema}decimal" default="0.4" /&gt;
 *       &lt;attribute name="camera" type="{http://www.w3.org/2001/XMLSchema}decimal" default="0.3" /&gt;
 *       &lt;attribute name="light" type="{http://www.w3.org/2001/XMLSchema}decimal" default="0.3" /&gt;
 *       &lt;attribute name="selectpoint" type="{http://www.w3.org/2001/XMLSchema}decimal" default="0.2" /&gt;
 *       &lt;attribute name="jointlength" type="{http://www.w3.org/2001/XMLSchema}decimal" default="1.0" /&gt;
 *       &lt;attribute name="jointwidth" type="{http://www.w3.org/2001/XMLSchema}decimal" default="0.1" /&gt;
 *       &lt;attribute name="actuatorlength" type="{http://www.w3.org/2001/XMLSchema}decimal" default="0.7" /&gt;
 *       &lt;attribute name="actuatorwidth" type="{http://www.w3.org/2001/XMLSchema}decimal" default="0.2" /&gt;
 *       &lt;attribute name="framelength" type="{http://www.w3.org/2001/XMLSchema}decimal" default="1.0" /&gt;
 *       &lt;attribute name="framewidth" type="{http://www.w3.org/2001/XMLSchema}decimal" default="0.1" /&gt;
 *       &lt;attribute name="constraint" type="{http://www.w3.org/2001/XMLSchema}decimal" default="0.1" /&gt;
 *       &lt;attribute name="slidercrank" type="{http://www.w3.org/2001/XMLSchema}decimal" default="0.2" /&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "scaleType")
public class ScaleType implements Cloneable, Copyable, PartialCopyable
{

    @XmlAttribute(name = "forcewidth")
    protected BigDecimal forcewidth;
    @XmlAttribute(name = "contactwidth")
    protected BigDecimal contactwidth;
    @XmlAttribute(name = "contactheight")
    protected BigDecimal contactheight;
    @XmlAttribute(name = "connect")
    protected BigDecimal connect;
    @XmlAttribute(name = "com")
    protected BigDecimal com;
    @XmlAttribute(name = "camera")
    protected BigDecimal camera;
    @XmlAttribute(name = "light")
    protected BigDecimal light;
    @XmlAttribute(name = "selectpoint")
    protected BigDecimal selectpoint;
    @XmlAttribute(name = "jointlength")
    protected BigDecimal jointlength;
    @XmlAttribute(name = "jointwidth")
    protected BigDecimal jointwidth;
    @XmlAttribute(name = "actuatorlength")
    protected BigDecimal actuatorlength;
    @XmlAttribute(name = "actuatorwidth")
    protected BigDecimal actuatorwidth;
    @XmlAttribute(name = "framelength")
    protected BigDecimal framelength;
    @XmlAttribute(name = "framewidth")
    protected BigDecimal framewidth;
    @XmlAttribute(name = "constraint")
    protected BigDecimal constraint;
    @XmlAttribute(name = "slidercrank")
    protected BigDecimal slidercrank;
    protected final transient VetoableChangeSupport vetoableChange__Support = new VetoableChangeSupport(this);
    protected final transient PropertyChangeSupport propertyChange__Support = new PropertyChangeSupport(this);

    /**
     * Generated by copy-constructor plugin, JAXB requires public no-arg constructor.
     * 
     */
    public ScaleType() {
        // Generated by copy-constructor plugin, JAXB requires public no-arg constructor.
    }

    /**
     * Instantiates a ScaleType copying the state of another ScaleType
     * 
     * @param _other
     *     The original ScaleType from which to copy state.
     */
    public ScaleType(final ScaleType _other) {
        this.forcewidth = _other.forcewidth;
        this.contactwidth = _other.contactwidth;
        this.contactheight = _other.contactheight;
        this.connect = _other.connect;
        this.com = _other.com;
        this.camera = _other.camera;
        this.light = _other.light;
        this.selectpoint = _other.selectpoint;
        this.jointlength = _other.jointlength;
        this.jointwidth = _other.jointwidth;
        this.actuatorlength = _other.actuatorlength;
        this.actuatorwidth = _other.actuatorwidth;
        this.framelength = _other.framelength;
        this.framewidth = _other.framewidth;
        this.constraint = _other.constraint;
        this.slidercrank = _other.slidercrank;
    }

    /**
     * Instantiates a ScaleType copying the state of another ScaleType
     * 
     * @param _propertyTreeUse
     *     Meaning of the : Exclude or include members contained in property path.
     * @param _propertyTree
     *     A restricting  that defines which nodes of the source object tree should actually be copied.
     * @param _other
     *     The original ScaleType from which to copy state.
     */
    public ScaleType(final ScaleType _other, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        final PropertyTree forcewidthPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("forcewidth"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(forcewidthPropertyTree!= null):((forcewidthPropertyTree == null)||(!forcewidthPropertyTree.isLeaf())))) {
            this.forcewidth = _other.forcewidth;
        }
        final PropertyTree contactwidthPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("contactwidth"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(contactwidthPropertyTree!= null):((contactwidthPropertyTree == null)||(!contactwidthPropertyTree.isLeaf())))) {
            this.contactwidth = _other.contactwidth;
        }
        final PropertyTree contactheightPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("contactheight"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(contactheightPropertyTree!= null):((contactheightPropertyTree == null)||(!contactheightPropertyTree.isLeaf())))) {
            this.contactheight = _other.contactheight;
        }
        final PropertyTree connectPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("connect"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(connectPropertyTree!= null):((connectPropertyTree == null)||(!connectPropertyTree.isLeaf())))) {
            this.connect = _other.connect;
        }
        final PropertyTree comPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("com"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(comPropertyTree!= null):((comPropertyTree == null)||(!comPropertyTree.isLeaf())))) {
            this.com = _other.com;
        }
        final PropertyTree cameraPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("camera"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(cameraPropertyTree!= null):((cameraPropertyTree == null)||(!cameraPropertyTree.isLeaf())))) {
            this.camera = _other.camera;
        }
        final PropertyTree lightPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("light"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(lightPropertyTree!= null):((lightPropertyTree == null)||(!lightPropertyTree.isLeaf())))) {
            this.light = _other.light;
        }
        final PropertyTree selectpointPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("selectpoint"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(selectpointPropertyTree!= null):((selectpointPropertyTree == null)||(!selectpointPropertyTree.isLeaf())))) {
            this.selectpoint = _other.selectpoint;
        }
        final PropertyTree jointlengthPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("jointlength"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(jointlengthPropertyTree!= null):((jointlengthPropertyTree == null)||(!jointlengthPropertyTree.isLeaf())))) {
            this.jointlength = _other.jointlength;
        }
        final PropertyTree jointwidthPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("jointwidth"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(jointwidthPropertyTree!= null):((jointwidthPropertyTree == null)||(!jointwidthPropertyTree.isLeaf())))) {
            this.jointwidth = _other.jointwidth;
        }
        final PropertyTree actuatorlengthPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("actuatorlength"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(actuatorlengthPropertyTree!= null):((actuatorlengthPropertyTree == null)||(!actuatorlengthPropertyTree.isLeaf())))) {
            this.actuatorlength = _other.actuatorlength;
        }
        final PropertyTree actuatorwidthPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("actuatorwidth"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(actuatorwidthPropertyTree!= null):((actuatorwidthPropertyTree == null)||(!actuatorwidthPropertyTree.isLeaf())))) {
            this.actuatorwidth = _other.actuatorwidth;
        }
        final PropertyTree framelengthPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("framelength"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(framelengthPropertyTree!= null):((framelengthPropertyTree == null)||(!framelengthPropertyTree.isLeaf())))) {
            this.framelength = _other.framelength;
        }
        final PropertyTree framewidthPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("framewidth"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(framewidthPropertyTree!= null):((framewidthPropertyTree == null)||(!framewidthPropertyTree.isLeaf())))) {
            this.framewidth = _other.framewidth;
        }
        final PropertyTree constraintPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("constraint"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(constraintPropertyTree!= null):((constraintPropertyTree == null)||(!constraintPropertyTree.isLeaf())))) {
            this.constraint = _other.constraint;
        }
        final PropertyTree slidercrankPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("slidercrank"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(slidercrankPropertyTree!= null):((slidercrankPropertyTree == null)||(!slidercrankPropertyTree.isLeaf())))) {
            this.slidercrank = _other.slidercrank;
        }
    }

    /**
     * Gets the value of the forcewidth property.
     * 
     * @return
     *     possible object is
     *     {@link BigDecimal }
     *     
     */
    public BigDecimal getForcewidth() {
        if (forcewidth == null) {
            return new BigDecimal("0.1");
        } else {
            return forcewidth;
        }
    }

    /**
     * Gets the value of the contactwidth property.
     * 
     * @return
     *     possible object is
     *     {@link BigDecimal }
     *     
     */
    public BigDecimal getContactwidth() {
        if (contactwidth == null) {
            return new BigDecimal("0.3");
        } else {
            return contactwidth;
        }
    }

    /**
     * Gets the value of the contactheight property.
     * 
     * @return
     *     possible object is
     *     {@link BigDecimal }
     *     
     */
    public BigDecimal getContactheight() {
        if (contactheight == null) {
            return new BigDecimal("0.1");
        } else {
            return contactheight;
        }
    }

    /**
     * Gets the value of the connect property.
     * 
     * @return
     *     possible object is
     *     {@link BigDecimal }
     *     
     */
    public BigDecimal getConnect() {
        if (connect == null) {
            return new BigDecimal("0.2");
        } else {
            return connect;
        }
    }

    /**
     * Gets the value of the com property.
     * 
     * @return
     *     possible object is
     *     {@link BigDecimal }
     *     
     */
    public BigDecimal getCom() {
        if (com == null) {
            return new BigDecimal("0.4");
        } else {
            return com;
        }
    }

    /**
     * Gets the value of the camera property.
     * 
     * @return
     *     possible object is
     *     {@link BigDecimal }
     *     
     */
    public BigDecimal getCamera() {
        if (camera == null) {
            return new BigDecimal("0.3");
        } else {
            return camera;
        }
    }

    /**
     * Gets the value of the light property.
     * 
     * @return
     *     possible object is
     *     {@link BigDecimal }
     *     
     */
    public BigDecimal getLight() {
        if (light == null) {
            return new BigDecimal("0.3");
        } else {
            return light;
        }
    }

    /**
     * Gets the value of the selectpoint property.
     * 
     * @return
     *     possible object is
     *     {@link BigDecimal }
     *     
     */
    public BigDecimal getSelectpoint() {
        if (selectpoint == null) {
            return new BigDecimal("0.2");
        } else {
            return selectpoint;
        }
    }

    /**
     * Gets the value of the jointlength property.
     * 
     * @return
     *     possible object is
     *     {@link BigDecimal }
     *     
     */
    public BigDecimal getJointlength() {
        if (jointlength == null) {
            return new BigDecimal("1.0");
        } else {
            return jointlength;
        }
    }

    /**
     * Gets the value of the jointwidth property.
     * 
     * @return
     *     possible object is
     *     {@link BigDecimal }
     *     
     */
    public BigDecimal getJointwidth() {
        if (jointwidth == null) {
            return new BigDecimal("0.1");
        } else {
            return jointwidth;
        }
    }

    /**
     * Gets the value of the actuatorlength property.
     * 
     * @return
     *     possible object is
     *     {@link BigDecimal }
     *     
     */
    public BigDecimal getActuatorlength() {
        if (actuatorlength == null) {
            return new BigDecimal("0.7");
        } else {
            return actuatorlength;
        }
    }

    /**
     * Gets the value of the actuatorwidth property.
     * 
     * @return
     *     possible object is
     *     {@link BigDecimal }
     *     
     */
    public BigDecimal getActuatorwidth() {
        if (actuatorwidth == null) {
            return new BigDecimal("0.2");
        } else {
            return actuatorwidth;
        }
    }

    /**
     * Gets the value of the framelength property.
     * 
     * @return
     *     possible object is
     *     {@link BigDecimal }
     *     
     */
    public BigDecimal getFramelength() {
        if (framelength == null) {
            return new BigDecimal("1.0");
        } else {
            return framelength;
        }
    }

    /**
     * Gets the value of the framewidth property.
     * 
     * @return
     *     possible object is
     *     {@link BigDecimal }
     *     
     */
    public BigDecimal getFramewidth() {
        if (framewidth == null) {
            return new BigDecimal("0.1");
        } else {
            return framewidth;
        }
    }

    /**
     * Gets the value of the constraint property.
     * 
     * @return
     *     possible object is
     *     {@link BigDecimal }
     *     
     */
    public BigDecimal getConstraint() {
        if (constraint == null) {
            return new BigDecimal("0.1");
        } else {
            return constraint;
        }
    }

    /**
     * Gets the value of the slidercrank property.
     * 
     * @return
     *     possible object is
     *     {@link BigDecimal }
     *     
     */
    public BigDecimal getSlidercrank() {
        if (slidercrank == null) {
            return new BigDecimal("0.2");
        } else {
            return slidercrank;
        }
    }

    public void addVetoableChangeListener(final VetoableChangeListener vetoableChangeListener) {
        this.vetoableChange__Support.addVetoableChangeListener(vetoableChangeListener);
    }

    public void removeVetoableChangeListener(final VetoableChangeListener vetoableChangeListener) {
        this.vetoableChange__Support.removeVetoableChangeListener(vetoableChangeListener);
    }

    public ScaleType withVetoableChangeListener(final VetoableChangeListener vetoableChangeListener) {
        addVetoableChangeListener(vetoableChangeListener);
        return this;
    }

    public void addPropertyChangeListener(final PropertyChangeListener propertyChangeListener) {
        this.propertyChange__Support.addPropertyChangeListener(propertyChangeListener);
    }

    public void removePropertyChangeListener(final PropertyChangeListener propertyChangeListener) {
        this.propertyChange__Support.removePropertyChangeListener(propertyChangeListener);
    }

    public ScaleType withPropertyChangeListener(final PropertyChangeListener propertyChangeListener) {
        addPropertyChangeListener(propertyChangeListener);
        return this;
    }

    public void setForcewidth(final BigDecimal value) {
        final BigDecimal __oldValue = this.forcewidth;
        try {
            this.vetoableChange__Support.fireVetoableChange("forcewidth", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.forcewidth = value;
        this.propertyChange__Support.firePropertyChange("forcewidth", __oldValue, value);
    }

    public void setContactwidth(final BigDecimal value) {
        final BigDecimal __oldValue = this.contactwidth;
        try {
            this.vetoableChange__Support.fireVetoableChange("contactwidth", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.contactwidth = value;
        this.propertyChange__Support.firePropertyChange("contactwidth", __oldValue, value);
    }

    public void setContactheight(final BigDecimal value) {
        final BigDecimal __oldValue = this.contactheight;
        try {
            this.vetoableChange__Support.fireVetoableChange("contactheight", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.contactheight = value;
        this.propertyChange__Support.firePropertyChange("contactheight", __oldValue, value);
    }

    public void setConnect(final BigDecimal value) {
        final BigDecimal __oldValue = this.connect;
        try {
            this.vetoableChange__Support.fireVetoableChange("connect", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.connect = value;
        this.propertyChange__Support.firePropertyChange("connect", __oldValue, value);
    }

    public void setCom(final BigDecimal value) {
        final BigDecimal __oldValue = this.com;
        try {
            this.vetoableChange__Support.fireVetoableChange("com", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.com = value;
        this.propertyChange__Support.firePropertyChange("com", __oldValue, value);
    }

    public void setCamera(final BigDecimal value) {
        final BigDecimal __oldValue = this.camera;
        try {
            this.vetoableChange__Support.fireVetoableChange("camera", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.camera = value;
        this.propertyChange__Support.firePropertyChange("camera", __oldValue, value);
    }

    public void setLight(final BigDecimal value) {
        final BigDecimal __oldValue = this.light;
        try {
            this.vetoableChange__Support.fireVetoableChange("light", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.light = value;
        this.propertyChange__Support.firePropertyChange("light", __oldValue, value);
    }

    public void setSelectpoint(final BigDecimal value) {
        final BigDecimal __oldValue = this.selectpoint;
        try {
            this.vetoableChange__Support.fireVetoableChange("selectpoint", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.selectpoint = value;
        this.propertyChange__Support.firePropertyChange("selectpoint", __oldValue, value);
    }

    public void setJointlength(final BigDecimal value) {
        final BigDecimal __oldValue = this.jointlength;
        try {
            this.vetoableChange__Support.fireVetoableChange("jointlength", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.jointlength = value;
        this.propertyChange__Support.firePropertyChange("jointlength", __oldValue, value);
    }

    public void setJointwidth(final BigDecimal value) {
        final BigDecimal __oldValue = this.jointwidth;
        try {
            this.vetoableChange__Support.fireVetoableChange("jointwidth", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.jointwidth = value;
        this.propertyChange__Support.firePropertyChange("jointwidth", __oldValue, value);
    }

    public void setActuatorlength(final BigDecimal value) {
        final BigDecimal __oldValue = this.actuatorlength;
        try {
            this.vetoableChange__Support.fireVetoableChange("actuatorlength", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.actuatorlength = value;
        this.propertyChange__Support.firePropertyChange("actuatorlength", __oldValue, value);
    }

    public void setActuatorwidth(final BigDecimal value) {
        final BigDecimal __oldValue = this.actuatorwidth;
        try {
            this.vetoableChange__Support.fireVetoableChange("actuatorwidth", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.actuatorwidth = value;
        this.propertyChange__Support.firePropertyChange("actuatorwidth", __oldValue, value);
    }

    public void setFramelength(final BigDecimal value) {
        final BigDecimal __oldValue = this.framelength;
        try {
            this.vetoableChange__Support.fireVetoableChange("framelength", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.framelength = value;
        this.propertyChange__Support.firePropertyChange("framelength", __oldValue, value);
    }

    public void setFramewidth(final BigDecimal value) {
        final BigDecimal __oldValue = this.framewidth;
        try {
            this.vetoableChange__Support.fireVetoableChange("framewidth", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.framewidth = value;
        this.propertyChange__Support.firePropertyChange("framewidth", __oldValue, value);
    }

    public void setConstraint(final BigDecimal value) {
        final BigDecimal __oldValue = this.constraint;
        try {
            this.vetoableChange__Support.fireVetoableChange("constraint", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.constraint = value;
        this.propertyChange__Support.firePropertyChange("constraint", __oldValue, value);
    }

    public void setSlidercrank(final BigDecimal value) {
        final BigDecimal __oldValue = this.slidercrank;
        try {
            this.vetoableChange__Support.fireVetoableChange("slidercrank", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.slidercrank = value;
        this.propertyChange__Support.firePropertyChange("slidercrank", __oldValue, value);
    }

    @Override
    public ScaleType clone() {
        final ScaleType _newObject;
        try {
            _newObject = ((ScaleType) super.clone());
        } catch (CloneNotSupportedException e) {
            throw new RuntimeException(e);
        }
        return _newObject;
    }

    @Override
    public ScaleType createCopy() {
        final ScaleType _newObject;
        try {
            _newObject = ((ScaleType) super.clone());
        } catch (CloneNotSupportedException e) {
            throw new RuntimeException(e);
        }
        _newObject.forcewidth = this.forcewidth;
        _newObject.contactwidth = this.contactwidth;
        _newObject.contactheight = this.contactheight;
        _newObject.connect = this.connect;
        _newObject.com = this.com;
        _newObject.camera = this.camera;
        _newObject.light = this.light;
        _newObject.selectpoint = this.selectpoint;
        _newObject.jointlength = this.jointlength;
        _newObject.jointwidth = this.jointwidth;
        _newObject.actuatorlength = this.actuatorlength;
        _newObject.actuatorwidth = this.actuatorwidth;
        _newObject.framelength = this.framelength;
        _newObject.framewidth = this.framewidth;
        _newObject.constraint = this.constraint;
        _newObject.slidercrank = this.slidercrank;
        return _newObject;
    }

    @Override
    public ScaleType createCopy(final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        final ScaleType _newObject;
        try {
            _newObject = ((ScaleType) super.clone());
        } catch (CloneNotSupportedException e) {
            throw new RuntimeException(e);
        }
        final PropertyTree forcewidthPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("forcewidth"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(forcewidthPropertyTree!= null):((forcewidthPropertyTree == null)||(!forcewidthPropertyTree.isLeaf())))) {
            _newObject.forcewidth = this.forcewidth;
        }
        final PropertyTree contactwidthPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("contactwidth"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(contactwidthPropertyTree!= null):((contactwidthPropertyTree == null)||(!contactwidthPropertyTree.isLeaf())))) {
            _newObject.contactwidth = this.contactwidth;
        }
        final PropertyTree contactheightPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("contactheight"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(contactheightPropertyTree!= null):((contactheightPropertyTree == null)||(!contactheightPropertyTree.isLeaf())))) {
            _newObject.contactheight = this.contactheight;
        }
        final PropertyTree connectPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("connect"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(connectPropertyTree!= null):((connectPropertyTree == null)||(!connectPropertyTree.isLeaf())))) {
            _newObject.connect = this.connect;
        }
        final PropertyTree comPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("com"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(comPropertyTree!= null):((comPropertyTree == null)||(!comPropertyTree.isLeaf())))) {
            _newObject.com = this.com;
        }
        final PropertyTree cameraPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("camera"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(cameraPropertyTree!= null):((cameraPropertyTree == null)||(!cameraPropertyTree.isLeaf())))) {
            _newObject.camera = this.camera;
        }
        final PropertyTree lightPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("light"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(lightPropertyTree!= null):((lightPropertyTree == null)||(!lightPropertyTree.isLeaf())))) {
            _newObject.light = this.light;
        }
        final PropertyTree selectpointPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("selectpoint"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(selectpointPropertyTree!= null):((selectpointPropertyTree == null)||(!selectpointPropertyTree.isLeaf())))) {
            _newObject.selectpoint = this.selectpoint;
        }
        final PropertyTree jointlengthPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("jointlength"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(jointlengthPropertyTree!= null):((jointlengthPropertyTree == null)||(!jointlengthPropertyTree.isLeaf())))) {
            _newObject.jointlength = this.jointlength;
        }
        final PropertyTree jointwidthPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("jointwidth"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(jointwidthPropertyTree!= null):((jointwidthPropertyTree == null)||(!jointwidthPropertyTree.isLeaf())))) {
            _newObject.jointwidth = this.jointwidth;
        }
        final PropertyTree actuatorlengthPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("actuatorlength"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(actuatorlengthPropertyTree!= null):((actuatorlengthPropertyTree == null)||(!actuatorlengthPropertyTree.isLeaf())))) {
            _newObject.actuatorlength = this.actuatorlength;
        }
        final PropertyTree actuatorwidthPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("actuatorwidth"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(actuatorwidthPropertyTree!= null):((actuatorwidthPropertyTree == null)||(!actuatorwidthPropertyTree.isLeaf())))) {
            _newObject.actuatorwidth = this.actuatorwidth;
        }
        final PropertyTree framelengthPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("framelength"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(framelengthPropertyTree!= null):((framelengthPropertyTree == null)||(!framelengthPropertyTree.isLeaf())))) {
            _newObject.framelength = this.framelength;
        }
        final PropertyTree framewidthPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("framewidth"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(framewidthPropertyTree!= null):((framewidthPropertyTree == null)||(!framewidthPropertyTree.isLeaf())))) {
            _newObject.framewidth = this.framewidth;
        }
        final PropertyTree constraintPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("constraint"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(constraintPropertyTree!= null):((constraintPropertyTree == null)||(!constraintPropertyTree.isLeaf())))) {
            _newObject.constraint = this.constraint;
        }
        final PropertyTree slidercrankPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("slidercrank"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(slidercrankPropertyTree!= null):((slidercrankPropertyTree == null)||(!slidercrankPropertyTree.isLeaf())))) {
            _newObject.slidercrank = this.slidercrank;
        }
        return _newObject;
    }

    @Override
    public ScaleType copyExcept(final PropertyTree _propertyTree) {
        return createCopy(_propertyTree, PropertyTreeUse.EXCLUDE);
    }

    @Override
    public ScaleType copyOnly(final PropertyTree _propertyTree) {
        return createCopy(_propertyTree, PropertyTreeUse.INCLUDE);
    }

    /**
     * Copies all state of this object to a builder. This method is used by the {@link #copyOf} method and should not be called directly by client code.
     * 
     * @param _other
     *     A builder instance to which the state of this object will be copied.
     */
    public<_B >void copyTo(final ScaleType.Builder<_B> _other) {
        _other.forcewidth = this.forcewidth;
        _other.contactwidth = this.contactwidth;
        _other.contactheight = this.contactheight;
        _other.connect = this.connect;
        _other.com = this.com;
        _other.camera = this.camera;
        _other.light = this.light;
        _other.selectpoint = this.selectpoint;
        _other.jointlength = this.jointlength;
        _other.jointwidth = this.jointwidth;
        _other.actuatorlength = this.actuatorlength;
        _other.actuatorwidth = this.actuatorwidth;
        _other.framelength = this.framelength;
        _other.framewidth = this.framewidth;
        _other.constraint = this.constraint;
        _other.slidercrank = this.slidercrank;
    }

    public<_B >ScaleType.Builder<_B> newCopyBuilder(final _B _parentBuilder) {
        return new ScaleType.Builder<_B>(_parentBuilder, this, true);
    }

    public ScaleType.Builder<Void> newCopyBuilder() {
        return newCopyBuilder(null);
    }

    public static ScaleType.Builder<Void> builder() {
        return new ScaleType.Builder<Void>(null, null, false);
    }

    public static<_B >ScaleType.Builder<_B> copyOf(final ScaleType _other) {
        final ScaleType.Builder<_B> _newBuilder = new ScaleType.Builder<_B>(null, null, false);
        _other.copyTo(_newBuilder);
        return _newBuilder;
    }

    /**
     * Copies all state of this object to a builder. This method is used by the {@link #copyOf} method and should not be called directly by client code.
     * 
     * @param _other
     *     A builder instance to which the state of this object will be copied.
     */
    public<_B >void copyTo(final ScaleType.Builder<_B> _other, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        final PropertyTree forcewidthPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("forcewidth"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(forcewidthPropertyTree!= null):((forcewidthPropertyTree == null)||(!forcewidthPropertyTree.isLeaf())))) {
            _other.forcewidth = this.forcewidth;
        }
        final PropertyTree contactwidthPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("contactwidth"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(contactwidthPropertyTree!= null):((contactwidthPropertyTree == null)||(!contactwidthPropertyTree.isLeaf())))) {
            _other.contactwidth = this.contactwidth;
        }
        final PropertyTree contactheightPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("contactheight"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(contactheightPropertyTree!= null):((contactheightPropertyTree == null)||(!contactheightPropertyTree.isLeaf())))) {
            _other.contactheight = this.contactheight;
        }
        final PropertyTree connectPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("connect"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(connectPropertyTree!= null):((connectPropertyTree == null)||(!connectPropertyTree.isLeaf())))) {
            _other.connect = this.connect;
        }
        final PropertyTree comPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("com"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(comPropertyTree!= null):((comPropertyTree == null)||(!comPropertyTree.isLeaf())))) {
            _other.com = this.com;
        }
        final PropertyTree cameraPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("camera"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(cameraPropertyTree!= null):((cameraPropertyTree == null)||(!cameraPropertyTree.isLeaf())))) {
            _other.camera = this.camera;
        }
        final PropertyTree lightPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("light"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(lightPropertyTree!= null):((lightPropertyTree == null)||(!lightPropertyTree.isLeaf())))) {
            _other.light = this.light;
        }
        final PropertyTree selectpointPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("selectpoint"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(selectpointPropertyTree!= null):((selectpointPropertyTree == null)||(!selectpointPropertyTree.isLeaf())))) {
            _other.selectpoint = this.selectpoint;
        }
        final PropertyTree jointlengthPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("jointlength"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(jointlengthPropertyTree!= null):((jointlengthPropertyTree == null)||(!jointlengthPropertyTree.isLeaf())))) {
            _other.jointlength = this.jointlength;
        }
        final PropertyTree jointwidthPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("jointwidth"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(jointwidthPropertyTree!= null):((jointwidthPropertyTree == null)||(!jointwidthPropertyTree.isLeaf())))) {
            _other.jointwidth = this.jointwidth;
        }
        final PropertyTree actuatorlengthPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("actuatorlength"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(actuatorlengthPropertyTree!= null):((actuatorlengthPropertyTree == null)||(!actuatorlengthPropertyTree.isLeaf())))) {
            _other.actuatorlength = this.actuatorlength;
        }
        final PropertyTree actuatorwidthPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("actuatorwidth"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(actuatorwidthPropertyTree!= null):((actuatorwidthPropertyTree == null)||(!actuatorwidthPropertyTree.isLeaf())))) {
            _other.actuatorwidth = this.actuatorwidth;
        }
        final PropertyTree framelengthPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("framelength"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(framelengthPropertyTree!= null):((framelengthPropertyTree == null)||(!framelengthPropertyTree.isLeaf())))) {
            _other.framelength = this.framelength;
        }
        final PropertyTree framewidthPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("framewidth"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(framewidthPropertyTree!= null):((framewidthPropertyTree == null)||(!framewidthPropertyTree.isLeaf())))) {
            _other.framewidth = this.framewidth;
        }
        final PropertyTree constraintPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("constraint"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(constraintPropertyTree!= null):((constraintPropertyTree == null)||(!constraintPropertyTree.isLeaf())))) {
            _other.constraint = this.constraint;
        }
        final PropertyTree slidercrankPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("slidercrank"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(slidercrankPropertyTree!= null):((slidercrankPropertyTree == null)||(!slidercrankPropertyTree.isLeaf())))) {
            _other.slidercrank = this.slidercrank;
        }
    }

    public<_B >ScaleType.Builder<_B> newCopyBuilder(final _B _parentBuilder, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        return new ScaleType.Builder<_B>(_parentBuilder, this, true, _propertyTree, _propertyTreeUse);
    }

    public ScaleType.Builder<Void> newCopyBuilder(final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        return newCopyBuilder(null, _propertyTree, _propertyTreeUse);
    }

    public static<_B >ScaleType.Builder<_B> copyOf(final ScaleType _other, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        final ScaleType.Builder<_B> _newBuilder = new ScaleType.Builder<_B>(null, null, false);
        _other.copyTo(_newBuilder, _propertyTree, _propertyTreeUse);
        return _newBuilder;
    }

    public static ScaleType.Builder<Void> copyExcept(final ScaleType _other, final PropertyTree _propertyTree) {
        return copyOf(_other, _propertyTree, PropertyTreeUse.EXCLUDE);
    }

    public static ScaleType.Builder<Void> copyOnly(final ScaleType _other, final PropertyTree _propertyTree) {
        return copyOf(_other, _propertyTree, PropertyTreeUse.INCLUDE);
    }

    public ScaleType visit(final PropertyVisitor _visitor_) {
        _visitor_.visit(this);
        return this;
    }

    public static class Builder<_B >implements Buildable
    {

        protected final _B _parentBuilder;
        private BigDecimal forcewidth;
        private BigDecimal contactwidth;
        private BigDecimal contactheight;
        private BigDecimal connect;
        private BigDecimal com;
        private BigDecimal camera;
        private BigDecimal light;
        private BigDecimal selectpoint;
        private BigDecimal jointlength;
        private BigDecimal jointwidth;
        private BigDecimal actuatorlength;
        private BigDecimal actuatorwidth;
        private BigDecimal framelength;
        private BigDecimal framewidth;
        private BigDecimal constraint;
        private BigDecimal slidercrank;

        public Builder(final _B _parentBuilder, final ScaleType _other, final boolean _copy) {
            this._parentBuilder = _parentBuilder;
            if (_other!= null) {
                this.forcewidth = _other.forcewidth;
                this.contactwidth = _other.contactwidth;
                this.contactheight = _other.contactheight;
                this.connect = _other.connect;
                this.com = _other.com;
                this.camera = _other.camera;
                this.light = _other.light;
                this.selectpoint = _other.selectpoint;
                this.jointlength = _other.jointlength;
                this.jointwidth = _other.jointwidth;
                this.actuatorlength = _other.actuatorlength;
                this.actuatorwidth = _other.actuatorwidth;
                this.framelength = _other.framelength;
                this.framewidth = _other.framewidth;
                this.constraint = _other.constraint;
                this.slidercrank = _other.slidercrank;
            }
        }

        public Builder(final _B _parentBuilder, final ScaleType _other, final boolean _copy, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
            this._parentBuilder = _parentBuilder;
            if (_other!= null) {
                final PropertyTree forcewidthPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("forcewidth"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(forcewidthPropertyTree!= null):((forcewidthPropertyTree == null)||(!forcewidthPropertyTree.isLeaf())))) {
                    this.forcewidth = _other.forcewidth;
                }
                final PropertyTree contactwidthPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("contactwidth"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(contactwidthPropertyTree!= null):((contactwidthPropertyTree == null)||(!contactwidthPropertyTree.isLeaf())))) {
                    this.contactwidth = _other.contactwidth;
                }
                final PropertyTree contactheightPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("contactheight"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(contactheightPropertyTree!= null):((contactheightPropertyTree == null)||(!contactheightPropertyTree.isLeaf())))) {
                    this.contactheight = _other.contactheight;
                }
                final PropertyTree connectPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("connect"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(connectPropertyTree!= null):((connectPropertyTree == null)||(!connectPropertyTree.isLeaf())))) {
                    this.connect = _other.connect;
                }
                final PropertyTree comPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("com"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(comPropertyTree!= null):((comPropertyTree == null)||(!comPropertyTree.isLeaf())))) {
                    this.com = _other.com;
                }
                final PropertyTree cameraPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("camera"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(cameraPropertyTree!= null):((cameraPropertyTree == null)||(!cameraPropertyTree.isLeaf())))) {
                    this.camera = _other.camera;
                }
                final PropertyTree lightPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("light"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(lightPropertyTree!= null):((lightPropertyTree == null)||(!lightPropertyTree.isLeaf())))) {
                    this.light = _other.light;
                }
                final PropertyTree selectpointPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("selectpoint"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(selectpointPropertyTree!= null):((selectpointPropertyTree == null)||(!selectpointPropertyTree.isLeaf())))) {
                    this.selectpoint = _other.selectpoint;
                }
                final PropertyTree jointlengthPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("jointlength"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(jointlengthPropertyTree!= null):((jointlengthPropertyTree == null)||(!jointlengthPropertyTree.isLeaf())))) {
                    this.jointlength = _other.jointlength;
                }
                final PropertyTree jointwidthPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("jointwidth"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(jointwidthPropertyTree!= null):((jointwidthPropertyTree == null)||(!jointwidthPropertyTree.isLeaf())))) {
                    this.jointwidth = _other.jointwidth;
                }
                final PropertyTree actuatorlengthPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("actuatorlength"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(actuatorlengthPropertyTree!= null):((actuatorlengthPropertyTree == null)||(!actuatorlengthPropertyTree.isLeaf())))) {
                    this.actuatorlength = _other.actuatorlength;
                }
                final PropertyTree actuatorwidthPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("actuatorwidth"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(actuatorwidthPropertyTree!= null):((actuatorwidthPropertyTree == null)||(!actuatorwidthPropertyTree.isLeaf())))) {
                    this.actuatorwidth = _other.actuatorwidth;
                }
                final PropertyTree framelengthPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("framelength"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(framelengthPropertyTree!= null):((framelengthPropertyTree == null)||(!framelengthPropertyTree.isLeaf())))) {
                    this.framelength = _other.framelength;
                }
                final PropertyTree framewidthPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("framewidth"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(framewidthPropertyTree!= null):((framewidthPropertyTree == null)||(!framewidthPropertyTree.isLeaf())))) {
                    this.framewidth = _other.framewidth;
                }
                final PropertyTree constraintPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("constraint"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(constraintPropertyTree!= null):((constraintPropertyTree == null)||(!constraintPropertyTree.isLeaf())))) {
                    this.constraint = _other.constraint;
                }
                final PropertyTree slidercrankPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("slidercrank"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(slidercrankPropertyTree!= null):((slidercrankPropertyTree == null)||(!slidercrankPropertyTree.isLeaf())))) {
                    this.slidercrank = _other.slidercrank;
                }
            }
        }

        public _B end() {
            return this._parentBuilder;
        }

        protected<_P extends ScaleType >_P init(final _P _product) {
            _product.forcewidth = this.forcewidth;
            _product.contactwidth = this.contactwidth;
            _product.contactheight = this.contactheight;
            _product.connect = this.connect;
            _product.com = this.com;
            _product.camera = this.camera;
            _product.light = this.light;
            _product.selectpoint = this.selectpoint;
            _product.jointlength = this.jointlength;
            _product.jointwidth = this.jointwidth;
            _product.actuatorlength = this.actuatorlength;
            _product.actuatorwidth = this.actuatorwidth;
            _product.framelength = this.framelength;
            _product.framewidth = this.framewidth;
            _product.constraint = this.constraint;
            _product.slidercrank = this.slidercrank;
            return _product;
        }

        /**
         * Sets the new value of "forcewidth" (any previous value will be replaced)
         * 
         * @param forcewidth
         *     New value of the "forcewidth" property.
         */
        public ScaleType.Builder<_B> withForcewidth(final BigDecimal forcewidth) {
            this.forcewidth = forcewidth;
            return this;
        }

        /**
         * Sets the new value of "contactwidth" (any previous value will be replaced)
         * 
         * @param contactwidth
         *     New value of the "contactwidth" property.
         */
        public ScaleType.Builder<_B> withContactwidth(final BigDecimal contactwidth) {
            this.contactwidth = contactwidth;
            return this;
        }

        /**
         * Sets the new value of "contactheight" (any previous value will be replaced)
         * 
         * @param contactheight
         *     New value of the "contactheight" property.
         */
        public ScaleType.Builder<_B> withContactheight(final BigDecimal contactheight) {
            this.contactheight = contactheight;
            return this;
        }

        /**
         * Sets the new value of "connect" (any previous value will be replaced)
         * 
         * @param connect
         *     New value of the "connect" property.
         */
        public ScaleType.Builder<_B> withConnect(final BigDecimal connect) {
            this.connect = connect;
            return this;
        }

        /**
         * Sets the new value of "com" (any previous value will be replaced)
         * 
         * @param com
         *     New value of the "com" property.
         */
        public ScaleType.Builder<_B> withCom(final BigDecimal com) {
            this.com = com;
            return this;
        }

        /**
         * Sets the new value of "camera" (any previous value will be replaced)
         * 
         * @param camera
         *     New value of the "camera" property.
         */
        public ScaleType.Builder<_B> withCamera(final BigDecimal camera) {
            this.camera = camera;
            return this;
        }

        /**
         * Sets the new value of "light" (any previous value will be replaced)
         * 
         * @param light
         *     New value of the "light" property.
         */
        public ScaleType.Builder<_B> withLight(final BigDecimal light) {
            this.light = light;
            return this;
        }

        /**
         * Sets the new value of "selectpoint" (any previous value will be replaced)
         * 
         * @param selectpoint
         *     New value of the "selectpoint" property.
         */
        public ScaleType.Builder<_B> withSelectpoint(final BigDecimal selectpoint) {
            this.selectpoint = selectpoint;
            return this;
        }

        /**
         * Sets the new value of "jointlength" (any previous value will be replaced)
         * 
         * @param jointlength
         *     New value of the "jointlength" property.
         */
        public ScaleType.Builder<_B> withJointlength(final BigDecimal jointlength) {
            this.jointlength = jointlength;
            return this;
        }

        /**
         * Sets the new value of "jointwidth" (any previous value will be replaced)
         * 
         * @param jointwidth
         *     New value of the "jointwidth" property.
         */
        public ScaleType.Builder<_B> withJointwidth(final BigDecimal jointwidth) {
            this.jointwidth = jointwidth;
            return this;
        }

        /**
         * Sets the new value of "actuatorlength" (any previous value will be replaced)
         * 
         * @param actuatorlength
         *     New value of the "actuatorlength" property.
         */
        public ScaleType.Builder<_B> withActuatorlength(final BigDecimal actuatorlength) {
            this.actuatorlength = actuatorlength;
            return this;
        }

        /**
         * Sets the new value of "actuatorwidth" (any previous value will be replaced)
         * 
         * @param actuatorwidth
         *     New value of the "actuatorwidth" property.
         */
        public ScaleType.Builder<_B> withActuatorwidth(final BigDecimal actuatorwidth) {
            this.actuatorwidth = actuatorwidth;
            return this;
        }

        /**
         * Sets the new value of "framelength" (any previous value will be replaced)
         * 
         * @param framelength
         *     New value of the "framelength" property.
         */
        public ScaleType.Builder<_B> withFramelength(final BigDecimal framelength) {
            this.framelength = framelength;
            return this;
        }

        /**
         * Sets the new value of "framewidth" (any previous value will be replaced)
         * 
         * @param framewidth
         *     New value of the "framewidth" property.
         */
        public ScaleType.Builder<_B> withFramewidth(final BigDecimal framewidth) {
            this.framewidth = framewidth;
            return this;
        }

        /**
         * Sets the new value of "constraint" (any previous value will be replaced)
         * 
         * @param constraint
         *     New value of the "constraint" property.
         */
        public ScaleType.Builder<_B> withConstraint(final BigDecimal constraint) {
            this.constraint = constraint;
            return this;
        }

        /**
         * Sets the new value of "slidercrank" (any previous value will be replaced)
         * 
         * @param slidercrank
         *     New value of the "slidercrank" property.
         */
        public ScaleType.Builder<_B> withSlidercrank(final BigDecimal slidercrank) {
            this.slidercrank = slidercrank;
            return this;
        }

        @Override
        public ScaleType build() {
            return this.init(new ScaleType());
        }

        public ScaleType.Builder<_B> copyOf(final ScaleType _other) {
            _other.copyTo(this);
            return this;
        }

        public ScaleType.Builder<_B> copyOf(final ScaleType.Builder _other) {
            return copyOf(_other.build());
        }

    }

    public static class PropInfo {

        public final static transient String FORCEWIDTH = "forcewidth";
        public final static transient String CONTACTWIDTH = "contactwidth";
        public final static transient String CONTACTHEIGHT = "contactheight";
        public final static transient String CONNECT = "connect";
        public final static transient String COM = "com";
        public final static transient String CAMERA = "camera";
        public final static transient String LIGHT = "light";
        public final static transient String SELECTPOINT = "selectpoint";
        public final static transient String JOINTLENGTH = "jointlength";
        public final static transient String JOINTWIDTH = "jointwidth";
        public final static transient String ACTUATORLENGTH = "actuatorlength";
        public final static transient String ACTUATORWIDTH = "actuatorwidth";
        public final static transient String FRAMELENGTH = "framelength";
        public final static transient String FRAMEWIDTH = "framewidth";
        public final static transient String CONSTRAINT = "constraint";
        public final static transient String SLIDERCRANK = "slidercrank";

    }

    public static class Select
        extends ScaleType.Selector<ScaleType.Select, Void>
    {


        Select() {
            super(null, null, null);
        }

        public static ScaleType.Select _root() {
            return new ScaleType.Select();
        }

    }

    public static class Selector<TRoot extends com.kscs.util.jaxb.Selector<TRoot, ?> , TParent >
        extends com.kscs.util.jaxb.Selector<TRoot, TParent>
    {

        private com.kscs.util.jaxb.Selector<TRoot, ScaleType.Selector<TRoot, TParent>> forcewidth = null;
        private com.kscs.util.jaxb.Selector<TRoot, ScaleType.Selector<TRoot, TParent>> contactwidth = null;
        private com.kscs.util.jaxb.Selector<TRoot, ScaleType.Selector<TRoot, TParent>> contactheight = null;
        private com.kscs.util.jaxb.Selector<TRoot, ScaleType.Selector<TRoot, TParent>> connect = null;
        private com.kscs.util.jaxb.Selector<TRoot, ScaleType.Selector<TRoot, TParent>> com = null;
        private com.kscs.util.jaxb.Selector<TRoot, ScaleType.Selector<TRoot, TParent>> camera = null;
        private com.kscs.util.jaxb.Selector<TRoot, ScaleType.Selector<TRoot, TParent>> light = null;
        private com.kscs.util.jaxb.Selector<TRoot, ScaleType.Selector<TRoot, TParent>> selectpoint = null;
        private com.kscs.util.jaxb.Selector<TRoot, ScaleType.Selector<TRoot, TParent>> jointlength = null;
        private com.kscs.util.jaxb.Selector<TRoot, ScaleType.Selector<TRoot, TParent>> jointwidth = null;
        private com.kscs.util.jaxb.Selector<TRoot, ScaleType.Selector<TRoot, TParent>> actuatorlength = null;
        private com.kscs.util.jaxb.Selector<TRoot, ScaleType.Selector<TRoot, TParent>> actuatorwidth = null;
        private com.kscs.util.jaxb.Selector<TRoot, ScaleType.Selector<TRoot, TParent>> framelength = null;
        private com.kscs.util.jaxb.Selector<TRoot, ScaleType.Selector<TRoot, TParent>> framewidth = null;
        private com.kscs.util.jaxb.Selector<TRoot, ScaleType.Selector<TRoot, TParent>> constraint = null;
        private com.kscs.util.jaxb.Selector<TRoot, ScaleType.Selector<TRoot, TParent>> slidercrank = null;

        public Selector(final TRoot root, final TParent parent, final String propertyName) {
            super(root, parent, propertyName);
        }

        @Override
        public Map<String, PropertyTree> buildChildren() {
            final Map<String, PropertyTree> products = new HashMap<String, PropertyTree>();
            products.putAll(super.buildChildren());
            if (this.forcewidth!= null) {
                products.put("forcewidth", this.forcewidth.init());
            }
            if (this.contactwidth!= null) {
                products.put("contactwidth", this.contactwidth.init());
            }
            if (this.contactheight!= null) {
                products.put("contactheight", this.contactheight.init());
            }
            if (this.connect!= null) {
                products.put("connect", this.connect.init());
            }
            if (this.com!= null) {
                products.put("com", this.com.init());
            }
            if (this.camera!= null) {
                products.put("camera", this.camera.init());
            }
            if (this.light!= null) {
                products.put("light", this.light.init());
            }
            if (this.selectpoint!= null) {
                products.put("selectpoint", this.selectpoint.init());
            }
            if (this.jointlength!= null) {
                products.put("jointlength", this.jointlength.init());
            }
            if (this.jointwidth!= null) {
                products.put("jointwidth", this.jointwidth.init());
            }
            if (this.actuatorlength!= null) {
                products.put("actuatorlength", this.actuatorlength.init());
            }
            if (this.actuatorwidth!= null) {
                products.put("actuatorwidth", this.actuatorwidth.init());
            }
            if (this.framelength!= null) {
                products.put("framelength", this.framelength.init());
            }
            if (this.framewidth!= null) {
                products.put("framewidth", this.framewidth.init());
            }
            if (this.constraint!= null) {
                products.put("constraint", this.constraint.init());
            }
            if (this.slidercrank!= null) {
                products.put("slidercrank", this.slidercrank.init());
            }
            return products;
        }

        public com.kscs.util.jaxb.Selector<TRoot, ScaleType.Selector<TRoot, TParent>> forcewidth() {
            return ((this.forcewidth == null)?this.forcewidth = new com.kscs.util.jaxb.Selector<TRoot, ScaleType.Selector<TRoot, TParent>>(this._root, this, "forcewidth"):this.forcewidth);
        }

        public com.kscs.util.jaxb.Selector<TRoot, ScaleType.Selector<TRoot, TParent>> contactwidth() {
            return ((this.contactwidth == null)?this.contactwidth = new com.kscs.util.jaxb.Selector<TRoot, ScaleType.Selector<TRoot, TParent>>(this._root, this, "contactwidth"):this.contactwidth);
        }

        public com.kscs.util.jaxb.Selector<TRoot, ScaleType.Selector<TRoot, TParent>> contactheight() {
            return ((this.contactheight == null)?this.contactheight = new com.kscs.util.jaxb.Selector<TRoot, ScaleType.Selector<TRoot, TParent>>(this._root, this, "contactheight"):this.contactheight);
        }

        public com.kscs.util.jaxb.Selector<TRoot, ScaleType.Selector<TRoot, TParent>> connect() {
            return ((this.connect == null)?this.connect = new com.kscs.util.jaxb.Selector<TRoot, ScaleType.Selector<TRoot, TParent>>(this._root, this, "connect"):this.connect);
        }

        public com.kscs.util.jaxb.Selector<TRoot, ScaleType.Selector<TRoot, TParent>> com() {
            return ((this.com == null)?this.com = new com.kscs.util.jaxb.Selector<TRoot, ScaleType.Selector<TRoot, TParent>>(this._root, this, "com"):this.com);
        }

        public com.kscs.util.jaxb.Selector<TRoot, ScaleType.Selector<TRoot, TParent>> camera() {
            return ((this.camera == null)?this.camera = new com.kscs.util.jaxb.Selector<TRoot, ScaleType.Selector<TRoot, TParent>>(this._root, this, "camera"):this.camera);
        }

        public com.kscs.util.jaxb.Selector<TRoot, ScaleType.Selector<TRoot, TParent>> light() {
            return ((this.light == null)?this.light = new com.kscs.util.jaxb.Selector<TRoot, ScaleType.Selector<TRoot, TParent>>(this._root, this, "light"):this.light);
        }

        public com.kscs.util.jaxb.Selector<TRoot, ScaleType.Selector<TRoot, TParent>> selectpoint() {
            return ((this.selectpoint == null)?this.selectpoint = new com.kscs.util.jaxb.Selector<TRoot, ScaleType.Selector<TRoot, TParent>>(this._root, this, "selectpoint"):this.selectpoint);
        }

        public com.kscs.util.jaxb.Selector<TRoot, ScaleType.Selector<TRoot, TParent>> jointlength() {
            return ((this.jointlength == null)?this.jointlength = new com.kscs.util.jaxb.Selector<TRoot, ScaleType.Selector<TRoot, TParent>>(this._root, this, "jointlength"):this.jointlength);
        }

        public com.kscs.util.jaxb.Selector<TRoot, ScaleType.Selector<TRoot, TParent>> jointwidth() {
            return ((this.jointwidth == null)?this.jointwidth = new com.kscs.util.jaxb.Selector<TRoot, ScaleType.Selector<TRoot, TParent>>(this._root, this, "jointwidth"):this.jointwidth);
        }

        public com.kscs.util.jaxb.Selector<TRoot, ScaleType.Selector<TRoot, TParent>> actuatorlength() {
            return ((this.actuatorlength == null)?this.actuatorlength = new com.kscs.util.jaxb.Selector<TRoot, ScaleType.Selector<TRoot, TParent>>(this._root, this, "actuatorlength"):this.actuatorlength);
        }

        public com.kscs.util.jaxb.Selector<TRoot, ScaleType.Selector<TRoot, TParent>> actuatorwidth() {
            return ((this.actuatorwidth == null)?this.actuatorwidth = new com.kscs.util.jaxb.Selector<TRoot, ScaleType.Selector<TRoot, TParent>>(this._root, this, "actuatorwidth"):this.actuatorwidth);
        }

        public com.kscs.util.jaxb.Selector<TRoot, ScaleType.Selector<TRoot, TParent>> framelength() {
            return ((this.framelength == null)?this.framelength = new com.kscs.util.jaxb.Selector<TRoot, ScaleType.Selector<TRoot, TParent>>(this._root, this, "framelength"):this.framelength);
        }

        public com.kscs.util.jaxb.Selector<TRoot, ScaleType.Selector<TRoot, TParent>> framewidth() {
            return ((this.framewidth == null)?this.framewidth = new com.kscs.util.jaxb.Selector<TRoot, ScaleType.Selector<TRoot, TParent>>(this._root, this, "framewidth"):this.framewidth);
        }

        public com.kscs.util.jaxb.Selector<TRoot, ScaleType.Selector<TRoot, TParent>> constraint() {
            return ((this.constraint == null)?this.constraint = new com.kscs.util.jaxb.Selector<TRoot, ScaleType.Selector<TRoot, TParent>>(this._root, this, "constraint"):this.constraint);
        }

        public com.kscs.util.jaxb.Selector<TRoot, ScaleType.Selector<TRoot, TParent>> slidercrank() {
            return ((this.slidercrank == null)?this.slidercrank = new com.kscs.util.jaxb.Selector<TRoot, ScaleType.Selector<TRoot, TParent>>(this._root, this, "slidercrank"):this.slidercrank);
        }

    }

}
