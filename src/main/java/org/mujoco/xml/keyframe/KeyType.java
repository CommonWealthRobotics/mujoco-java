//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.3.0 
// See <a href="https://javaee.github.io/jaxb-v2/">https://javaee.github.io/jaxb-v2/</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2024.03.13 at 04:45:57 PM EDT 
//


package org.mujoco.xml.keyframe;

import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeSupport;
import java.beans.PropertyVetoException;
import java.beans.VetoableChangeListener;
import java.beans.VetoableChangeSupport;
import java.math.BigDecimal;
import java.util.HashMap;
import java.util.Map;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlType;
import com.kscs.util.jaxb.Buildable;
import com.kscs.util.jaxb.Copyable;
import com.kscs.util.jaxb.PartialCopyable;
import com.kscs.util.jaxb.PropertyTree;
import com.kscs.util.jaxb.PropertyTreeUse;
import com.kscs.util.jaxb.PropertyVisitor;


/**
 * <p>Java class for keyType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="keyType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;attribute name="name" type="{http://www.w3.org/2001/XMLSchema}string" /&gt;
 *       &lt;attribute name="time" type="{http://www.w3.org/2001/XMLSchema}decimal" default="0" /&gt;
 *       &lt;attribute name="qpos" type="{attributeTypes}infRealsType" /&gt;
 *       &lt;attribute name="qvel" type="{attributeTypes}infRealsType" /&gt;
 *       &lt;attribute name="act" type="{attributeTypes}infRealsType" /&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "keyType")
public class KeyType implements Cloneable, Copyable, PartialCopyable
{

    @XmlAttribute(name = "name")
    protected String name;
    @XmlAttribute(name = "time")
    protected BigDecimal time;
    @XmlAttribute(name = "qpos")
    protected String qpos;
    @XmlAttribute(name = "qvel")
    protected String qvel;
    @XmlAttribute(name = "act")
    protected String act;
    protected final transient VetoableChangeSupport vetoableChange__Support = new VetoableChangeSupport(this);
    protected final transient PropertyChangeSupport propertyChange__Support = new PropertyChangeSupport(this);

    /**
     * Generated by copy-constructor plugin, JAXB requires public no-arg constructor.
     * 
     */
    public KeyType() {
        // Generated by copy-constructor plugin, JAXB requires public no-arg constructor.
    }

    /**
     * Instantiates a KeyType copying the state of another KeyType
     * 
     * @param _other
     *     The original KeyType from which to copy state.
     */
    public KeyType(final KeyType _other) {
        this.name = _other.name;
        this.time = _other.time;
        this.qpos = _other.qpos;
        this.qvel = _other.qvel;
        this.act = _other.act;
    }

    /**
     * Instantiates a KeyType copying the state of another KeyType
     * 
     * @param _propertyTreeUse
     *     Meaning of the : Exclude or include members contained in property path.
     * @param _propertyTree
     *     A restricting  that defines which nodes of the source object tree should actually be copied.
     * @param _other
     *     The original KeyType from which to copy state.
     */
    public KeyType(final KeyType _other, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        final PropertyTree namePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("name"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(namePropertyTree!= null):((namePropertyTree == null)||(!namePropertyTree.isLeaf())))) {
            this.name = _other.name;
        }
        final PropertyTree timePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("time"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(timePropertyTree!= null):((timePropertyTree == null)||(!timePropertyTree.isLeaf())))) {
            this.time = _other.time;
        }
        final PropertyTree qposPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("qpos"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(qposPropertyTree!= null):((qposPropertyTree == null)||(!qposPropertyTree.isLeaf())))) {
            this.qpos = _other.qpos;
        }
        final PropertyTree qvelPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("qvel"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(qvelPropertyTree!= null):((qvelPropertyTree == null)||(!qvelPropertyTree.isLeaf())))) {
            this.qvel = _other.qvel;
        }
        final PropertyTree actPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("act"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(actPropertyTree!= null):((actPropertyTree == null)||(!actPropertyTree.isLeaf())))) {
            this.act = _other.act;
        }
    }

    /**
     * Gets the value of the name property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getName() {
        return name;
    }

    /**
     * Gets the value of the time property.
     * 
     * @return
     *     possible object is
     *     {@link BigDecimal }
     *     
     */
    public BigDecimal getTime() {
        if (time == null) {
            return new BigDecimal("0");
        } else {
            return time;
        }
    }

    /**
     * Gets the value of the qpos property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getQpos() {
        return qpos;
    }

    /**
     * Gets the value of the qvel property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getQvel() {
        return qvel;
    }

    /**
     * Gets the value of the act property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getAct() {
        return act;
    }

    public void addVetoableChangeListener(final VetoableChangeListener vetoableChangeListener) {
        this.vetoableChange__Support.addVetoableChangeListener(vetoableChangeListener);
    }

    public void removeVetoableChangeListener(final VetoableChangeListener vetoableChangeListener) {
        this.vetoableChange__Support.removeVetoableChangeListener(vetoableChangeListener);
    }

    public KeyType withVetoableChangeListener(final VetoableChangeListener vetoableChangeListener) {
        addVetoableChangeListener(vetoableChangeListener);
        return this;
    }

    public void addPropertyChangeListener(final PropertyChangeListener propertyChangeListener) {
        this.propertyChange__Support.addPropertyChangeListener(propertyChangeListener);
    }

    public void removePropertyChangeListener(final PropertyChangeListener propertyChangeListener) {
        this.propertyChange__Support.removePropertyChangeListener(propertyChangeListener);
    }

    public KeyType withPropertyChangeListener(final PropertyChangeListener propertyChangeListener) {
        addPropertyChangeListener(propertyChangeListener);
        return this;
    }

    public void setName(final String value) {
        final String __oldValue = this.name;
        try {
            this.vetoableChange__Support.fireVetoableChange("name", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.name = value;
        this.propertyChange__Support.firePropertyChange("name", __oldValue, value);
    }

    public void setTime(final BigDecimal value) {
        final BigDecimal __oldValue = this.time;
        try {
            this.vetoableChange__Support.fireVetoableChange("time", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.time = value;
        this.propertyChange__Support.firePropertyChange("time", __oldValue, value);
    }

    public void setQpos(final String value) {
        final String __oldValue = this.qpos;
        try {
            this.vetoableChange__Support.fireVetoableChange("qpos", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.qpos = value;
        this.propertyChange__Support.firePropertyChange("qpos", __oldValue, value);
    }

    public void setQvel(final String value) {
        final String __oldValue = this.qvel;
        try {
            this.vetoableChange__Support.fireVetoableChange("qvel", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.qvel = value;
        this.propertyChange__Support.firePropertyChange("qvel", __oldValue, value);
    }

    public void setAct(final String value) {
        final String __oldValue = this.act;
        try {
            this.vetoableChange__Support.fireVetoableChange("act", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.act = value;
        this.propertyChange__Support.firePropertyChange("act", __oldValue, value);
    }

    @Override
    public KeyType clone() {
        final KeyType _newObject;
        try {
            _newObject = ((KeyType) super.clone());
        } catch (CloneNotSupportedException e) {
            throw new RuntimeException(e);
        }
        return _newObject;
    }

    @Override
    public KeyType createCopy() {
        final KeyType _newObject;
        try {
            _newObject = ((KeyType) super.clone());
        } catch (CloneNotSupportedException e) {
            throw new RuntimeException(e);
        }
        _newObject.name = this.name;
        _newObject.time = this.time;
        _newObject.qpos = this.qpos;
        _newObject.qvel = this.qvel;
        _newObject.act = this.act;
        return _newObject;
    }

    @Override
    public KeyType createCopy(final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        final KeyType _newObject;
        try {
            _newObject = ((KeyType) super.clone());
        } catch (CloneNotSupportedException e) {
            throw new RuntimeException(e);
        }
        final PropertyTree namePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("name"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(namePropertyTree!= null):((namePropertyTree == null)||(!namePropertyTree.isLeaf())))) {
            _newObject.name = this.name;
        }
        final PropertyTree timePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("time"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(timePropertyTree!= null):((timePropertyTree == null)||(!timePropertyTree.isLeaf())))) {
            _newObject.time = this.time;
        }
        final PropertyTree qposPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("qpos"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(qposPropertyTree!= null):((qposPropertyTree == null)||(!qposPropertyTree.isLeaf())))) {
            _newObject.qpos = this.qpos;
        }
        final PropertyTree qvelPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("qvel"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(qvelPropertyTree!= null):((qvelPropertyTree == null)||(!qvelPropertyTree.isLeaf())))) {
            _newObject.qvel = this.qvel;
        }
        final PropertyTree actPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("act"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(actPropertyTree!= null):((actPropertyTree == null)||(!actPropertyTree.isLeaf())))) {
            _newObject.act = this.act;
        }
        return _newObject;
    }

    @Override
    public KeyType copyExcept(final PropertyTree _propertyTree) {
        return createCopy(_propertyTree, PropertyTreeUse.EXCLUDE);
    }

    @Override
    public KeyType copyOnly(final PropertyTree _propertyTree) {
        return createCopy(_propertyTree, PropertyTreeUse.INCLUDE);
    }

    /**
     * Copies all state of this object to a builder. This method is used by the {@link #copyOf} method and should not be called directly by client code.
     * 
     * @param _other
     *     A builder instance to which the state of this object will be copied.
     */
    public<_B >void copyTo(final KeyType.Builder<_B> _other) {
        _other.name = this.name;
        _other.time = this.time;
        _other.qpos = this.qpos;
        _other.qvel = this.qvel;
        _other.act = this.act;
    }

    public<_B >KeyType.Builder<_B> newCopyBuilder(final _B _parentBuilder) {
        return new KeyType.Builder<_B>(_parentBuilder, this, true);
    }

    public KeyType.Builder<Void> newCopyBuilder() {
        return newCopyBuilder(null);
    }

    public static KeyType.Builder<Void> builder() {
        return new KeyType.Builder<Void>(null, null, false);
    }

    public static<_B >KeyType.Builder<_B> copyOf(final KeyType _other) {
        final KeyType.Builder<_B> _newBuilder = new KeyType.Builder<_B>(null, null, false);
        _other.copyTo(_newBuilder);
        return _newBuilder;
    }

    /**
     * Copies all state of this object to a builder. This method is used by the {@link #copyOf} method and should not be called directly by client code.
     * 
     * @param _other
     *     A builder instance to which the state of this object will be copied.
     */
    public<_B >void copyTo(final KeyType.Builder<_B> _other, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        final PropertyTree namePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("name"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(namePropertyTree!= null):((namePropertyTree == null)||(!namePropertyTree.isLeaf())))) {
            _other.name = this.name;
        }
        final PropertyTree timePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("time"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(timePropertyTree!= null):((timePropertyTree == null)||(!timePropertyTree.isLeaf())))) {
            _other.time = this.time;
        }
        final PropertyTree qposPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("qpos"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(qposPropertyTree!= null):((qposPropertyTree == null)||(!qposPropertyTree.isLeaf())))) {
            _other.qpos = this.qpos;
        }
        final PropertyTree qvelPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("qvel"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(qvelPropertyTree!= null):((qvelPropertyTree == null)||(!qvelPropertyTree.isLeaf())))) {
            _other.qvel = this.qvel;
        }
        final PropertyTree actPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("act"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(actPropertyTree!= null):((actPropertyTree == null)||(!actPropertyTree.isLeaf())))) {
            _other.act = this.act;
        }
    }

    public<_B >KeyType.Builder<_B> newCopyBuilder(final _B _parentBuilder, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        return new KeyType.Builder<_B>(_parentBuilder, this, true, _propertyTree, _propertyTreeUse);
    }

    public KeyType.Builder<Void> newCopyBuilder(final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        return newCopyBuilder(null, _propertyTree, _propertyTreeUse);
    }

    public static<_B >KeyType.Builder<_B> copyOf(final KeyType _other, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        final KeyType.Builder<_B> _newBuilder = new KeyType.Builder<_B>(null, null, false);
        _other.copyTo(_newBuilder, _propertyTree, _propertyTreeUse);
        return _newBuilder;
    }

    public static KeyType.Builder<Void> copyExcept(final KeyType _other, final PropertyTree _propertyTree) {
        return copyOf(_other, _propertyTree, PropertyTreeUse.EXCLUDE);
    }

    public static KeyType.Builder<Void> copyOnly(final KeyType _other, final PropertyTree _propertyTree) {
        return copyOf(_other, _propertyTree, PropertyTreeUse.INCLUDE);
    }

    public KeyType visit(final PropertyVisitor _visitor_) {
        _visitor_.visit(this);
        return this;
    }

    public static class Builder<_B >implements Buildable
    {

        protected final _B _parentBuilder;
        private String name;
        private BigDecimal time;
        private String qpos;
        private String qvel;
        private String act;

        public Builder(final _B _parentBuilder, final KeyType _other, final boolean _copy) {
            this._parentBuilder = _parentBuilder;
            if (_other!= null) {
                this.name = _other.name;
                this.time = _other.time;
                this.qpos = _other.qpos;
                this.qvel = _other.qvel;
                this.act = _other.act;
            }
        }

        public Builder(final _B _parentBuilder, final KeyType _other, final boolean _copy, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
            this._parentBuilder = _parentBuilder;
            if (_other!= null) {
                final PropertyTree namePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("name"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(namePropertyTree!= null):((namePropertyTree == null)||(!namePropertyTree.isLeaf())))) {
                    this.name = _other.name;
                }
                final PropertyTree timePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("time"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(timePropertyTree!= null):((timePropertyTree == null)||(!timePropertyTree.isLeaf())))) {
                    this.time = _other.time;
                }
                final PropertyTree qposPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("qpos"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(qposPropertyTree!= null):((qposPropertyTree == null)||(!qposPropertyTree.isLeaf())))) {
                    this.qpos = _other.qpos;
                }
                final PropertyTree qvelPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("qvel"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(qvelPropertyTree!= null):((qvelPropertyTree == null)||(!qvelPropertyTree.isLeaf())))) {
                    this.qvel = _other.qvel;
                }
                final PropertyTree actPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("act"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(actPropertyTree!= null):((actPropertyTree == null)||(!actPropertyTree.isLeaf())))) {
                    this.act = _other.act;
                }
            }
        }

        public _B end() {
            return this._parentBuilder;
        }

        protected<_P extends KeyType >_P init(final _P _product) {
            _product.name = this.name;
            _product.time = this.time;
            _product.qpos = this.qpos;
            _product.qvel = this.qvel;
            _product.act = this.act;
            return _product;
        }

        /**
         * Sets the new value of "name" (any previous value will be replaced)
         * 
         * @param name
         *     New value of the "name" property.
         */
        public KeyType.Builder<_B> withName(final String name) {
            this.name = name;
            return this;
        }

        /**
         * Sets the new value of "time" (any previous value will be replaced)
         * 
         * @param time
         *     New value of the "time" property.
         */
        public KeyType.Builder<_B> withTime(final BigDecimal time) {
            this.time = time;
            return this;
        }

        /**
         * Sets the new value of "qpos" (any previous value will be replaced)
         * 
         * @param qpos
         *     New value of the "qpos" property.
         */
        public KeyType.Builder<_B> withQpos(final String qpos) {
            this.qpos = qpos;
            return this;
        }

        /**
         * Sets the new value of "qvel" (any previous value will be replaced)
         * 
         * @param qvel
         *     New value of the "qvel" property.
         */
        public KeyType.Builder<_B> withQvel(final String qvel) {
            this.qvel = qvel;
            return this;
        }

        /**
         * Sets the new value of "act" (any previous value will be replaced)
         * 
         * @param act
         *     New value of the "act" property.
         */
        public KeyType.Builder<_B> withAct(final String act) {
            this.act = act;
            return this;
        }

        @Override
        public KeyType build() {
            return this.init(new KeyType());
        }

        public KeyType.Builder<_B> copyOf(final KeyType _other) {
            _other.copyTo(this);
            return this;
        }

        public KeyType.Builder<_B> copyOf(final KeyType.Builder _other) {
            return copyOf(_other.build());
        }

    }

    public static class PropInfo {

        public final static transient String NAME = "name";
        public final static transient String TIME = "time";
        public final static transient String QPOS = "qpos";
        public final static transient String QVEL = "qvel";
        public final static transient String ACT = "act";

    }

    public static class Select
        extends KeyType.Selector<KeyType.Select, Void>
    {


        Select() {
            super(null, null, null);
        }

        public static KeyType.Select _root() {
            return new KeyType.Select();
        }

    }

    public static class Selector<TRoot extends com.kscs.util.jaxb.Selector<TRoot, ?> , TParent >
        extends com.kscs.util.jaxb.Selector<TRoot, TParent>
    {

        private com.kscs.util.jaxb.Selector<TRoot, KeyType.Selector<TRoot, TParent>> name = null;
        private com.kscs.util.jaxb.Selector<TRoot, KeyType.Selector<TRoot, TParent>> time = null;
        private com.kscs.util.jaxb.Selector<TRoot, KeyType.Selector<TRoot, TParent>> qpos = null;
        private com.kscs.util.jaxb.Selector<TRoot, KeyType.Selector<TRoot, TParent>> qvel = null;
        private com.kscs.util.jaxb.Selector<TRoot, KeyType.Selector<TRoot, TParent>> act = null;

        public Selector(final TRoot root, final TParent parent, final String propertyName) {
            super(root, parent, propertyName);
        }

        @Override
        public Map<String, PropertyTree> buildChildren() {
            final Map<String, PropertyTree> products = new HashMap<String, PropertyTree>();
            products.putAll(super.buildChildren());
            if (this.name!= null) {
                products.put("name", this.name.init());
            }
            if (this.time!= null) {
                products.put("time", this.time.init());
            }
            if (this.qpos!= null) {
                products.put("qpos", this.qpos.init());
            }
            if (this.qvel!= null) {
                products.put("qvel", this.qvel.init());
            }
            if (this.act!= null) {
                products.put("act", this.act.init());
            }
            return products;
        }

        public com.kscs.util.jaxb.Selector<TRoot, KeyType.Selector<TRoot, TParent>> name() {
            return ((this.name == null)?this.name = new com.kscs.util.jaxb.Selector<TRoot, KeyType.Selector<TRoot, TParent>>(this._root, this, "name"):this.name);
        }

        public com.kscs.util.jaxb.Selector<TRoot, KeyType.Selector<TRoot, TParent>> time() {
            return ((this.time == null)?this.time = new com.kscs.util.jaxb.Selector<TRoot, KeyType.Selector<TRoot, TParent>>(this._root, this, "time"):this.time);
        }

        public com.kscs.util.jaxb.Selector<TRoot, KeyType.Selector<TRoot, TParent>> qpos() {
            return ((this.qpos == null)?this.qpos = new com.kscs.util.jaxb.Selector<TRoot, KeyType.Selector<TRoot, TParent>>(this._root, this, "qpos"):this.qpos);
        }

        public com.kscs.util.jaxb.Selector<TRoot, KeyType.Selector<TRoot, TParent>> qvel() {
            return ((this.qvel == null)?this.qvel = new com.kscs.util.jaxb.Selector<TRoot, KeyType.Selector<TRoot, TParent>>(this._root, this, "qvel"):this.qvel);
        }

        public com.kscs.util.jaxb.Selector<TRoot, KeyType.Selector<TRoot, TParent>> act() {
            return ((this.act == null)?this.act = new com.kscs.util.jaxb.Selector<TRoot, KeyType.Selector<TRoot, TParent>>(this._root, this, "act"):this.act);
        }

    }

}
