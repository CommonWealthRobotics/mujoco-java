//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.3.0 
// See <a href="https://javaee.github.io/jaxb-v2/">https://javaee.github.io/jaxb-v2/</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2024.03.13 at 04:45:57 PM EDT 
//


package org.mujoco.xml.compiler;

import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeSupport;
import java.beans.PropertyVetoException;
import java.beans.VetoableChangeListener;
import java.beans.VetoableChangeSupport;
import java.math.BigDecimal;
import java.util.HashMap;
import java.util.Map;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlType;
import com.kscs.util.jaxb.Buildable;
import com.kscs.util.jaxb.Copyable;
import com.kscs.util.jaxb.PartialCopyable;
import com.kscs.util.jaxb.PropertyTree;
import com.kscs.util.jaxb.PropertyTreeUse;
import com.kscs.util.jaxb.PropertyVisitor;
import org.mujoco.xml.attributetypes.ModeType;


/**
 * <p>Java class for lengthrangeType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="lengthrangeType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;attribute name="mode" type="{attributeTypes}modeType" default="muscle" /&gt;
 *       &lt;attribute name="useexisting" type="{http://www.w3.org/2001/XMLSchema}boolean" default="true" /&gt;
 *       &lt;attribute name="uselimit" type="{http://www.w3.org/2001/XMLSchema}boolean" default="false" /&gt;
 *       &lt;attribute name="accel" type="{http://www.w3.org/2001/XMLSchema}decimal" default="20" /&gt;
 *       &lt;attribute name="maxforce" type="{http://www.w3.org/2001/XMLSchema}decimal" default="0" /&gt;
 *       &lt;attribute name="timeconst" type="{http://www.w3.org/2001/XMLSchema}decimal" default="1" /&gt;
 *       &lt;attribute name="timestep" type="{http://www.w3.org/2001/XMLSchema}decimal" default=".01" /&gt;
 *       &lt;attribute name="inttotal" type="{http://www.w3.org/2001/XMLSchema}decimal" default="10" /&gt;
 *       &lt;attribute name="inteval" type="{http://www.w3.org/2001/XMLSchema}decimal" default="2" /&gt;
 *       &lt;attribute name="tolrange" type="{http://www.w3.org/2001/XMLSchema}decimal" default=".05" /&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "lengthrangeType")
public class LengthrangeType implements Cloneable, Copyable, PartialCopyable
{

    @XmlAttribute(name = "mode")
    protected ModeType mode;
    @XmlAttribute(name = "useexisting")
    protected Boolean useexisting;
    @XmlAttribute(name = "uselimit")
    protected Boolean uselimit;
    @XmlAttribute(name = "accel")
    protected BigDecimal accel;
    @XmlAttribute(name = "maxforce")
    protected BigDecimal maxforce;
    @XmlAttribute(name = "timeconst")
    protected BigDecimal timeconst;
    @XmlAttribute(name = "timestep")
    protected BigDecimal timestep;
    @XmlAttribute(name = "inttotal")
    protected BigDecimal inttotal;
    @XmlAttribute(name = "inteval")
    protected BigDecimal inteval;
    @XmlAttribute(name = "tolrange")
    protected BigDecimal tolrange;
    protected final transient VetoableChangeSupport vetoableChange__Support = new VetoableChangeSupport(this);
    protected final transient PropertyChangeSupport propertyChange__Support = new PropertyChangeSupport(this);

    /**
     * Generated by copy-constructor plugin, JAXB requires public no-arg constructor.
     * 
     */
    public LengthrangeType() {
        // Generated by copy-constructor plugin, JAXB requires public no-arg constructor.
    }

    /**
     * Instantiates a LengthrangeType copying the state of another LengthrangeType
     * 
     * @param _other
     *     The original LengthrangeType from which to copy state.
     */
    public LengthrangeType(final LengthrangeType _other) {
        this.mode = _other.mode;
        this.useexisting = _other.useexisting;
        this.uselimit = _other.uselimit;
        this.accel = _other.accel;
        this.maxforce = _other.maxforce;
        this.timeconst = _other.timeconst;
        this.timestep = _other.timestep;
        this.inttotal = _other.inttotal;
        this.inteval = _other.inteval;
        this.tolrange = _other.tolrange;
    }

    /**
     * Instantiates a LengthrangeType copying the state of another LengthrangeType
     * 
     * @param _propertyTreeUse
     *     Meaning of the {@link PropertyPath}: Exclude or include members contained in property path.
     * @param _propertyTree
     *     A restricting {@link PropertyPath} that defines which nodes of the source object tree should actually be copied.
     * @param _other
     *     The original LengthrangeType from which to copy state.
     */
    public LengthrangeType(final LengthrangeType _other, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        final PropertyTree modePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("mode"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(modePropertyTree!= null):((modePropertyTree == null)||(!modePropertyTree.isLeaf())))) {
            this.mode = _other.mode;
        }
        final PropertyTree useexistingPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("useexisting"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(useexistingPropertyTree!= null):((useexistingPropertyTree == null)||(!useexistingPropertyTree.isLeaf())))) {
            this.useexisting = _other.useexisting;
        }
        final PropertyTree uselimitPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("uselimit"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(uselimitPropertyTree!= null):((uselimitPropertyTree == null)||(!uselimitPropertyTree.isLeaf())))) {
            this.uselimit = _other.uselimit;
        }
        final PropertyTree accelPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("accel"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(accelPropertyTree!= null):((accelPropertyTree == null)||(!accelPropertyTree.isLeaf())))) {
            this.accel = _other.accel;
        }
        final PropertyTree maxforcePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("maxforce"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(maxforcePropertyTree!= null):((maxforcePropertyTree == null)||(!maxforcePropertyTree.isLeaf())))) {
            this.maxforce = _other.maxforce;
        }
        final PropertyTree timeconstPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("timeconst"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(timeconstPropertyTree!= null):((timeconstPropertyTree == null)||(!timeconstPropertyTree.isLeaf())))) {
            this.timeconst = _other.timeconst;
        }
        final PropertyTree timestepPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("timestep"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(timestepPropertyTree!= null):((timestepPropertyTree == null)||(!timestepPropertyTree.isLeaf())))) {
            this.timestep = _other.timestep;
        }
        final PropertyTree inttotalPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("inttotal"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(inttotalPropertyTree!= null):((inttotalPropertyTree == null)||(!inttotalPropertyTree.isLeaf())))) {
            this.inttotal = _other.inttotal;
        }
        final PropertyTree intevalPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("inteval"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(intevalPropertyTree!= null):((intevalPropertyTree == null)||(!intevalPropertyTree.isLeaf())))) {
            this.inteval = _other.inteval;
        }
        final PropertyTree tolrangePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("tolrange"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(tolrangePropertyTree!= null):((tolrangePropertyTree == null)||(!tolrangePropertyTree.isLeaf())))) {
            this.tolrange = _other.tolrange;
        }
    }

    /**
     * Gets the value of the mode property.
     * 
     * @return
     *     possible object is
     *     {@link ModeType }
     *     
     */
    public ModeType getMode() {
        if (mode == null) {
            return ModeType.MUSCLE;
        } else {
            return mode;
        }
    }

    /**
     * Gets the value of the useexisting property.
     * 
     * @return
     *     possible object is
     *     {@link Boolean }
     *     
     */
    public boolean isUseexisting() {
        if (useexisting == null) {
            return true;
        } else {
            return useexisting;
        }
    }

    /**
     * Gets the value of the uselimit property.
     * 
     * @return
     *     possible object is
     *     {@link Boolean }
     *     
     */
    public boolean isUselimit() {
        if (uselimit == null) {
            return false;
        } else {
            return uselimit;
        }
    }

    /**
     * Gets the value of the accel property.
     * 
     * @return
     *     possible object is
     *     {@link BigDecimal }
     *     
     */
    public BigDecimal getAccel() {
        if (accel == null) {
            return new BigDecimal("20");
        } else {
            return accel;
        }
    }

    /**
     * Gets the value of the maxforce property.
     * 
     * @return
     *     possible object is
     *     {@link BigDecimal }
     *     
     */
    public BigDecimal getMaxforce() {
        if (maxforce == null) {
            return new BigDecimal("0");
        } else {
            return maxforce;
        }
    }

    /**
     * Gets the value of the timeconst property.
     * 
     * @return
     *     possible object is
     *     {@link BigDecimal }
     *     
     */
    public BigDecimal getTimeconst() {
        if (timeconst == null) {
            return new BigDecimal("1");
        } else {
            return timeconst;
        }
    }

    /**
     * Gets the value of the timestep property.
     * 
     * @return
     *     possible object is
     *     {@link BigDecimal }
     *     
     */
    public BigDecimal getTimestep() {
        if (timestep == null) {
            return new BigDecimal(".01");
        } else {
            return timestep;
        }
    }

    /**
     * Gets the value of the inttotal property.
     * 
     * @return
     *     possible object is
     *     {@link BigDecimal }
     *     
     */
    public BigDecimal getInttotal() {
        if (inttotal == null) {
            return new BigDecimal("10");
        } else {
            return inttotal;
        }
    }

    /**
     * Gets the value of the inteval property.
     * 
     * @return
     *     possible object is
     *     {@link BigDecimal }
     *     
     */
    public BigDecimal getInteval() {
        if (inteval == null) {
            return new BigDecimal("2");
        } else {
            return inteval;
        }
    }

    /**
     * Gets the value of the tolrange property.
     * 
     * @return
     *     possible object is
     *     {@link BigDecimal }
     *     
     */
    public BigDecimal getTolrange() {
        if (tolrange == null) {
            return new BigDecimal(".05");
        } else {
            return tolrange;
        }
    }

    public void addVetoableChangeListener(final VetoableChangeListener vetoableChangeListener) {
        this.vetoableChange__Support.addVetoableChangeListener(vetoableChangeListener);
    }

    public void removeVetoableChangeListener(final VetoableChangeListener vetoableChangeListener) {
        this.vetoableChange__Support.removeVetoableChangeListener(vetoableChangeListener);
    }

    public LengthrangeType withVetoableChangeListener(final VetoableChangeListener vetoableChangeListener) {
        addVetoableChangeListener(vetoableChangeListener);
        return this;
    }

    public void addPropertyChangeListener(final PropertyChangeListener propertyChangeListener) {
        this.propertyChange__Support.addPropertyChangeListener(propertyChangeListener);
    }

    public void removePropertyChangeListener(final PropertyChangeListener propertyChangeListener) {
        this.propertyChange__Support.removePropertyChangeListener(propertyChangeListener);
    }

    public LengthrangeType withPropertyChangeListener(final PropertyChangeListener propertyChangeListener) {
        addPropertyChangeListener(propertyChangeListener);
        return this;
    }

    public void setMode(final ModeType value) {
        final ModeType __oldValue = this.mode;
        try {
            this.vetoableChange__Support.fireVetoableChange("mode", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.mode = value;
        this.propertyChange__Support.firePropertyChange("mode", __oldValue, value);
    }

    public void setUseexisting(final Boolean value) {
        final Boolean __oldValue = this.useexisting;
        try {
            this.vetoableChange__Support.fireVetoableChange("useexisting", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.useexisting = value;
        this.propertyChange__Support.firePropertyChange("useexisting", __oldValue, value);
    }

    public void setUselimit(final Boolean value) {
        final Boolean __oldValue = this.uselimit;
        try {
            this.vetoableChange__Support.fireVetoableChange("uselimit", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.uselimit = value;
        this.propertyChange__Support.firePropertyChange("uselimit", __oldValue, value);
    }

    public void setAccel(final BigDecimal value) {
        final BigDecimal __oldValue = this.accel;
        try {
            this.vetoableChange__Support.fireVetoableChange("accel", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.accel = value;
        this.propertyChange__Support.firePropertyChange("accel", __oldValue, value);
    }

    public void setMaxforce(final BigDecimal value) {
        final BigDecimal __oldValue = this.maxforce;
        try {
            this.vetoableChange__Support.fireVetoableChange("maxforce", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.maxforce = value;
        this.propertyChange__Support.firePropertyChange("maxforce", __oldValue, value);
    }

    public void setTimeconst(final BigDecimal value) {
        final BigDecimal __oldValue = this.timeconst;
        try {
            this.vetoableChange__Support.fireVetoableChange("timeconst", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.timeconst = value;
        this.propertyChange__Support.firePropertyChange("timeconst", __oldValue, value);
    }

    public void setTimestep(final BigDecimal value) {
        final BigDecimal __oldValue = this.timestep;
        try {
            this.vetoableChange__Support.fireVetoableChange("timestep", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.timestep = value;
        this.propertyChange__Support.firePropertyChange("timestep", __oldValue, value);
    }

    public void setInttotal(final BigDecimal value) {
        final BigDecimal __oldValue = this.inttotal;
        try {
            this.vetoableChange__Support.fireVetoableChange("inttotal", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.inttotal = value;
        this.propertyChange__Support.firePropertyChange("inttotal", __oldValue, value);
    }

    public void setInteval(final BigDecimal value) {
        final BigDecimal __oldValue = this.inteval;
        try {
            this.vetoableChange__Support.fireVetoableChange("inteval", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.inteval = value;
        this.propertyChange__Support.firePropertyChange("inteval", __oldValue, value);
    }

    public void setTolrange(final BigDecimal value) {
        final BigDecimal __oldValue = this.tolrange;
        try {
            this.vetoableChange__Support.fireVetoableChange("tolrange", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.tolrange = value;
        this.propertyChange__Support.firePropertyChange("tolrange", __oldValue, value);
    }

    @Override
    public LengthrangeType clone() {
        final LengthrangeType _newObject;
        try {
            _newObject = ((LengthrangeType) super.clone());
        } catch (CloneNotSupportedException e) {
            throw new RuntimeException(e);
        }
        return _newObject;
    }

    @Override
    public LengthrangeType createCopy() {
        final LengthrangeType _newObject;
        try {
            _newObject = ((LengthrangeType) super.clone());
        } catch (CloneNotSupportedException e) {
            throw new RuntimeException(e);
        }
        _newObject.mode = this.mode;
        _newObject.useexisting = this.useexisting;
        _newObject.uselimit = this.uselimit;
        _newObject.accel = this.accel;
        _newObject.maxforce = this.maxforce;
        _newObject.timeconst = this.timeconst;
        _newObject.timestep = this.timestep;
        _newObject.inttotal = this.inttotal;
        _newObject.inteval = this.inteval;
        _newObject.tolrange = this.tolrange;
        return _newObject;
    }

    @Override
    public LengthrangeType createCopy(final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        final LengthrangeType _newObject;
        try {
            _newObject = ((LengthrangeType) super.clone());
        } catch (CloneNotSupportedException e) {
            throw new RuntimeException(e);
        }
        final PropertyTree modePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("mode"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(modePropertyTree!= null):((modePropertyTree == null)||(!modePropertyTree.isLeaf())))) {
            _newObject.mode = this.mode;
        }
        final PropertyTree useexistingPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("useexisting"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(useexistingPropertyTree!= null):((useexistingPropertyTree == null)||(!useexistingPropertyTree.isLeaf())))) {
            _newObject.useexisting = this.useexisting;
        }
        final PropertyTree uselimitPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("uselimit"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(uselimitPropertyTree!= null):((uselimitPropertyTree == null)||(!uselimitPropertyTree.isLeaf())))) {
            _newObject.uselimit = this.uselimit;
        }
        final PropertyTree accelPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("accel"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(accelPropertyTree!= null):((accelPropertyTree == null)||(!accelPropertyTree.isLeaf())))) {
            _newObject.accel = this.accel;
        }
        final PropertyTree maxforcePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("maxforce"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(maxforcePropertyTree!= null):((maxforcePropertyTree == null)||(!maxforcePropertyTree.isLeaf())))) {
            _newObject.maxforce = this.maxforce;
        }
        final PropertyTree timeconstPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("timeconst"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(timeconstPropertyTree!= null):((timeconstPropertyTree == null)||(!timeconstPropertyTree.isLeaf())))) {
            _newObject.timeconst = this.timeconst;
        }
        final PropertyTree timestepPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("timestep"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(timestepPropertyTree!= null):((timestepPropertyTree == null)||(!timestepPropertyTree.isLeaf())))) {
            _newObject.timestep = this.timestep;
        }
        final PropertyTree inttotalPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("inttotal"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(inttotalPropertyTree!= null):((inttotalPropertyTree == null)||(!inttotalPropertyTree.isLeaf())))) {
            _newObject.inttotal = this.inttotal;
        }
        final PropertyTree intevalPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("inteval"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(intevalPropertyTree!= null):((intevalPropertyTree == null)||(!intevalPropertyTree.isLeaf())))) {
            _newObject.inteval = this.inteval;
        }
        final PropertyTree tolrangePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("tolrange"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(tolrangePropertyTree!= null):((tolrangePropertyTree == null)||(!tolrangePropertyTree.isLeaf())))) {
            _newObject.tolrange = this.tolrange;
        }
        return _newObject;
    }

    @Override
    public LengthrangeType copyExcept(final PropertyTree _propertyTree) {
        return createCopy(_propertyTree, PropertyTreeUse.EXCLUDE);
    }

    @Override
    public LengthrangeType copyOnly(final PropertyTree _propertyTree) {
        return createCopy(_propertyTree, PropertyTreeUse.INCLUDE);
    }

    /**
     * Copies all state of this object to a builder. This method is used by the {@link #copyOf} method and should not be called directly by client code.
     * 
     * @param _other
     *     A builder instance to which the state of this object will be copied.
     */
    public<_B >void copyTo(final LengthrangeType.Builder<_B> _other) {
        _other.mode = this.mode;
        _other.useexisting = this.useexisting;
        _other.uselimit = this.uselimit;
        _other.accel = this.accel;
        _other.maxforce = this.maxforce;
        _other.timeconst = this.timeconst;
        _other.timestep = this.timestep;
        _other.inttotal = this.inttotal;
        _other.inteval = this.inteval;
        _other.tolrange = this.tolrange;
    }

    public<_B >LengthrangeType.Builder<_B> newCopyBuilder(final _B _parentBuilder) {
        return new LengthrangeType.Builder<_B>(_parentBuilder, this, true);
    }

    public LengthrangeType.Builder<Void> newCopyBuilder() {
        return newCopyBuilder(null);
    }

    public static LengthrangeType.Builder<Void> builder() {
        return new LengthrangeType.Builder<Void>(null, null, false);
    }

    public static<_B >LengthrangeType.Builder<_B> copyOf(final LengthrangeType _other) {
        final LengthrangeType.Builder<_B> _newBuilder = new LengthrangeType.Builder<_B>(null, null, false);
        _other.copyTo(_newBuilder);
        return _newBuilder;
    }

    /**
     * Copies all state of this object to a builder. This method is used by the {@link #copyOf} method and should not be called directly by client code.
     * 
     * @param _other
     *     A builder instance to which the state of this object will be copied.
     */
    public<_B >void copyTo(final LengthrangeType.Builder<_B> _other, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        final PropertyTree modePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("mode"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(modePropertyTree!= null):((modePropertyTree == null)||(!modePropertyTree.isLeaf())))) {
            _other.mode = this.mode;
        }
        final PropertyTree useexistingPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("useexisting"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(useexistingPropertyTree!= null):((useexistingPropertyTree == null)||(!useexistingPropertyTree.isLeaf())))) {
            _other.useexisting = this.useexisting;
        }
        final PropertyTree uselimitPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("uselimit"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(uselimitPropertyTree!= null):((uselimitPropertyTree == null)||(!uselimitPropertyTree.isLeaf())))) {
            _other.uselimit = this.uselimit;
        }
        final PropertyTree accelPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("accel"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(accelPropertyTree!= null):((accelPropertyTree == null)||(!accelPropertyTree.isLeaf())))) {
            _other.accel = this.accel;
        }
        final PropertyTree maxforcePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("maxforce"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(maxforcePropertyTree!= null):((maxforcePropertyTree == null)||(!maxforcePropertyTree.isLeaf())))) {
            _other.maxforce = this.maxforce;
        }
        final PropertyTree timeconstPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("timeconst"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(timeconstPropertyTree!= null):((timeconstPropertyTree == null)||(!timeconstPropertyTree.isLeaf())))) {
            _other.timeconst = this.timeconst;
        }
        final PropertyTree timestepPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("timestep"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(timestepPropertyTree!= null):((timestepPropertyTree == null)||(!timestepPropertyTree.isLeaf())))) {
            _other.timestep = this.timestep;
        }
        final PropertyTree inttotalPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("inttotal"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(inttotalPropertyTree!= null):((inttotalPropertyTree == null)||(!inttotalPropertyTree.isLeaf())))) {
            _other.inttotal = this.inttotal;
        }
        final PropertyTree intevalPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("inteval"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(intevalPropertyTree!= null):((intevalPropertyTree == null)||(!intevalPropertyTree.isLeaf())))) {
            _other.inteval = this.inteval;
        }
        final PropertyTree tolrangePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("tolrange"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(tolrangePropertyTree!= null):((tolrangePropertyTree == null)||(!tolrangePropertyTree.isLeaf())))) {
            _other.tolrange = this.tolrange;
        }
    }

    public<_B >LengthrangeType.Builder<_B> newCopyBuilder(final _B _parentBuilder, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        return new LengthrangeType.Builder<_B>(_parentBuilder, this, true, _propertyTree, _propertyTreeUse);
    }

    public LengthrangeType.Builder<Void> newCopyBuilder(final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        return newCopyBuilder(null, _propertyTree, _propertyTreeUse);
    }

    public static<_B >LengthrangeType.Builder<_B> copyOf(final LengthrangeType _other, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        final LengthrangeType.Builder<_B> _newBuilder = new LengthrangeType.Builder<_B>(null, null, false);
        _other.copyTo(_newBuilder, _propertyTree, _propertyTreeUse);
        return _newBuilder;
    }

    public static LengthrangeType.Builder<Void> copyExcept(final LengthrangeType _other, final PropertyTree _propertyTree) {
        return copyOf(_other, _propertyTree, PropertyTreeUse.EXCLUDE);
    }

    public static LengthrangeType.Builder<Void> copyOnly(final LengthrangeType _other, final PropertyTree _propertyTree) {
        return copyOf(_other, _propertyTree, PropertyTreeUse.INCLUDE);
    }

    public LengthrangeType visit(final PropertyVisitor _visitor_) {
        _visitor_.visit(this);
        return this;
    }

    public static class Builder<_B >implements Buildable
    {

        protected final _B _parentBuilder;
        private ModeType mode;
        private Boolean useexisting;
        private Boolean uselimit;
        private BigDecimal accel;
        private BigDecimal maxforce;
        private BigDecimal timeconst;
        private BigDecimal timestep;
        private BigDecimal inttotal;
        private BigDecimal inteval;
        private BigDecimal tolrange;

        public Builder(final _B _parentBuilder, final LengthrangeType _other, final boolean _copy) {
            this._parentBuilder = _parentBuilder;
            if (_other!= null) {
                this.mode = _other.mode;
                this.useexisting = _other.useexisting;
                this.uselimit = _other.uselimit;
                this.accel = _other.accel;
                this.maxforce = _other.maxforce;
                this.timeconst = _other.timeconst;
                this.timestep = _other.timestep;
                this.inttotal = _other.inttotal;
                this.inteval = _other.inteval;
                this.tolrange = _other.tolrange;
            }
        }

        public Builder(final _B _parentBuilder, final LengthrangeType _other, final boolean _copy, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
            this._parentBuilder = _parentBuilder;
            if (_other!= null) {
                final PropertyTree modePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("mode"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(modePropertyTree!= null):((modePropertyTree == null)||(!modePropertyTree.isLeaf())))) {
                    this.mode = _other.mode;
                }
                final PropertyTree useexistingPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("useexisting"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(useexistingPropertyTree!= null):((useexistingPropertyTree == null)||(!useexistingPropertyTree.isLeaf())))) {
                    this.useexisting = _other.useexisting;
                }
                final PropertyTree uselimitPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("uselimit"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(uselimitPropertyTree!= null):((uselimitPropertyTree == null)||(!uselimitPropertyTree.isLeaf())))) {
                    this.uselimit = _other.uselimit;
                }
                final PropertyTree accelPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("accel"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(accelPropertyTree!= null):((accelPropertyTree == null)||(!accelPropertyTree.isLeaf())))) {
                    this.accel = _other.accel;
                }
                final PropertyTree maxforcePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("maxforce"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(maxforcePropertyTree!= null):((maxforcePropertyTree == null)||(!maxforcePropertyTree.isLeaf())))) {
                    this.maxforce = _other.maxforce;
                }
                final PropertyTree timeconstPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("timeconst"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(timeconstPropertyTree!= null):((timeconstPropertyTree == null)||(!timeconstPropertyTree.isLeaf())))) {
                    this.timeconst = _other.timeconst;
                }
                final PropertyTree timestepPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("timestep"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(timestepPropertyTree!= null):((timestepPropertyTree == null)||(!timestepPropertyTree.isLeaf())))) {
                    this.timestep = _other.timestep;
                }
                final PropertyTree inttotalPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("inttotal"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(inttotalPropertyTree!= null):((inttotalPropertyTree == null)||(!inttotalPropertyTree.isLeaf())))) {
                    this.inttotal = _other.inttotal;
                }
                final PropertyTree intevalPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("inteval"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(intevalPropertyTree!= null):((intevalPropertyTree == null)||(!intevalPropertyTree.isLeaf())))) {
                    this.inteval = _other.inteval;
                }
                final PropertyTree tolrangePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("tolrange"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(tolrangePropertyTree!= null):((tolrangePropertyTree == null)||(!tolrangePropertyTree.isLeaf())))) {
                    this.tolrange = _other.tolrange;
                }
            }
        }

        public _B end() {
            return this._parentBuilder;
        }

        protected<_P extends LengthrangeType >_P init(final _P _product) {
            _product.mode = this.mode;
            _product.useexisting = this.useexisting;
            _product.uselimit = this.uselimit;
            _product.accel = this.accel;
            _product.maxforce = this.maxforce;
            _product.timeconst = this.timeconst;
            _product.timestep = this.timestep;
            _product.inttotal = this.inttotal;
            _product.inteval = this.inteval;
            _product.tolrange = this.tolrange;
            return _product;
        }

        /**
         * Sets the new value of "mode" (any previous value will be replaced)
         * 
         * @param mode
         *     New value of the "mode" property.
         */
        public LengthrangeType.Builder<_B> withMode(final ModeType mode) {
            this.mode = mode;
            return this;
        }

        /**
         * Sets the new value of "useexisting" (any previous value will be replaced)
         * 
         * @param useexisting
         *     New value of the "useexisting" property.
         */
        public LengthrangeType.Builder<_B> withUseexisting(final Boolean useexisting) {
            this.useexisting = useexisting;
            return this;
        }

        /**
         * Sets the new value of "uselimit" (any previous value will be replaced)
         * 
         * @param uselimit
         *     New value of the "uselimit" property.
         */
        public LengthrangeType.Builder<_B> withUselimit(final Boolean uselimit) {
            this.uselimit = uselimit;
            return this;
        }

        /**
         * Sets the new value of "accel" (any previous value will be replaced)
         * 
         * @param accel
         *     New value of the "accel" property.
         */
        public LengthrangeType.Builder<_B> withAccel(final BigDecimal accel) {
            this.accel = accel;
            return this;
        }

        /**
         * Sets the new value of "maxforce" (any previous value will be replaced)
         * 
         * @param maxforce
         *     New value of the "maxforce" property.
         */
        public LengthrangeType.Builder<_B> withMaxforce(final BigDecimal maxforce) {
            this.maxforce = maxforce;
            return this;
        }

        /**
         * Sets the new value of "timeconst" (any previous value will be replaced)
         * 
         * @param timeconst
         *     New value of the "timeconst" property.
         */
        public LengthrangeType.Builder<_B> withTimeconst(final BigDecimal timeconst) {
            this.timeconst = timeconst;
            return this;
        }

        /**
         * Sets the new value of "timestep" (any previous value will be replaced)
         * 
         * @param timestep
         *     New value of the "timestep" property.
         */
        public LengthrangeType.Builder<_B> withTimestep(final BigDecimal timestep) {
            this.timestep = timestep;
            return this;
        }

        /**
         * Sets the new value of "inttotal" (any previous value will be replaced)
         * 
         * @param inttotal
         *     New value of the "inttotal" property.
         */
        public LengthrangeType.Builder<_B> withInttotal(final BigDecimal inttotal) {
            this.inttotal = inttotal;
            return this;
        }

        /**
         * Sets the new value of "inteval" (any previous value will be replaced)
         * 
         * @param inteval
         *     New value of the "inteval" property.
         */
        public LengthrangeType.Builder<_B> withInteval(final BigDecimal inteval) {
            this.inteval = inteval;
            return this;
        }

        /**
         * Sets the new value of "tolrange" (any previous value will be replaced)
         * 
         * @param tolrange
         *     New value of the "tolrange" property.
         */
        public LengthrangeType.Builder<_B> withTolrange(final BigDecimal tolrange) {
            this.tolrange = tolrange;
            return this;
        }

        @Override
        public LengthrangeType build() {
            return this.init(new LengthrangeType());
        }

        public LengthrangeType.Builder<_B> copyOf(final LengthrangeType _other) {
            _other.copyTo(this);
            return this;
        }

        public LengthrangeType.Builder<_B> copyOf(final LengthrangeType.Builder _other) {
            return copyOf(_other.build());
        }

    }

    public static class PropInfo {

        public final static transient String MODE = "mode";
        public final static transient String USEEXISTING = "useexisting";
        public final static transient String USELIMIT = "uselimit";
        public final static transient String ACCEL = "accel";
        public final static transient String MAXFORCE = "maxforce";
        public final static transient String TIMECONST = "timeconst";
        public final static transient String TIMESTEP = "timestep";
        public final static transient String INTTOTAL = "inttotal";
        public final static transient String INTEVAL = "inteval";
        public final static transient String TOLRANGE = "tolrange";

    }

    public static class Select
        extends LengthrangeType.Selector<LengthrangeType.Select, Void>
    {


        Select() {
            super(null, null, null);
        }

        public static LengthrangeType.Select _root() {
            return new LengthrangeType.Select();
        }

    }

    public static class Selector<TRoot extends com.kscs.util.jaxb.Selector<TRoot, ?> , TParent >
        extends com.kscs.util.jaxb.Selector<TRoot, TParent>
    {

        private com.kscs.util.jaxb.Selector<TRoot, LengthrangeType.Selector<TRoot, TParent>> mode = null;
        private com.kscs.util.jaxb.Selector<TRoot, LengthrangeType.Selector<TRoot, TParent>> useexisting = null;
        private com.kscs.util.jaxb.Selector<TRoot, LengthrangeType.Selector<TRoot, TParent>> uselimit = null;
        private com.kscs.util.jaxb.Selector<TRoot, LengthrangeType.Selector<TRoot, TParent>> accel = null;
        private com.kscs.util.jaxb.Selector<TRoot, LengthrangeType.Selector<TRoot, TParent>> maxforce = null;
        private com.kscs.util.jaxb.Selector<TRoot, LengthrangeType.Selector<TRoot, TParent>> timeconst = null;
        private com.kscs.util.jaxb.Selector<TRoot, LengthrangeType.Selector<TRoot, TParent>> timestep = null;
        private com.kscs.util.jaxb.Selector<TRoot, LengthrangeType.Selector<TRoot, TParent>> inttotal = null;
        private com.kscs.util.jaxb.Selector<TRoot, LengthrangeType.Selector<TRoot, TParent>> inteval = null;
        private com.kscs.util.jaxb.Selector<TRoot, LengthrangeType.Selector<TRoot, TParent>> tolrange = null;

        public Selector(final TRoot root, final TParent parent, final String propertyName) {
            super(root, parent, propertyName);
        }

        @Override
        public Map<String, PropertyTree> buildChildren() {
            final Map<String, PropertyTree> products = new HashMap<String, PropertyTree>();
            products.putAll(super.buildChildren());
            if (this.mode!= null) {
                products.put("mode", this.mode.init());
            }
            if (this.useexisting!= null) {
                products.put("useexisting", this.useexisting.init());
            }
            if (this.uselimit!= null) {
                products.put("uselimit", this.uselimit.init());
            }
            if (this.accel!= null) {
                products.put("accel", this.accel.init());
            }
            if (this.maxforce!= null) {
                products.put("maxforce", this.maxforce.init());
            }
            if (this.timeconst!= null) {
                products.put("timeconst", this.timeconst.init());
            }
            if (this.timestep!= null) {
                products.put("timestep", this.timestep.init());
            }
            if (this.inttotal!= null) {
                products.put("inttotal", this.inttotal.init());
            }
            if (this.inteval!= null) {
                products.put("inteval", this.inteval.init());
            }
            if (this.tolrange!= null) {
                products.put("tolrange", this.tolrange.init());
            }
            return products;
        }

        public com.kscs.util.jaxb.Selector<TRoot, LengthrangeType.Selector<TRoot, TParent>> mode() {
            return ((this.mode == null)?this.mode = new com.kscs.util.jaxb.Selector<TRoot, LengthrangeType.Selector<TRoot, TParent>>(this._root, this, "mode"):this.mode);
        }

        public com.kscs.util.jaxb.Selector<TRoot, LengthrangeType.Selector<TRoot, TParent>> useexisting() {
            return ((this.useexisting == null)?this.useexisting = new com.kscs.util.jaxb.Selector<TRoot, LengthrangeType.Selector<TRoot, TParent>>(this._root, this, "useexisting"):this.useexisting);
        }

        public com.kscs.util.jaxb.Selector<TRoot, LengthrangeType.Selector<TRoot, TParent>> uselimit() {
            return ((this.uselimit == null)?this.uselimit = new com.kscs.util.jaxb.Selector<TRoot, LengthrangeType.Selector<TRoot, TParent>>(this._root, this, "uselimit"):this.uselimit);
        }

        public com.kscs.util.jaxb.Selector<TRoot, LengthrangeType.Selector<TRoot, TParent>> accel() {
            return ((this.accel == null)?this.accel = new com.kscs.util.jaxb.Selector<TRoot, LengthrangeType.Selector<TRoot, TParent>>(this._root, this, "accel"):this.accel);
        }

        public com.kscs.util.jaxb.Selector<TRoot, LengthrangeType.Selector<TRoot, TParent>> maxforce() {
            return ((this.maxforce == null)?this.maxforce = new com.kscs.util.jaxb.Selector<TRoot, LengthrangeType.Selector<TRoot, TParent>>(this._root, this, "maxforce"):this.maxforce);
        }

        public com.kscs.util.jaxb.Selector<TRoot, LengthrangeType.Selector<TRoot, TParent>> timeconst() {
            return ((this.timeconst == null)?this.timeconst = new com.kscs.util.jaxb.Selector<TRoot, LengthrangeType.Selector<TRoot, TParent>>(this._root, this, "timeconst"):this.timeconst);
        }

        public com.kscs.util.jaxb.Selector<TRoot, LengthrangeType.Selector<TRoot, TParent>> timestep() {
            return ((this.timestep == null)?this.timestep = new com.kscs.util.jaxb.Selector<TRoot, LengthrangeType.Selector<TRoot, TParent>>(this._root, this, "timestep"):this.timestep);
        }

        public com.kscs.util.jaxb.Selector<TRoot, LengthrangeType.Selector<TRoot, TParent>> inttotal() {
            return ((this.inttotal == null)?this.inttotal = new com.kscs.util.jaxb.Selector<TRoot, LengthrangeType.Selector<TRoot, TParent>>(this._root, this, "inttotal"):this.inttotal);
        }

        public com.kscs.util.jaxb.Selector<TRoot, LengthrangeType.Selector<TRoot, TParent>> inteval() {
            return ((this.inteval == null)?this.inteval = new com.kscs.util.jaxb.Selector<TRoot, LengthrangeType.Selector<TRoot, TParent>>(this._root, this, "inteval"):this.inteval);
        }

        public com.kscs.util.jaxb.Selector<TRoot, LengthrangeType.Selector<TRoot, TParent>> tolrange() {
            return ((this.tolrange == null)?this.tolrange = new com.kscs.util.jaxb.Selector<TRoot, LengthrangeType.Selector<TRoot, TParent>>(this._root, this, "tolrange"):this.tolrange);
        }

    }

}
