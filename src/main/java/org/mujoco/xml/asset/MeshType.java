//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.3.0 
// See <a href="https://javaee.github.io/jaxb-v2/">https://javaee.github.io/jaxb-v2/</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
//


package org.mujoco.xml.asset;

import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeSupport;
import java.beans.PropertyVetoException;
import java.beans.VetoableChangeListener;
import java.beans.VetoableChangeSupport;
import java.util.HashMap;
import java.util.Map;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlType;
import com.kscs.util.jaxb.Buildable;
import com.kscs.util.jaxb.Copyable;
import com.kscs.util.jaxb.PartialCopyable;
import com.kscs.util.jaxb.PropertyTree;
import com.kscs.util.jaxb.PropertyTreeUse;
import com.kscs.util.jaxb.PropertyVisitor;


/**
 * <p>Java class for meshType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="meshType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;attribute name="name" type="{http://www.w3.org/2001/XMLSchema}string" /&gt;
 *       &lt;attribute name="class" type="{http://www.w3.org/2001/XMLSchema}string" /&gt;
 *       &lt;attribute name="file" type="{http://www.w3.org/2001/XMLSchema}string" /&gt;
 *       &lt;attribute name="scale" type="{attributeTypes}threeRealsType" default="1 1 1" /&gt;
 *       &lt;attribute name="smoothnormal" type="{http://www.w3.org/2001/XMLSchema}boolean" default="false" /&gt;
 *       &lt;attribute name="vertex" type="{attributeTypes}infRealsType" /&gt;
 *       &lt;attribute name="normal" type="{attributeTypes}infRealsType" /&gt;
 *       &lt;attribute name="texcoord" type="{attributeTypes}infRealsType" /&gt;
 *       &lt;attribute name="face" type="{attributeTypes}infIntsType" /&gt;
 *       &lt;attribute name="refpos" type="{attributeTypes}threeRealsType" default="0 0 0" /&gt;
 *       &lt;attribute name="refquat" type="{attributeTypes}fourRealsType" default="1 0 0 0" /&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "meshType")
public class MeshType implements Cloneable, Copyable, PartialCopyable
{

    @XmlAttribute(name = "name")
    protected String name;
    @XmlAttribute(name = "class")
    protected String clazz;
    @XmlAttribute(name = "file")
    protected String file;
    @XmlAttribute(name = "scale")
    protected String scale;
    @XmlAttribute(name = "smoothnormal")
    protected Boolean smoothnormal;
    @XmlAttribute(name = "vertex")
    protected String vertex;
    @XmlAttribute(name = "normal")
    protected String normal;
    @XmlAttribute(name = "texcoord")
    protected String texcoord;
    @XmlAttribute(name = "face")
    protected String face;
    @XmlAttribute(name = "refpos")
    protected String refpos;
    @XmlAttribute(name = "refquat")
    protected String refquat;
    protected final transient VetoableChangeSupport vetoableChange__Support = new VetoableChangeSupport(this);
    protected final transient PropertyChangeSupport propertyChange__Support = new PropertyChangeSupport(this);

    /**
     * Generated by copy-constructor plugin, JAXB requires public no-arg constructor.
     * 
     */
    public MeshType() {
        // Generated by copy-constructor plugin, JAXB requires public no-arg constructor.
    }

    /**
     * Instantiates a MeshType copying the state of another MeshType
     * 
     * @param _other
     *     The original MeshType from which to copy state.
     */
    public MeshType(final MeshType _other) {
        this.name = _other.name;
        this.clazz = _other.clazz;
        this.file = _other.file;
        this.scale = _other.scale;
        this.smoothnormal = _other.smoothnormal;
        this.vertex = _other.vertex;
        this.normal = _other.normal;
        this.texcoord = _other.texcoord;
        this.face = _other.face;
        this.refpos = _other.refpos;
        this.refquat = _other.refquat;
    }

    /**
     * Instantiates a MeshType copying the state of another MeshType
     * 
     * @param _propertyTreeUse
     *     Meaning of the : Exclude or include members contained in property path.
     * @param _propertyTree
     *     A restricting  that defines which nodes of the source object tree should actually be copied.
     * @param _other
     *     The original MeshType from which to copy state.
     */
    public MeshType(final MeshType _other, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        final PropertyTree namePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("name"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(namePropertyTree!= null):((namePropertyTree == null)||(!namePropertyTree.isLeaf())))) {
            this.name = _other.name;
        }
        final PropertyTree clazzPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("clazz"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(clazzPropertyTree!= null):((clazzPropertyTree == null)||(!clazzPropertyTree.isLeaf())))) {
            this.clazz = _other.clazz;
        }
        final PropertyTree filePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("file"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(filePropertyTree!= null):((filePropertyTree == null)||(!filePropertyTree.isLeaf())))) {
            this.file = _other.file;
        }
        final PropertyTree scalePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("scale"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(scalePropertyTree!= null):((scalePropertyTree == null)||(!scalePropertyTree.isLeaf())))) {
            this.scale = _other.scale;
        }
        final PropertyTree smoothnormalPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("smoothnormal"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(smoothnormalPropertyTree!= null):((smoothnormalPropertyTree == null)||(!smoothnormalPropertyTree.isLeaf())))) {
            this.smoothnormal = _other.smoothnormal;
        }
        final PropertyTree vertexPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("vertex"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(vertexPropertyTree!= null):((vertexPropertyTree == null)||(!vertexPropertyTree.isLeaf())))) {
            this.vertex = _other.vertex;
        }
        final PropertyTree normalPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("normal"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(normalPropertyTree!= null):((normalPropertyTree == null)||(!normalPropertyTree.isLeaf())))) {
            this.normal = _other.normal;
        }
        final PropertyTree texcoordPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("texcoord"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(texcoordPropertyTree!= null):((texcoordPropertyTree == null)||(!texcoordPropertyTree.isLeaf())))) {
            this.texcoord = _other.texcoord;
        }
        final PropertyTree facePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("face"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(facePropertyTree!= null):((facePropertyTree == null)||(!facePropertyTree.isLeaf())))) {
            this.face = _other.face;
        }
        final PropertyTree refposPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("refpos"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(refposPropertyTree!= null):((refposPropertyTree == null)||(!refposPropertyTree.isLeaf())))) {
            this.refpos = _other.refpos;
        }
        final PropertyTree refquatPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("refquat"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(refquatPropertyTree!= null):((refquatPropertyTree == null)||(!refquatPropertyTree.isLeaf())))) {
            this.refquat = _other.refquat;
        }
    }

    /**
     * Gets the value of the name property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getName() {
        return name;
    }

    /**
     * Gets the value of the clazz property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getClazz() {
        return clazz;
    }

    /**
     * Gets the value of the file property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getFile() {
        return file;
    }

    /**
     * Gets the value of the scale property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getScale() {
        if (scale == null) {
            return "1 1 1";
        } else {
            return scale;
        }
    }

    /**
     * Gets the value of the smoothnormal property.
     * 
     * @return
     *     possible object is
     *     {@link Boolean }
     *     
     */
    public boolean isSmoothnormal() {
        if (smoothnormal == null) {
            return false;
        } else {
            return smoothnormal;
        }
    }

    /**
     * Gets the value of the vertex property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getVertex() {
        return vertex;
    }

    /**
     * Gets the value of the normal property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getNormal() {
        return normal;
    }

    /**
     * Gets the value of the texcoord property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getTexcoord() {
        return texcoord;
    }

    /**
     * Gets the value of the face property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getFace() {
        return face;
    }

    /**
     * Gets the value of the refpos property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getRefpos() {
        if (refpos == null) {
            return "0 0 0";
        } else {
            return refpos;
        }
    }

    /**
     * Gets the value of the refquat property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getRefquat() {
        if (refquat == null) {
            return "1 0 0 0";
        } else {
            return refquat;
        }
    }

    public void addVetoableChangeListener(final VetoableChangeListener vetoableChangeListener) {
        this.vetoableChange__Support.addVetoableChangeListener(vetoableChangeListener);
    }

    public void removeVetoableChangeListener(final VetoableChangeListener vetoableChangeListener) {
        this.vetoableChange__Support.removeVetoableChangeListener(vetoableChangeListener);
    }

    public MeshType withVetoableChangeListener(final VetoableChangeListener vetoableChangeListener) {
        addVetoableChangeListener(vetoableChangeListener);
        return this;
    }

    public void addPropertyChangeListener(final PropertyChangeListener propertyChangeListener) {
        this.propertyChange__Support.addPropertyChangeListener(propertyChangeListener);
    }

    public void removePropertyChangeListener(final PropertyChangeListener propertyChangeListener) {
        this.propertyChange__Support.removePropertyChangeListener(propertyChangeListener);
    }

    public MeshType withPropertyChangeListener(final PropertyChangeListener propertyChangeListener) {
        addPropertyChangeListener(propertyChangeListener);
        return this;
    }

    public void setName(final String value) {
        final String __oldValue = this.name;
        try {
            this.vetoableChange__Support.fireVetoableChange("name", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.name = value;
        this.propertyChange__Support.firePropertyChange("name", __oldValue, value);
    }

    public void setClazz(final String value) {
        final String __oldValue = this.clazz;
        try {
            this.vetoableChange__Support.fireVetoableChange("clazz", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.clazz = value;
        this.propertyChange__Support.firePropertyChange("clazz", __oldValue, value);
    }

    public void setFile(final String value) {
        final String __oldValue = this.file;
        try {
            this.vetoableChange__Support.fireVetoableChange("file", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.file = value;
        this.propertyChange__Support.firePropertyChange("file", __oldValue, value);
    }

    public void setScale(final String value) {
        final String __oldValue = this.scale;
        try {
            this.vetoableChange__Support.fireVetoableChange("scale", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.scale = value;
        this.propertyChange__Support.firePropertyChange("scale", __oldValue, value);
    }

    public void setSmoothnormal(final Boolean value) {
        final Boolean __oldValue = this.smoothnormal;
        try {
            this.vetoableChange__Support.fireVetoableChange("smoothnormal", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.smoothnormal = value;
        this.propertyChange__Support.firePropertyChange("smoothnormal", __oldValue, value);
    }

    public void setVertex(final String value) {
        final String __oldValue = this.vertex;
        try {
            this.vetoableChange__Support.fireVetoableChange("vertex", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.vertex = value;
        this.propertyChange__Support.firePropertyChange("vertex", __oldValue, value);
    }

    public void setNormal(final String value) {
        final String __oldValue = this.normal;
        try {
            this.vetoableChange__Support.fireVetoableChange("normal", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.normal = value;
        this.propertyChange__Support.firePropertyChange("normal", __oldValue, value);
    }

    public void setTexcoord(final String value) {
        final String __oldValue = this.texcoord;
        try {
            this.vetoableChange__Support.fireVetoableChange("texcoord", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.texcoord = value;
        this.propertyChange__Support.firePropertyChange("texcoord", __oldValue, value);
    }

    public void setFace(final String value) {
        final String __oldValue = this.face;
        try {
            this.vetoableChange__Support.fireVetoableChange("face", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.face = value;
        this.propertyChange__Support.firePropertyChange("face", __oldValue, value);
    }

    public void setRefpos(final String value) {
        final String __oldValue = this.refpos;
        try {
            this.vetoableChange__Support.fireVetoableChange("refpos", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.refpos = value;
        this.propertyChange__Support.firePropertyChange("refpos", __oldValue, value);
    }

    public void setRefquat(final String value) {
        final String __oldValue = this.refquat;
        try {
            this.vetoableChange__Support.fireVetoableChange("refquat", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.refquat = value;
        this.propertyChange__Support.firePropertyChange("refquat", __oldValue, value);
    }

    @Override
    public MeshType clone() {
        final MeshType _newObject;
        try {
            _newObject = ((MeshType) super.clone());
        } catch (CloneNotSupportedException e) {
            throw new RuntimeException(e);
        }
        return _newObject;
    }

    @Override
    public MeshType createCopy() {
        final MeshType _newObject;
        try {
            _newObject = ((MeshType) super.clone());
        } catch (CloneNotSupportedException e) {
            throw new RuntimeException(e);
        }
        _newObject.name = this.name;
        _newObject.clazz = this.clazz;
        _newObject.file = this.file;
        _newObject.scale = this.scale;
        _newObject.smoothnormal = this.smoothnormal;
        _newObject.vertex = this.vertex;
        _newObject.normal = this.normal;
        _newObject.texcoord = this.texcoord;
        _newObject.face = this.face;
        _newObject.refpos = this.refpos;
        _newObject.refquat = this.refquat;
        return _newObject;
    }

    @Override
    public MeshType createCopy(final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        final MeshType _newObject;
        try {
            _newObject = ((MeshType) super.clone());
        } catch (CloneNotSupportedException e) {
            throw new RuntimeException(e);
        }
        final PropertyTree namePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("name"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(namePropertyTree!= null):((namePropertyTree == null)||(!namePropertyTree.isLeaf())))) {
            _newObject.name = this.name;
        }
        final PropertyTree clazzPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("clazz"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(clazzPropertyTree!= null):((clazzPropertyTree == null)||(!clazzPropertyTree.isLeaf())))) {
            _newObject.clazz = this.clazz;
        }
        final PropertyTree filePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("file"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(filePropertyTree!= null):((filePropertyTree == null)||(!filePropertyTree.isLeaf())))) {
            _newObject.file = this.file;
        }
        final PropertyTree scalePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("scale"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(scalePropertyTree!= null):((scalePropertyTree == null)||(!scalePropertyTree.isLeaf())))) {
            _newObject.scale = this.scale;
        }
        final PropertyTree smoothnormalPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("smoothnormal"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(smoothnormalPropertyTree!= null):((smoothnormalPropertyTree == null)||(!smoothnormalPropertyTree.isLeaf())))) {
            _newObject.smoothnormal = this.smoothnormal;
        }
        final PropertyTree vertexPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("vertex"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(vertexPropertyTree!= null):((vertexPropertyTree == null)||(!vertexPropertyTree.isLeaf())))) {
            _newObject.vertex = this.vertex;
        }
        final PropertyTree normalPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("normal"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(normalPropertyTree!= null):((normalPropertyTree == null)||(!normalPropertyTree.isLeaf())))) {
            _newObject.normal = this.normal;
        }
        final PropertyTree texcoordPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("texcoord"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(texcoordPropertyTree!= null):((texcoordPropertyTree == null)||(!texcoordPropertyTree.isLeaf())))) {
            _newObject.texcoord = this.texcoord;
        }
        final PropertyTree facePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("face"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(facePropertyTree!= null):((facePropertyTree == null)||(!facePropertyTree.isLeaf())))) {
            _newObject.face = this.face;
        }
        final PropertyTree refposPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("refpos"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(refposPropertyTree!= null):((refposPropertyTree == null)||(!refposPropertyTree.isLeaf())))) {
            _newObject.refpos = this.refpos;
        }
        final PropertyTree refquatPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("refquat"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(refquatPropertyTree!= null):((refquatPropertyTree == null)||(!refquatPropertyTree.isLeaf())))) {
            _newObject.refquat = this.refquat;
        }
        return _newObject;
    }

    @Override
    public MeshType copyExcept(final PropertyTree _propertyTree) {
        return createCopy(_propertyTree, PropertyTreeUse.EXCLUDE);
    }

    @Override
    public MeshType copyOnly(final PropertyTree _propertyTree) {
        return createCopy(_propertyTree, PropertyTreeUse.INCLUDE);
    }

    /**
     * Copies all state of this object to a builder. This method is used by the {@link #copyOf} method and should not be called directly by client code.
     * 
     * @param _other
     *     A builder instance to which the state of this object will be copied.
     */
    public<_B >void copyTo(final MeshType.Builder<_B> _other) {
        _other.name = this.name;
        _other.clazz = this.clazz;
        _other.file = this.file;
        _other.scale = this.scale;
        _other.smoothnormal = this.smoothnormal;
        _other.vertex = this.vertex;
        _other.normal = this.normal;
        _other.texcoord = this.texcoord;
        _other.face = this.face;
        _other.refpos = this.refpos;
        _other.refquat = this.refquat;
    }

    public<_B >MeshType.Builder<_B> newCopyBuilder(final _B _parentBuilder) {
        return new MeshType.Builder<_B>(_parentBuilder, this, true);
    }

    public MeshType.Builder<Void> newCopyBuilder() {
        return newCopyBuilder(null);
    }

    public static MeshType.Builder<Void> builder() {
        return new MeshType.Builder<Void>(null, null, false);
    }

    public static<_B >MeshType.Builder<_B> copyOf(final MeshType _other) {
        final MeshType.Builder<_B> _newBuilder = new MeshType.Builder<_B>(null, null, false);
        _other.copyTo(_newBuilder);
        return _newBuilder;
    }

    /**
     * Copies all state of this object to a builder. This method is used by the {@link #copyOf} method and should not be called directly by client code.
     * 
     * @param _other
     *     A builder instance to which the state of this object will be copied.
     */
    public<_B >void copyTo(final MeshType.Builder<_B> _other, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        final PropertyTree namePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("name"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(namePropertyTree!= null):((namePropertyTree == null)||(!namePropertyTree.isLeaf())))) {
            _other.name = this.name;
        }
        final PropertyTree clazzPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("clazz"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(clazzPropertyTree!= null):((clazzPropertyTree == null)||(!clazzPropertyTree.isLeaf())))) {
            _other.clazz = this.clazz;
        }
        final PropertyTree filePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("file"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(filePropertyTree!= null):((filePropertyTree == null)||(!filePropertyTree.isLeaf())))) {
            _other.file = this.file;
        }
        final PropertyTree scalePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("scale"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(scalePropertyTree!= null):((scalePropertyTree == null)||(!scalePropertyTree.isLeaf())))) {
            _other.scale = this.scale;
        }
        final PropertyTree smoothnormalPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("smoothnormal"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(smoothnormalPropertyTree!= null):((smoothnormalPropertyTree == null)||(!smoothnormalPropertyTree.isLeaf())))) {
            _other.smoothnormal = this.smoothnormal;
        }
        final PropertyTree vertexPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("vertex"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(vertexPropertyTree!= null):((vertexPropertyTree == null)||(!vertexPropertyTree.isLeaf())))) {
            _other.vertex = this.vertex;
        }
        final PropertyTree normalPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("normal"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(normalPropertyTree!= null):((normalPropertyTree == null)||(!normalPropertyTree.isLeaf())))) {
            _other.normal = this.normal;
        }
        final PropertyTree texcoordPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("texcoord"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(texcoordPropertyTree!= null):((texcoordPropertyTree == null)||(!texcoordPropertyTree.isLeaf())))) {
            _other.texcoord = this.texcoord;
        }
        final PropertyTree facePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("face"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(facePropertyTree!= null):((facePropertyTree == null)||(!facePropertyTree.isLeaf())))) {
            _other.face = this.face;
        }
        final PropertyTree refposPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("refpos"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(refposPropertyTree!= null):((refposPropertyTree == null)||(!refposPropertyTree.isLeaf())))) {
            _other.refpos = this.refpos;
        }
        final PropertyTree refquatPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("refquat"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(refquatPropertyTree!= null):((refquatPropertyTree == null)||(!refquatPropertyTree.isLeaf())))) {
            _other.refquat = this.refquat;
        }
    }

    public<_B >MeshType.Builder<_B> newCopyBuilder(final _B _parentBuilder, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        return new MeshType.Builder<_B>(_parentBuilder, this, true, _propertyTree, _propertyTreeUse);
    }

    public MeshType.Builder<Void> newCopyBuilder(final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        return newCopyBuilder(null, _propertyTree, _propertyTreeUse);
    }

    public static<_B >MeshType.Builder<_B> copyOf(final MeshType _other, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        final MeshType.Builder<_B> _newBuilder = new MeshType.Builder<_B>(null, null, false);
        _other.copyTo(_newBuilder, _propertyTree, _propertyTreeUse);
        return _newBuilder;
    }

    public static MeshType.Builder<Void> copyExcept(final MeshType _other, final PropertyTree _propertyTree) {
        return copyOf(_other, _propertyTree, PropertyTreeUse.EXCLUDE);
    }

    public static MeshType.Builder<Void> copyOnly(final MeshType _other, final PropertyTree _propertyTree) {
        return copyOf(_other, _propertyTree, PropertyTreeUse.INCLUDE);
    }

    public MeshType visit(final PropertyVisitor _visitor_) {
        _visitor_.visit(this);
        return this;
    }

    public static class Builder<_B >implements Buildable
    {

        protected final _B _parentBuilder;
        private String name;
        private String clazz;
        private String file;
        private String scale;
        private Boolean smoothnormal;
        private String vertex;
        private String normal;
        private String texcoord;
        private String face;
        private String refpos;
        private String refquat;

        public Builder(final _B _parentBuilder, final MeshType _other, final boolean _copy) {
            this._parentBuilder = _parentBuilder;
            if (_other!= null) {
                this.name = _other.name;
                this.clazz = _other.clazz;
                this.file = _other.file;
                this.scale = _other.scale;
                this.smoothnormal = _other.smoothnormal;
                this.vertex = _other.vertex;
                this.normal = _other.normal;
                this.texcoord = _other.texcoord;
                this.face = _other.face;
                this.refpos = _other.refpos;
                this.refquat = _other.refquat;
            }
        }

        public Builder(final _B _parentBuilder, final MeshType _other, final boolean _copy, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
            this._parentBuilder = _parentBuilder;
            if (_other!= null) {
                final PropertyTree namePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("name"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(namePropertyTree!= null):((namePropertyTree == null)||(!namePropertyTree.isLeaf())))) {
                    this.name = _other.name;
                }
                final PropertyTree clazzPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("clazz"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(clazzPropertyTree!= null):((clazzPropertyTree == null)||(!clazzPropertyTree.isLeaf())))) {
                    this.clazz = _other.clazz;
                }
                final PropertyTree filePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("file"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(filePropertyTree!= null):((filePropertyTree == null)||(!filePropertyTree.isLeaf())))) {
                    this.file = _other.file;
                }
                final PropertyTree scalePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("scale"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(scalePropertyTree!= null):((scalePropertyTree == null)||(!scalePropertyTree.isLeaf())))) {
                    this.scale = _other.scale;
                }
                final PropertyTree smoothnormalPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("smoothnormal"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(smoothnormalPropertyTree!= null):((smoothnormalPropertyTree == null)||(!smoothnormalPropertyTree.isLeaf())))) {
                    this.smoothnormal = _other.smoothnormal;
                }
                final PropertyTree vertexPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("vertex"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(vertexPropertyTree!= null):((vertexPropertyTree == null)||(!vertexPropertyTree.isLeaf())))) {
                    this.vertex = _other.vertex;
                }
                final PropertyTree normalPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("normal"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(normalPropertyTree!= null):((normalPropertyTree == null)||(!normalPropertyTree.isLeaf())))) {
                    this.normal = _other.normal;
                }
                final PropertyTree texcoordPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("texcoord"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(texcoordPropertyTree!= null):((texcoordPropertyTree == null)||(!texcoordPropertyTree.isLeaf())))) {
                    this.texcoord = _other.texcoord;
                }
                final PropertyTree facePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("face"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(facePropertyTree!= null):((facePropertyTree == null)||(!facePropertyTree.isLeaf())))) {
                    this.face = _other.face;
                }
                final PropertyTree refposPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("refpos"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(refposPropertyTree!= null):((refposPropertyTree == null)||(!refposPropertyTree.isLeaf())))) {
                    this.refpos = _other.refpos;
                }
                final PropertyTree refquatPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("refquat"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(refquatPropertyTree!= null):((refquatPropertyTree == null)||(!refquatPropertyTree.isLeaf())))) {
                    this.refquat = _other.refquat;
                }
            }
        }

        public _B end() {
            return this._parentBuilder;
        }

        protected<_P extends MeshType >_P init(final _P _product) {
            _product.name = this.name;
            _product.clazz = this.clazz;
            _product.file = this.file;
            _product.scale = this.scale;
            _product.smoothnormal = this.smoothnormal;
            _product.vertex = this.vertex;
            _product.normal = this.normal;
            _product.texcoord = this.texcoord;
            _product.face = this.face;
            _product.refpos = this.refpos;
            _product.refquat = this.refquat;
            return _product;
        }

        /**
         * Sets the new value of "name" (any previous value will be replaced)
         * 
         * @param name
         *     New value of the "name" property.
         */
        public MeshType.Builder<_B> withName(final String name) {
            this.name = name;
            return this;
        }

        /**
         * Sets the new value of "clazz" (any previous value will be replaced)
         * 
         * @param clazz
         *     New value of the "clazz" property.
         */
        public MeshType.Builder<_B> withClazz(final String clazz) {
            this.clazz = clazz;
            return this;
        }

        /**
         * Sets the new value of "file" (any previous value will be replaced)
         * 
         * @param file
         *     New value of the "file" property.
         */
        public MeshType.Builder<_B> withFile(final String file) {
            this.file = file;
            return this;
        }

        /**
         * Sets the new value of "scale" (any previous value will be replaced)
         * 
         * @param scale
         *     New value of the "scale" property.
         */
        public MeshType.Builder<_B> withScale(final String scale) {
            this.scale = scale;
            return this;
        }

        /**
         * Sets the new value of "smoothnormal" (any previous value will be replaced)
         * 
         * @param smoothnormal
         *     New value of the "smoothnormal" property.
         */
        public MeshType.Builder<_B> withSmoothnormal(final Boolean smoothnormal) {
            this.smoothnormal = smoothnormal;
            return this;
        }

        /**
         * Sets the new value of "vertex" (any previous value will be replaced)
         * 
         * @param vertex
         *     New value of the "vertex" property.
         */
        public MeshType.Builder<_B> withVertex(final String vertex) {
            this.vertex = vertex;
            return this;
        }

        /**
         * Sets the new value of "normal" (any previous value will be replaced)
         * 
         * @param normal
         *     New value of the "normal" property.
         */
        public MeshType.Builder<_B> withNormal(final String normal) {
            this.normal = normal;
            return this;
        }

        /**
         * Sets the new value of "texcoord" (any previous value will be replaced)
         * 
         * @param texcoord
         *     New value of the "texcoord" property.
         */
        public MeshType.Builder<_B> withTexcoord(final String texcoord) {
            this.texcoord = texcoord;
            return this;
        }

        /**
         * Sets the new value of "face" (any previous value will be replaced)
         * 
         * @param face
         *     New value of the "face" property.
         */
        public MeshType.Builder<_B> withFace(final String face) {
            this.face = face;
            return this;
        }

        /**
         * Sets the new value of "refpos" (any previous value will be replaced)
         * 
         * @param refpos
         *     New value of the "refpos" property.
         */
        public MeshType.Builder<_B> withRefpos(final String refpos) {
            this.refpos = refpos;
            return this;
        }

        /**
         * Sets the new value of "refquat" (any previous value will be replaced)
         * 
         * @param refquat
         *     New value of the "refquat" property.
         */
        public MeshType.Builder<_B> withRefquat(final String refquat) {
            this.refquat = refquat;
            return this;
        }

        @Override
        public MeshType build() {
            return this.init(new MeshType());
        }

        public MeshType.Builder<_B> copyOf(final MeshType _other) {
            _other.copyTo(this);
            return this;
        }

        public MeshType.Builder<_B> copyOf(final MeshType.Builder _other) {
            return copyOf(_other.build());
        }

    }

    public static class PropInfo {

        public final static transient String NAME = "name";
        public final static transient String CLAZZ = "clazz";
        public final static transient String FILE = "file";
        public final static transient String SCALE = "scale";
        public final static transient String SMOOTHNORMAL = "smoothnormal";
        public final static transient String VERTEX = "vertex";
        public final static transient String NORMAL = "normal";
        public final static transient String TEXCOORD = "texcoord";
        public final static transient String FACE = "face";
        public final static transient String REFPOS = "refpos";
        public final static transient String REFQUAT = "refquat";

    }

    public static class Select
        extends MeshType.Selector<MeshType.Select, Void>
    {


        Select() {
            super(null, null, null);
        }

        public static MeshType.Select _root() {
            return new MeshType.Select();
        }

    }

    public static class Selector<TRoot extends com.kscs.util.jaxb.Selector<TRoot, ?> , TParent >
        extends com.kscs.util.jaxb.Selector<TRoot, TParent>
    {

        private com.kscs.util.jaxb.Selector<TRoot, MeshType.Selector<TRoot, TParent>> name = null;
        private com.kscs.util.jaxb.Selector<TRoot, MeshType.Selector<TRoot, TParent>> clazz = null;
        private com.kscs.util.jaxb.Selector<TRoot, MeshType.Selector<TRoot, TParent>> file = null;
        private com.kscs.util.jaxb.Selector<TRoot, MeshType.Selector<TRoot, TParent>> scale = null;
        private com.kscs.util.jaxb.Selector<TRoot, MeshType.Selector<TRoot, TParent>> smoothnormal = null;
        private com.kscs.util.jaxb.Selector<TRoot, MeshType.Selector<TRoot, TParent>> vertex = null;
        private com.kscs.util.jaxb.Selector<TRoot, MeshType.Selector<TRoot, TParent>> normal = null;
        private com.kscs.util.jaxb.Selector<TRoot, MeshType.Selector<TRoot, TParent>> texcoord = null;
        private com.kscs.util.jaxb.Selector<TRoot, MeshType.Selector<TRoot, TParent>> face = null;
        private com.kscs.util.jaxb.Selector<TRoot, MeshType.Selector<TRoot, TParent>> refpos = null;
        private com.kscs.util.jaxb.Selector<TRoot, MeshType.Selector<TRoot, TParent>> refquat = null;

        public Selector(final TRoot root, final TParent parent, final String propertyName) {
            super(root, parent, propertyName);
        }

        @Override
        public Map<String, PropertyTree> buildChildren() {
            final Map<String, PropertyTree> products = new HashMap<String, PropertyTree>();
            products.putAll(super.buildChildren());
            if (this.name!= null) {
                products.put("name", this.name.init());
            }
            if (this.clazz!= null) {
                products.put("clazz", this.clazz.init());
            }
            if (this.file!= null) {
                products.put("file", this.file.init());
            }
            if (this.scale!= null) {
                products.put("scale", this.scale.init());
            }
            if (this.smoothnormal!= null) {
                products.put("smoothnormal", this.smoothnormal.init());
            }
            if (this.vertex!= null) {
                products.put("vertex", this.vertex.init());
            }
            if (this.normal!= null) {
                products.put("normal", this.normal.init());
            }
            if (this.texcoord!= null) {
                products.put("texcoord", this.texcoord.init());
            }
            if (this.face!= null) {
                products.put("face", this.face.init());
            }
            if (this.refpos!= null) {
                products.put("refpos", this.refpos.init());
            }
            if (this.refquat!= null) {
                products.put("refquat", this.refquat.init());
            }
            return products;
        }

        public com.kscs.util.jaxb.Selector<TRoot, MeshType.Selector<TRoot, TParent>> name() {
            return ((this.name == null)?this.name = new com.kscs.util.jaxb.Selector<TRoot, MeshType.Selector<TRoot, TParent>>(this._root, this, "name"):this.name);
        }

        public com.kscs.util.jaxb.Selector<TRoot, MeshType.Selector<TRoot, TParent>> clazz() {
            return ((this.clazz == null)?this.clazz = new com.kscs.util.jaxb.Selector<TRoot, MeshType.Selector<TRoot, TParent>>(this._root, this, "clazz"):this.clazz);
        }

        public com.kscs.util.jaxb.Selector<TRoot, MeshType.Selector<TRoot, TParent>> file() {
            return ((this.file == null)?this.file = new com.kscs.util.jaxb.Selector<TRoot, MeshType.Selector<TRoot, TParent>>(this._root, this, "file"):this.file);
        }

        public com.kscs.util.jaxb.Selector<TRoot, MeshType.Selector<TRoot, TParent>> scale() {
            return ((this.scale == null)?this.scale = new com.kscs.util.jaxb.Selector<TRoot, MeshType.Selector<TRoot, TParent>>(this._root, this, "scale"):this.scale);
        }

        public com.kscs.util.jaxb.Selector<TRoot, MeshType.Selector<TRoot, TParent>> smoothnormal() {
            return ((this.smoothnormal == null)?this.smoothnormal = new com.kscs.util.jaxb.Selector<TRoot, MeshType.Selector<TRoot, TParent>>(this._root, this, "smoothnormal"):this.smoothnormal);
        }

        public com.kscs.util.jaxb.Selector<TRoot, MeshType.Selector<TRoot, TParent>> vertex() {
            return ((this.vertex == null)?this.vertex = new com.kscs.util.jaxb.Selector<TRoot, MeshType.Selector<TRoot, TParent>>(this._root, this, "vertex"):this.vertex);
        }

        public com.kscs.util.jaxb.Selector<TRoot, MeshType.Selector<TRoot, TParent>> normal() {
            return ((this.normal == null)?this.normal = new com.kscs.util.jaxb.Selector<TRoot, MeshType.Selector<TRoot, TParent>>(this._root, this, "normal"):this.normal);
        }

        public com.kscs.util.jaxb.Selector<TRoot, MeshType.Selector<TRoot, TParent>> texcoord() {
            return ((this.texcoord == null)?this.texcoord = new com.kscs.util.jaxb.Selector<TRoot, MeshType.Selector<TRoot, TParent>>(this._root, this, "texcoord"):this.texcoord);
        }

        public com.kscs.util.jaxb.Selector<TRoot, MeshType.Selector<TRoot, TParent>> face() {
            return ((this.face == null)?this.face = new com.kscs.util.jaxb.Selector<TRoot, MeshType.Selector<TRoot, TParent>>(this._root, this, "face"):this.face);
        }

        public com.kscs.util.jaxb.Selector<TRoot, MeshType.Selector<TRoot, TParent>> refpos() {
            return ((this.refpos == null)?this.refpos = new com.kscs.util.jaxb.Selector<TRoot, MeshType.Selector<TRoot, TParent>>(this._root, this, "refpos"):this.refpos);
        }

        public com.kscs.util.jaxb.Selector<TRoot, MeshType.Selector<TRoot, TParent>> refquat() {
            return ((this.refquat == null)?this.refquat = new com.kscs.util.jaxb.Selector<TRoot, MeshType.Selector<TRoot, TParent>>(this._root, this, "refquat"):this.refquat);
        }

    }

}
