//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.3.0 
// See <a href="https://javaee.github.io/jaxb-v2/">https://javaee.github.io/jaxb-v2/</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2024.03.13 at 04:36:46 PM EDT 
//


package org.mujoco.xml.body;

import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeSupport;
import java.beans.PropertyVetoException;
import java.beans.VetoableChangeListener;
import java.beans.VetoableChangeSupport;
import java.util.HashMap;
import java.util.Map;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlType;
import com.kscs.util.jaxb.Buildable;
import com.kscs.util.jaxb.Copyable;
import com.kscs.util.jaxb.PartialCopyable;
import com.kscs.util.jaxb.PropertyTree;
import com.kscs.util.jaxb.PropertyTreeUse;
import com.kscs.util.jaxb.PropertyVisitor;


/**
 * <p>Java class for pinType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="pinType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;attribute name="coord" use="required" type="{attributeTypes}twoIntsType" /&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "pinType")
public class PinType implements Cloneable, Copyable, PartialCopyable
{

    @XmlAttribute(name = "coord", required = true)
    protected String coord;
    protected final transient VetoableChangeSupport vetoableChange__Support = new VetoableChangeSupport(this);
    protected final transient PropertyChangeSupport propertyChange__Support = new PropertyChangeSupport(this);

    /**
     * Generated by copy-constructor plugin, JAXB requires public no-arg constructor.
     * 
     */
    public PinType() {
        // Generated by copy-constructor plugin, JAXB requires public no-arg constructor.
    }

    /**
     * Instantiates a PinType copying the state of another PinType
     * 
     * @param _other
     *     The original PinType from which to copy state.
     */
    public PinType(final PinType _other) {
        this.coord = _other.coord;
    }

    /**
     * Instantiates a PinType copying the state of another PinType
     * 
     * @param _propertyTreeUse
     *     Meaning of the {@link PropertyPath}: Exclude or include members contained in property path.
     * @param _propertyTree
     *     A restricting {@link PropertyPath} that defines which nodes of the source object tree should actually be copied.
     * @param _other
     *     The original PinType from which to copy state.
     */
    public PinType(final PinType _other, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        final PropertyTree coordPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("coord"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(coordPropertyTree!= null):((coordPropertyTree == null)||(!coordPropertyTree.isLeaf())))) {
            this.coord = _other.coord;
        }
    }

    /**
     * Gets the value of the coord property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getCoord() {
        return coord;
    }

    public void addVetoableChangeListener(final VetoableChangeListener vetoableChangeListener) {
        this.vetoableChange__Support.addVetoableChangeListener(vetoableChangeListener);
    }

    public void removeVetoableChangeListener(final VetoableChangeListener vetoableChangeListener) {
        this.vetoableChange__Support.removeVetoableChangeListener(vetoableChangeListener);
    }

    public PinType withVetoableChangeListener(final VetoableChangeListener vetoableChangeListener) {
        addVetoableChangeListener(vetoableChangeListener);
        return this;
    }

    public void addPropertyChangeListener(final PropertyChangeListener propertyChangeListener) {
        this.propertyChange__Support.addPropertyChangeListener(propertyChangeListener);
    }

    public void removePropertyChangeListener(final PropertyChangeListener propertyChangeListener) {
        this.propertyChange__Support.removePropertyChangeListener(propertyChangeListener);
    }

    public PinType withPropertyChangeListener(final PropertyChangeListener propertyChangeListener) {
        addPropertyChangeListener(propertyChangeListener);
        return this;
    }

    public void setCoord(final String value) {
        final String __oldValue = this.coord;
        try {
            this.vetoableChange__Support.fireVetoableChange("coord", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.coord = value;
        this.propertyChange__Support.firePropertyChange("coord", __oldValue, value);
    }

    @Override
    public PinType clone() {
        final PinType _newObject;
        try {
            _newObject = ((PinType) super.clone());
        } catch (CloneNotSupportedException e) {
            throw new RuntimeException(e);
        }
        return _newObject;
    }

    @Override
    public PinType createCopy() {
        final PinType _newObject;
        try {
            _newObject = ((PinType) super.clone());
        } catch (CloneNotSupportedException e) {
            throw new RuntimeException(e);
        }
        _newObject.coord = this.coord;
        return _newObject;
    }

    @Override
    public PinType createCopy(final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        final PinType _newObject;
        try {
            _newObject = ((PinType) super.clone());
        } catch (CloneNotSupportedException e) {
            throw new RuntimeException(e);
        }
        final PropertyTree coordPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("coord"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(coordPropertyTree!= null):((coordPropertyTree == null)||(!coordPropertyTree.isLeaf())))) {
            _newObject.coord = this.coord;
        }
        return _newObject;
    }

    @Override
    public PinType copyExcept(final PropertyTree _propertyTree) {
        return createCopy(_propertyTree, PropertyTreeUse.EXCLUDE);
    }

    @Override
    public PinType copyOnly(final PropertyTree _propertyTree) {
        return createCopy(_propertyTree, PropertyTreeUse.INCLUDE);
    }

    /**
     * Copies all state of this object to a builder. This method is used by the {@link #copyOf} method and should not be called directly by client code.
     * 
     * @param _other
     *     A builder instance to which the state of this object will be copied.
     */
    public<_B >void copyTo(final PinType.Builder<_B> _other) {
        _other.coord = this.coord;
    }

    public<_B >PinType.Builder<_B> newCopyBuilder(final _B _parentBuilder) {
        return new PinType.Builder<_B>(_parentBuilder, this, true);
    }

    public PinType.Builder<Void> newCopyBuilder() {
        return newCopyBuilder(null);
    }

    public static PinType.Builder<Void> builder() {
        return new PinType.Builder<Void>(null, null, false);
    }

    public static<_B >PinType.Builder<_B> copyOf(final PinType _other) {
        final PinType.Builder<_B> _newBuilder = new PinType.Builder<_B>(null, null, false);
        _other.copyTo(_newBuilder);
        return _newBuilder;
    }

    /**
     * Copies all state of this object to a builder. This method is used by the {@link #copyOf} method and should not be called directly by client code.
     * 
     * @param _other
     *     A builder instance to which the state of this object will be copied.
     */
    public<_B >void copyTo(final PinType.Builder<_B> _other, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        final PropertyTree coordPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("coord"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(coordPropertyTree!= null):((coordPropertyTree == null)||(!coordPropertyTree.isLeaf())))) {
            _other.coord = this.coord;
        }
    }

    public<_B >PinType.Builder<_B> newCopyBuilder(final _B _parentBuilder, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        return new PinType.Builder<_B>(_parentBuilder, this, true, _propertyTree, _propertyTreeUse);
    }

    public PinType.Builder<Void> newCopyBuilder(final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        return newCopyBuilder(null, _propertyTree, _propertyTreeUse);
    }

    public static<_B >PinType.Builder<_B> copyOf(final PinType _other, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        final PinType.Builder<_B> _newBuilder = new PinType.Builder<_B>(null, null, false);
        _other.copyTo(_newBuilder, _propertyTree, _propertyTreeUse);
        return _newBuilder;
    }

    public static PinType.Builder<Void> copyExcept(final PinType _other, final PropertyTree _propertyTree) {
        return copyOf(_other, _propertyTree, PropertyTreeUse.EXCLUDE);
    }

    public static PinType.Builder<Void> copyOnly(final PinType _other, final PropertyTree _propertyTree) {
        return copyOf(_other, _propertyTree, PropertyTreeUse.INCLUDE);
    }

    public PinType visit(final PropertyVisitor _visitor_) {
        _visitor_.visit(this);
        return this;
    }

    public static class Builder<_B >implements Buildable
    {

        protected final _B _parentBuilder;
        private String coord;

        public Builder(final _B _parentBuilder, final PinType _other, final boolean _copy) {
            this._parentBuilder = _parentBuilder;
            if (_other!= null) {
                this.coord = _other.coord;
            }
        }

        public Builder(final _B _parentBuilder, final PinType _other, final boolean _copy, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
            this._parentBuilder = _parentBuilder;
            if (_other!= null) {
                final PropertyTree coordPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("coord"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(coordPropertyTree!= null):((coordPropertyTree == null)||(!coordPropertyTree.isLeaf())))) {
                    this.coord = _other.coord;
                }
            }
        }

        public _B end() {
            return this._parentBuilder;
        }

        protected<_P extends PinType >_P init(final _P _product) {
            _product.coord = this.coord;
            return _product;
        }

        /**
         * Sets the new value of "coord" (any previous value will be replaced)
         * 
         * @param coord
         *     New value of the "coord" property.
         */
        public PinType.Builder<_B> withCoord(final String coord) {
            this.coord = coord;
            return this;
        }

        @Override
        public PinType build() {
            return this.init(new PinType());
        }

        public PinType.Builder<_B> copyOf(final PinType _other) {
            _other.copyTo(this);
            return this;
        }

        public PinType.Builder<_B> copyOf(final PinType.Builder _other) {
            return copyOf(_other.build());
        }

    }

    public static class PropInfo {

        public final static transient String COORD = "coord";

    }

    public static class Select
        extends PinType.Selector<PinType.Select, Void>
    {


        Select() {
            super(null, null, null);
        }

        public static PinType.Select _root() {
            return new PinType.Select();
        }

    }

    public static class Selector<TRoot extends com.kscs.util.jaxb.Selector<TRoot, ?> , TParent >
        extends com.kscs.util.jaxb.Selector<TRoot, TParent>
    {

        private com.kscs.util.jaxb.Selector<TRoot, PinType.Selector<TRoot, TParent>> coord = null;

        public Selector(final TRoot root, final TParent parent, final String propertyName) {
            super(root, parent, propertyName);
        }

        @Override
        public Map<String, PropertyTree> buildChildren() {
            final Map<String, PropertyTree> products = new HashMap<String, PropertyTree>();
            products.putAll(super.buildChildren());
            if (this.coord!= null) {
                products.put("coord", this.coord.init());
            }
            return products;
        }

        public com.kscs.util.jaxb.Selector<TRoot, PinType.Selector<TRoot, TParent>> coord() {
            return ((this.coord == null)?this.coord = new com.kscs.util.jaxb.Selector<TRoot, PinType.Selector<TRoot, TParent>>(this._root, this, "coord"):this.coord);
        }

    }

}
