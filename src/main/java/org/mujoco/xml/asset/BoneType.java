//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.3.0 
// See <a href="https://javaee.github.io/jaxb-v2/">https://javaee.github.io/jaxb-v2/</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
//


package org.mujoco.xml.asset;

import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeSupport;
import java.beans.PropertyVetoException;
import java.beans.VetoableChangeListener;
import java.beans.VetoableChangeSupport;
import java.util.HashMap;
import java.util.Map;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlType;
import com.kscs.util.jaxb.Buildable;
import com.kscs.util.jaxb.Copyable;
import com.kscs.util.jaxb.PartialCopyable;
import com.kscs.util.jaxb.PropertyTree;
import com.kscs.util.jaxb.PropertyTreeUse;
import com.kscs.util.jaxb.PropertyVisitor;


/**
 * <p>Java class for boneType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="boneType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;attribute name="body" use="required" type="{http://www.w3.org/2001/XMLSchema}string" /&gt;
 *       &lt;attribute name="bindpos" use="required" type="{attributeTypes}threeRealsType" /&gt;
 *       &lt;attribute name="bindquat" use="required" type="{attributeTypes}fourRealsType" /&gt;
 *       &lt;attribute name="vertid" type="{attributeTypes}infIntsType" /&gt;
 *       &lt;attribute name="vertweight" type="{attributeTypes}infRealsType" /&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "boneType")
public class BoneType implements Cloneable, Copyable, PartialCopyable
{

    @XmlAttribute(name = "body", required = true)
    protected String body;
    @XmlAttribute(name = "bindpos", required = true)
    protected String bindpos;
    @XmlAttribute(name = "bindquat", required = true)
    protected String bindquat;
    @XmlAttribute(name = "vertid")
    protected String vertid;
    @XmlAttribute(name = "vertweight")
    protected String vertweight;
    protected final transient VetoableChangeSupport vetoableChange__Support = new VetoableChangeSupport(this);
    protected final transient PropertyChangeSupport propertyChange__Support = new PropertyChangeSupport(this);

    /**
     * Generated by copy-constructor plugin, JAXB requires public no-arg constructor.
     * 
     */
    public BoneType() {
        // Generated by copy-constructor plugin, JAXB requires public no-arg constructor.
    }

    /**
     * Instantiates a BoneType copying the state of another BoneType
     * 
     * @param _other
     *     The original BoneType from which to copy state.
     */
    public BoneType(final BoneType _other) {
        this.body = _other.body;
        this.bindpos = _other.bindpos;
        this.bindquat = _other.bindquat;
        this.vertid = _other.vertid;
        this.vertweight = _other.vertweight;
    }

    /**
     * Instantiates a BoneType copying the state of another BoneType
     * 
     * @param _propertyTreeUse
     *     Meaning of the : Exclude or include members contained in property path.
     * @param _propertyTree
     *     A restricting  that defines which nodes of the source object tree should actually be copied.
     * @param _other
     *     The original BoneType from which to copy state.
     */
    public BoneType(final BoneType _other, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        final PropertyTree bodyPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("body"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(bodyPropertyTree!= null):((bodyPropertyTree == null)||(!bodyPropertyTree.isLeaf())))) {
            this.body = _other.body;
        }
        final PropertyTree bindposPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("bindpos"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(bindposPropertyTree!= null):((bindposPropertyTree == null)||(!bindposPropertyTree.isLeaf())))) {
            this.bindpos = _other.bindpos;
        }
        final PropertyTree bindquatPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("bindquat"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(bindquatPropertyTree!= null):((bindquatPropertyTree == null)||(!bindquatPropertyTree.isLeaf())))) {
            this.bindquat = _other.bindquat;
        }
        final PropertyTree vertidPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("vertid"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(vertidPropertyTree!= null):((vertidPropertyTree == null)||(!vertidPropertyTree.isLeaf())))) {
            this.vertid = _other.vertid;
        }
        final PropertyTree vertweightPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("vertweight"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(vertweightPropertyTree!= null):((vertweightPropertyTree == null)||(!vertweightPropertyTree.isLeaf())))) {
            this.vertweight = _other.vertweight;
        }
    }

    /**
     * Gets the value of the body property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getBody() {
        return body;
    }

    /**
     * Gets the value of the bindpos property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getBindpos() {
        return bindpos;
    }

    /**
     * Gets the value of the bindquat property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getBindquat() {
        return bindquat;
    }

    /**
     * Gets the value of the vertid property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getVertid() {
        return vertid;
    }

    /**
     * Gets the value of the vertweight property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getVertweight() {
        return vertweight;
    }

    public void addVetoableChangeListener(final VetoableChangeListener vetoableChangeListener) {
        this.vetoableChange__Support.addVetoableChangeListener(vetoableChangeListener);
    }

    public void removeVetoableChangeListener(final VetoableChangeListener vetoableChangeListener) {
        this.vetoableChange__Support.removeVetoableChangeListener(vetoableChangeListener);
    }

    public BoneType withVetoableChangeListener(final VetoableChangeListener vetoableChangeListener) {
        addVetoableChangeListener(vetoableChangeListener);
        return this;
    }

    public void addPropertyChangeListener(final PropertyChangeListener propertyChangeListener) {
        this.propertyChange__Support.addPropertyChangeListener(propertyChangeListener);
    }

    public void removePropertyChangeListener(final PropertyChangeListener propertyChangeListener) {
        this.propertyChange__Support.removePropertyChangeListener(propertyChangeListener);
    }

    public BoneType withPropertyChangeListener(final PropertyChangeListener propertyChangeListener) {
        addPropertyChangeListener(propertyChangeListener);
        return this;
    }

    public void setBody(final String value) {
        final String __oldValue = this.body;
        try {
            this.vetoableChange__Support.fireVetoableChange("body", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.body = value;
        this.propertyChange__Support.firePropertyChange("body", __oldValue, value);
    }

    public void setBindpos(final String value) {
        final String __oldValue = this.bindpos;
        try {
            this.vetoableChange__Support.fireVetoableChange("bindpos", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.bindpos = value;
        this.propertyChange__Support.firePropertyChange("bindpos", __oldValue, value);
    }

    public void setBindquat(final String value) {
        final String __oldValue = this.bindquat;
        try {
            this.vetoableChange__Support.fireVetoableChange("bindquat", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.bindquat = value;
        this.propertyChange__Support.firePropertyChange("bindquat", __oldValue, value);
    }

    public void setVertid(final String value) {
        final String __oldValue = this.vertid;
        try {
            this.vetoableChange__Support.fireVetoableChange("vertid", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.vertid = value;
        this.propertyChange__Support.firePropertyChange("vertid", __oldValue, value);
    }

    public void setVertweight(final String value) {
        final String __oldValue = this.vertweight;
        try {
            this.vetoableChange__Support.fireVetoableChange("vertweight", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.vertweight = value;
        this.propertyChange__Support.firePropertyChange("vertweight", __oldValue, value);
    }

    @Override
    public BoneType clone() {
        final BoneType _newObject;
        try {
            _newObject = ((BoneType) super.clone());
        } catch (CloneNotSupportedException e) {
            throw new RuntimeException(e);
        }
        return _newObject;
    }

    @Override
    public BoneType createCopy() {
        final BoneType _newObject;
        try {
            _newObject = ((BoneType) super.clone());
        } catch (CloneNotSupportedException e) {
            throw new RuntimeException(e);
        }
        _newObject.body = this.body;
        _newObject.bindpos = this.bindpos;
        _newObject.bindquat = this.bindquat;
        _newObject.vertid = this.vertid;
        _newObject.vertweight = this.vertweight;
        return _newObject;
    }

    @Override
    public BoneType createCopy(final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        final BoneType _newObject;
        try {
            _newObject = ((BoneType) super.clone());
        } catch (CloneNotSupportedException e) {
            throw new RuntimeException(e);
        }
        final PropertyTree bodyPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("body"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(bodyPropertyTree!= null):((bodyPropertyTree == null)||(!bodyPropertyTree.isLeaf())))) {
            _newObject.body = this.body;
        }
        final PropertyTree bindposPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("bindpos"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(bindposPropertyTree!= null):((bindposPropertyTree == null)||(!bindposPropertyTree.isLeaf())))) {
            _newObject.bindpos = this.bindpos;
        }
        final PropertyTree bindquatPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("bindquat"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(bindquatPropertyTree!= null):((bindquatPropertyTree == null)||(!bindquatPropertyTree.isLeaf())))) {
            _newObject.bindquat = this.bindquat;
        }
        final PropertyTree vertidPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("vertid"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(vertidPropertyTree!= null):((vertidPropertyTree == null)||(!vertidPropertyTree.isLeaf())))) {
            _newObject.vertid = this.vertid;
        }
        final PropertyTree vertweightPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("vertweight"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(vertweightPropertyTree!= null):((vertweightPropertyTree == null)||(!vertweightPropertyTree.isLeaf())))) {
            _newObject.vertweight = this.vertweight;
        }
        return _newObject;
    }

    @Override
    public BoneType copyExcept(final PropertyTree _propertyTree) {
        return createCopy(_propertyTree, PropertyTreeUse.EXCLUDE);
    }

    @Override
    public BoneType copyOnly(final PropertyTree _propertyTree) {
        return createCopy(_propertyTree, PropertyTreeUse.INCLUDE);
    }

    /**
     * Copies all state of this object to a builder. This method is used by the {@link #copyOf} method and should not be called directly by client code.
     * 
     * @param _other
     *     A builder instance to which the state of this object will be copied.
     */
    public<_B >void copyTo(final BoneType.Builder<_B> _other) {
        _other.body = this.body;
        _other.bindpos = this.bindpos;
        _other.bindquat = this.bindquat;
        _other.vertid = this.vertid;
        _other.vertweight = this.vertweight;
    }

    public<_B >BoneType.Builder<_B> newCopyBuilder(final _B _parentBuilder) {
        return new BoneType.Builder<_B>(_parentBuilder, this, true);
    }

    public BoneType.Builder<Void> newCopyBuilder() {
        return newCopyBuilder(null);
    }

    public static BoneType.Builder<Void> builder() {
        return new BoneType.Builder<Void>(null, null, false);
    }

    public static<_B >BoneType.Builder<_B> copyOf(final BoneType _other) {
        final BoneType.Builder<_B> _newBuilder = new BoneType.Builder<_B>(null, null, false);
        _other.copyTo(_newBuilder);
        return _newBuilder;
    }

    /**
     * Copies all state of this object to a builder. This method is used by the {@link #copyOf} method and should not be called directly by client code.
     * 
     * @param _other
     *     A builder instance to which the state of this object will be copied.
     */
    public<_B >void copyTo(final BoneType.Builder<_B> _other, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        final PropertyTree bodyPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("body"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(bodyPropertyTree!= null):((bodyPropertyTree == null)||(!bodyPropertyTree.isLeaf())))) {
            _other.body = this.body;
        }
        final PropertyTree bindposPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("bindpos"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(bindposPropertyTree!= null):((bindposPropertyTree == null)||(!bindposPropertyTree.isLeaf())))) {
            _other.bindpos = this.bindpos;
        }
        final PropertyTree bindquatPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("bindquat"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(bindquatPropertyTree!= null):((bindquatPropertyTree == null)||(!bindquatPropertyTree.isLeaf())))) {
            _other.bindquat = this.bindquat;
        }
        final PropertyTree vertidPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("vertid"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(vertidPropertyTree!= null):((vertidPropertyTree == null)||(!vertidPropertyTree.isLeaf())))) {
            _other.vertid = this.vertid;
        }
        final PropertyTree vertweightPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("vertweight"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(vertweightPropertyTree!= null):((vertweightPropertyTree == null)||(!vertweightPropertyTree.isLeaf())))) {
            _other.vertweight = this.vertweight;
        }
    }

    public<_B >BoneType.Builder<_B> newCopyBuilder(final _B _parentBuilder, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        return new BoneType.Builder<_B>(_parentBuilder, this, true, _propertyTree, _propertyTreeUse);
    }

    public BoneType.Builder<Void> newCopyBuilder(final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        return newCopyBuilder(null, _propertyTree, _propertyTreeUse);
    }

    public static<_B >BoneType.Builder<_B> copyOf(final BoneType _other, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        final BoneType.Builder<_B> _newBuilder = new BoneType.Builder<_B>(null, null, false);
        _other.copyTo(_newBuilder, _propertyTree, _propertyTreeUse);
        return _newBuilder;
    }

    public static BoneType.Builder<Void> copyExcept(final BoneType _other, final PropertyTree _propertyTree) {
        return copyOf(_other, _propertyTree, PropertyTreeUse.EXCLUDE);
    }

    public static BoneType.Builder<Void> copyOnly(final BoneType _other, final PropertyTree _propertyTree) {
        return copyOf(_other, _propertyTree, PropertyTreeUse.INCLUDE);
    }

    public BoneType visit(final PropertyVisitor _visitor_) {
        _visitor_.visit(this);
        return this;
    }

    public static class Builder<_B >implements Buildable
    {

        protected final _B _parentBuilder;
        private String body;
        private String bindpos;
        private String bindquat;
        private String vertid;
        private String vertweight;

        public Builder(final _B _parentBuilder, final BoneType _other, final boolean _copy) {
            this._parentBuilder = _parentBuilder;
            if (_other!= null) {
                this.body = _other.body;
                this.bindpos = _other.bindpos;
                this.bindquat = _other.bindquat;
                this.vertid = _other.vertid;
                this.vertweight = _other.vertweight;
            }
        }

        public Builder(final _B _parentBuilder, final BoneType _other, final boolean _copy, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
            this._parentBuilder = _parentBuilder;
            if (_other!= null) {
                final PropertyTree bodyPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("body"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(bodyPropertyTree!= null):((bodyPropertyTree == null)||(!bodyPropertyTree.isLeaf())))) {
                    this.body = _other.body;
                }
                final PropertyTree bindposPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("bindpos"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(bindposPropertyTree!= null):((bindposPropertyTree == null)||(!bindposPropertyTree.isLeaf())))) {
                    this.bindpos = _other.bindpos;
                }
                final PropertyTree bindquatPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("bindquat"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(bindquatPropertyTree!= null):((bindquatPropertyTree == null)||(!bindquatPropertyTree.isLeaf())))) {
                    this.bindquat = _other.bindquat;
                }
                final PropertyTree vertidPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("vertid"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(vertidPropertyTree!= null):((vertidPropertyTree == null)||(!vertidPropertyTree.isLeaf())))) {
                    this.vertid = _other.vertid;
                }
                final PropertyTree vertweightPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("vertweight"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(vertweightPropertyTree!= null):((vertweightPropertyTree == null)||(!vertweightPropertyTree.isLeaf())))) {
                    this.vertweight = _other.vertweight;
                }
            }
        }

        public _B end() {
            return this._parentBuilder;
        }

        protected<_P extends BoneType >_P init(final _P _product) {
            _product.body = this.body;
            _product.bindpos = this.bindpos;
            _product.bindquat = this.bindquat;
            _product.vertid = this.vertid;
            _product.vertweight = this.vertweight;
            return _product;
        }

        /**
         * Sets the new value of "body" (any previous value will be replaced)
         * 
         * @param body
         *     New value of the "body" property.
         */
        public BoneType.Builder<_B> withBody(final String body) {
            this.body = body;
            return this;
        }

        /**
         * Sets the new value of "bindpos" (any previous value will be replaced)
         * 
         * @param bindpos
         *     New value of the "bindpos" property.
         */
        public BoneType.Builder<_B> withBindpos(final String bindpos) {
            this.bindpos = bindpos;
            return this;
        }

        /**
         * Sets the new value of "bindquat" (any previous value will be replaced)
         * 
         * @param bindquat
         *     New value of the "bindquat" property.
         */
        public BoneType.Builder<_B> withBindquat(final String bindquat) {
            this.bindquat = bindquat;
            return this;
        }

        /**
         * Sets the new value of "vertid" (any previous value will be replaced)
         * 
         * @param vertid
         *     New value of the "vertid" property.
         */
        public BoneType.Builder<_B> withVertid(final String vertid) {
            this.vertid = vertid;
            return this;
        }

        /**
         * Sets the new value of "vertweight" (any previous value will be replaced)
         * 
         * @param vertweight
         *     New value of the "vertweight" property.
         */
        public BoneType.Builder<_B> withVertweight(final String vertweight) {
            this.vertweight = vertweight;
            return this;
        }

        @Override
        public BoneType build() {
            return this.init(new BoneType());
        }

        public BoneType.Builder<_B> copyOf(final BoneType _other) {
            _other.copyTo(this);
            return this;
        }

        public BoneType.Builder<_B> copyOf(final BoneType.Builder _other) {
            return copyOf(_other.build());
        }

    }

    public static class PropInfo {

        public final static transient String BODY = "body";
        public final static transient String BINDPOS = "bindpos";
        public final static transient String BINDQUAT = "bindquat";
        public final static transient String VERTID = "vertid";
        public final static transient String VERTWEIGHT = "vertweight";

    }

    public static class Select
        extends BoneType.Selector<BoneType.Select, Void>
    {


        Select() {
            super(null, null, null);
        }

        public static BoneType.Select _root() {
            return new BoneType.Select();
        }

    }

    public static class Selector<TRoot extends com.kscs.util.jaxb.Selector<TRoot, ?> , TParent >
        extends com.kscs.util.jaxb.Selector<TRoot, TParent>
    {

        private com.kscs.util.jaxb.Selector<TRoot, BoneType.Selector<TRoot, TParent>> body = null;
        private com.kscs.util.jaxb.Selector<TRoot, BoneType.Selector<TRoot, TParent>> bindpos = null;
        private com.kscs.util.jaxb.Selector<TRoot, BoneType.Selector<TRoot, TParent>> bindquat = null;
        private com.kscs.util.jaxb.Selector<TRoot, BoneType.Selector<TRoot, TParent>> vertid = null;
        private com.kscs.util.jaxb.Selector<TRoot, BoneType.Selector<TRoot, TParent>> vertweight = null;

        public Selector(final TRoot root, final TParent parent, final String propertyName) {
            super(root, parent, propertyName);
        }

        @Override
        public Map<String, PropertyTree> buildChildren() {
            final Map<String, PropertyTree> products = new HashMap<String, PropertyTree>();
            products.putAll(super.buildChildren());
            if (this.body!= null) {
                products.put("body", this.body.init());
            }
            if (this.bindpos!= null) {
                products.put("bindpos", this.bindpos.init());
            }
            if (this.bindquat!= null) {
                products.put("bindquat", this.bindquat.init());
            }
            if (this.vertid!= null) {
                products.put("vertid", this.vertid.init());
            }
            if (this.vertweight!= null) {
                products.put("vertweight", this.vertweight.init());
            }
            return products;
        }

        public com.kscs.util.jaxb.Selector<TRoot, BoneType.Selector<TRoot, TParent>> body() {
            return ((this.body == null)?this.body = new com.kscs.util.jaxb.Selector<TRoot, BoneType.Selector<TRoot, TParent>>(this._root, this, "body"):this.body);
        }

        public com.kscs.util.jaxb.Selector<TRoot, BoneType.Selector<TRoot, TParent>> bindpos() {
            return ((this.bindpos == null)?this.bindpos = new com.kscs.util.jaxb.Selector<TRoot, BoneType.Selector<TRoot, TParent>>(this._root, this, "bindpos"):this.bindpos);
        }

        public com.kscs.util.jaxb.Selector<TRoot, BoneType.Selector<TRoot, TParent>> bindquat() {
            return ((this.bindquat == null)?this.bindquat = new com.kscs.util.jaxb.Selector<TRoot, BoneType.Selector<TRoot, TParent>>(this._root, this, "bindquat"):this.bindquat);
        }

        public com.kscs.util.jaxb.Selector<TRoot, BoneType.Selector<TRoot, TParent>> vertid() {
            return ((this.vertid == null)?this.vertid = new com.kscs.util.jaxb.Selector<TRoot, BoneType.Selector<TRoot, TParent>>(this._root, this, "vertid"):this.vertid);
        }

        public com.kscs.util.jaxb.Selector<TRoot, BoneType.Selector<TRoot, TParent>> vertweight() {
            return ((this.vertweight == null)?this.vertweight = new com.kscs.util.jaxb.Selector<TRoot, BoneType.Selector<TRoot, TParent>>(this._root, this, "vertweight"):this.vertweight);
        }

    }

}
