//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.3.0 
// See <a href="https://javaee.github.io/jaxb-v2/">https://javaee.github.io/jaxb-v2/</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2024.03.13 at 04:32:01 PM EDT 
//


package org.mujoco.xml.body;

import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeSupport;
import java.beans.PropertyVetoException;
import java.beans.VetoableChangeListener;
import java.beans.VetoableChangeSupport;
import java.math.BigDecimal;
import java.util.HashMap;
import java.util.Map;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlType;
import com.kscs.util.jaxb.Buildable;
import com.kscs.util.jaxb.Copyable;
import com.kscs.util.jaxb.PartialCopyable;
import com.kscs.util.jaxb.PropertyTree;
import com.kscs.util.jaxb.PropertyTreeUse;
import com.kscs.util.jaxb.PropertyVisitor;
import org.mujoco.xml.attributetypes.JointkindType;


/**
 * <p>Java class for compositejointType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="compositejointType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;attribute name="kind" use="required" type="{attributeTypes}jointkindType" /&gt;
 *       &lt;attribute name="solimpfix" type="{attributeTypes}solimpType" default="0.9 0.95 0.001 0.5 2" /&gt;
 *       &lt;attribute name="solreffix" type="{attributeTypes}twoRealsType" default="0.02 1" /&gt;
 *       &lt;attribute name="group" type="{http://www.w3.org/2001/XMLSchema}int" default="0" /&gt;
 *       &lt;attribute name="stiffness" type="{http://www.w3.org/2001/XMLSchema}decimal" default="0" /&gt;
 *       &lt;attribute name="damping" type="{http://www.w3.org/2001/XMLSchema}decimal" default="0" /&gt;
 *       &lt;attribute name="armature" type="{http://www.w3.org/2001/XMLSchema}decimal" default="0" /&gt;
 *       &lt;attribute name="limited" type="{http://www.w3.org/2001/XMLSchema}boolean" default="false" /&gt;
 *       &lt;attribute name="range" type="{attributeTypes}twoRealsType" default="0 0" /&gt;
 *       &lt;attribute name="margin" type="{http://www.w3.org/2001/XMLSchema}decimal" default="0" /&gt;
 *       &lt;attribute name="solreflimit" type="{attributeTypes}twoRealsType" default="0.02 1" /&gt;
 *       &lt;attribute name="solimplimit" type="{attributeTypes}solimpType" default="0.9 0.95 0.001 0.5 2" /&gt;
 *       &lt;attribute name="frictionloss" type="{http://www.w3.org/2001/XMLSchema}decimal" default="0" /&gt;
 *       &lt;attribute name="solreffriction" type="{attributeTypes}twoRealsType" default="0.02 1" /&gt;
 *       &lt;attribute name="solimpfriction" type="{attributeTypes}solimpType" default="0.9 0.95 0.001 0.5 2" /&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "compositejointType")
public class CompositejointType implements Cloneable, Copyable, PartialCopyable
{

    @XmlAttribute(name = "kind", required = true)
    protected JointkindType kind;
    @XmlAttribute(name = "solimpfix")
    protected String solimpfix;
    @XmlAttribute(name = "solreffix")
    protected String solreffix;
    @XmlAttribute(name = "group")
    protected Integer group;
    @XmlAttribute(name = "stiffness")
    protected BigDecimal stiffness;
    @XmlAttribute(name = "damping")
    protected BigDecimal damping;
    @XmlAttribute(name = "armature")
    protected BigDecimal armature;
    @XmlAttribute(name = "limited")
    protected Boolean limited;
    @XmlAttribute(name = "range")
    protected String range;
    @XmlAttribute(name = "margin")
    protected BigDecimal margin;
    @XmlAttribute(name = "solreflimit")
    protected String solreflimit;
    @XmlAttribute(name = "solimplimit")
    protected String solimplimit;
    @XmlAttribute(name = "frictionloss")
    protected BigDecimal frictionloss;
    @XmlAttribute(name = "solreffriction")
    protected String solreffriction;
    @XmlAttribute(name = "solimpfriction")
    protected String solimpfriction;
    protected final transient VetoableChangeSupport vetoableChange__Support = new VetoableChangeSupport(this);
    protected final transient PropertyChangeSupport propertyChange__Support = new PropertyChangeSupport(this);

    /**
     * Generated by copy-constructor plugin, JAXB requires public no-arg constructor.
     * 
     */
    public CompositejointType() {
        // Generated by copy-constructor plugin, JAXB requires public no-arg constructor.
    }

    /**
     * Instantiates a CompositejointType copying the state of another CompositejointType
     * 
     * @param _other
     *     The original CompositejointType from which to copy state.
     */
    public CompositejointType(final CompositejointType _other) {
        this.kind = _other.kind;
        this.solimpfix = _other.solimpfix;
        this.solreffix = _other.solreffix;
        this.group = _other.group;
        this.stiffness = _other.stiffness;
        this.damping = _other.damping;
        this.armature = _other.armature;
        this.limited = _other.limited;
        this.range = _other.range;
        this.margin = _other.margin;
        this.solreflimit = _other.solreflimit;
        this.solimplimit = _other.solimplimit;
        this.frictionloss = _other.frictionloss;
        this.solreffriction = _other.solreffriction;
        this.solimpfriction = _other.solimpfriction;
    }

    /**
     * Instantiates a CompositejointType copying the state of another CompositejointType
     * 
     * @param _propertyTreeUse
     *     Meaning of the {@link PropertyPath}: Exclude or include members contained in property path.
     * @param _propertyTree
     *     A restricting {@link PropertyPath} that defines which nodes of the source object tree should actually be copied.
     * @param _other
     *     The original CompositejointType from which to copy state.
     */
    public CompositejointType(final CompositejointType _other, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        final PropertyTree kindPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("kind"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(kindPropertyTree!= null):((kindPropertyTree == null)||(!kindPropertyTree.isLeaf())))) {
            this.kind = _other.kind;
        }
        final PropertyTree solimpfixPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("solimpfix"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(solimpfixPropertyTree!= null):((solimpfixPropertyTree == null)||(!solimpfixPropertyTree.isLeaf())))) {
            this.solimpfix = _other.solimpfix;
        }
        final PropertyTree solreffixPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("solreffix"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(solreffixPropertyTree!= null):((solreffixPropertyTree == null)||(!solreffixPropertyTree.isLeaf())))) {
            this.solreffix = _other.solreffix;
        }
        final PropertyTree groupPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("group"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(groupPropertyTree!= null):((groupPropertyTree == null)||(!groupPropertyTree.isLeaf())))) {
            this.group = _other.group;
        }
        final PropertyTree stiffnessPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("stiffness"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(stiffnessPropertyTree!= null):((stiffnessPropertyTree == null)||(!stiffnessPropertyTree.isLeaf())))) {
            this.stiffness = _other.stiffness;
        }
        final PropertyTree dampingPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("damping"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(dampingPropertyTree!= null):((dampingPropertyTree == null)||(!dampingPropertyTree.isLeaf())))) {
            this.damping = _other.damping;
        }
        final PropertyTree armaturePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("armature"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(armaturePropertyTree!= null):((armaturePropertyTree == null)||(!armaturePropertyTree.isLeaf())))) {
            this.armature = _other.armature;
        }
        final PropertyTree limitedPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("limited"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(limitedPropertyTree!= null):((limitedPropertyTree == null)||(!limitedPropertyTree.isLeaf())))) {
            this.limited = _other.limited;
        }
        final PropertyTree rangePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("range"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(rangePropertyTree!= null):((rangePropertyTree == null)||(!rangePropertyTree.isLeaf())))) {
            this.range = _other.range;
        }
        final PropertyTree marginPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("margin"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(marginPropertyTree!= null):((marginPropertyTree == null)||(!marginPropertyTree.isLeaf())))) {
            this.margin = _other.margin;
        }
        final PropertyTree solreflimitPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("solreflimit"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(solreflimitPropertyTree!= null):((solreflimitPropertyTree == null)||(!solreflimitPropertyTree.isLeaf())))) {
            this.solreflimit = _other.solreflimit;
        }
        final PropertyTree solimplimitPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("solimplimit"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(solimplimitPropertyTree!= null):((solimplimitPropertyTree == null)||(!solimplimitPropertyTree.isLeaf())))) {
            this.solimplimit = _other.solimplimit;
        }
        final PropertyTree frictionlossPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("frictionloss"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(frictionlossPropertyTree!= null):((frictionlossPropertyTree == null)||(!frictionlossPropertyTree.isLeaf())))) {
            this.frictionloss = _other.frictionloss;
        }
        final PropertyTree solreffrictionPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("solreffriction"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(solreffrictionPropertyTree!= null):((solreffrictionPropertyTree == null)||(!solreffrictionPropertyTree.isLeaf())))) {
            this.solreffriction = _other.solreffriction;
        }
        final PropertyTree solimpfrictionPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("solimpfriction"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(solimpfrictionPropertyTree!= null):((solimpfrictionPropertyTree == null)||(!solimpfrictionPropertyTree.isLeaf())))) {
            this.solimpfriction = _other.solimpfriction;
        }
    }

    /**
     * Gets the value of the kind property.
     * 
     * @return
     *     possible object is
     *     {@link JointkindType }
     *     
     */
    public JointkindType getKind() {
        return kind;
    }

    /**
     * Gets the value of the solimpfix property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getSolimpfix() {
        if (solimpfix == null) {
            return "0.9 0.95 0.001 0.5 2";
        } else {
            return solimpfix;
        }
    }

    /**
     * Gets the value of the solreffix property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getSolreffix() {
        if (solreffix == null) {
            return "0.02 1";
        } else {
            return solreffix;
        }
    }

    /**
     * Gets the value of the group property.
     * 
     * @return
     *     possible object is
     *     {@link Integer }
     *     
     */
    public int getGroup() {
        if (group == null) {
            return  0;
        } else {
            return group;
        }
    }

    /**
     * Gets the value of the stiffness property.
     * 
     * @return
     *     possible object is
     *     {@link BigDecimal }
     *     
     */
    public BigDecimal getStiffness() {
        if (stiffness == null) {
            return new BigDecimal("0");
        } else {
            return stiffness;
        }
    }

    /**
     * Gets the value of the damping property.
     * 
     * @return
     *     possible object is
     *     {@link BigDecimal }
     *     
     */
    public BigDecimal getDamping() {
        if (damping == null) {
            return new BigDecimal("0");
        } else {
            return damping;
        }
    }

    /**
     * Gets the value of the armature property.
     * 
     * @return
     *     possible object is
     *     {@link BigDecimal }
     *     
     */
    public BigDecimal getArmature() {
        if (armature == null) {
            return new BigDecimal("0");
        } else {
            return armature;
        }
    }

    /**
     * Gets the value of the limited property.
     * 
     * @return
     *     possible object is
     *     {@link Boolean }
     *     
     */
    public boolean isLimited() {
        if (limited == null) {
            return false;
        } else {
            return limited;
        }
    }

    /**
     * Gets the value of the range property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getRange() {
        if (range == null) {
            return "0 0";
        } else {
            return range;
        }
    }

    /**
     * Gets the value of the margin property.
     * 
     * @return
     *     possible object is
     *     {@link BigDecimal }
     *     
     */
    public BigDecimal getMargin() {
        if (margin == null) {
            return new BigDecimal("0");
        } else {
            return margin;
        }
    }

    /**
     * Gets the value of the solreflimit property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getSolreflimit() {
        if (solreflimit == null) {
            return "0.02 1";
        } else {
            return solreflimit;
        }
    }

    /**
     * Gets the value of the solimplimit property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getSolimplimit() {
        if (solimplimit == null) {
            return "0.9 0.95 0.001 0.5 2";
        } else {
            return solimplimit;
        }
    }

    /**
     * Gets the value of the frictionloss property.
     * 
     * @return
     *     possible object is
     *     {@link BigDecimal }
     *     
     */
    public BigDecimal getFrictionloss() {
        if (frictionloss == null) {
            return new BigDecimal("0");
        } else {
            return frictionloss;
        }
    }

    /**
     * Gets the value of the solreffriction property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getSolreffriction() {
        if (solreffriction == null) {
            return "0.02 1";
        } else {
            return solreffriction;
        }
    }

    /**
     * Gets the value of the solimpfriction property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getSolimpfriction() {
        if (solimpfriction == null) {
            return "0.9 0.95 0.001 0.5 2";
        } else {
            return solimpfriction;
        }
    }

    public void addVetoableChangeListener(final VetoableChangeListener vetoableChangeListener) {
        this.vetoableChange__Support.addVetoableChangeListener(vetoableChangeListener);
    }

    public void removeVetoableChangeListener(final VetoableChangeListener vetoableChangeListener) {
        this.vetoableChange__Support.removeVetoableChangeListener(vetoableChangeListener);
    }

    public CompositejointType withVetoableChangeListener(final VetoableChangeListener vetoableChangeListener) {
        addVetoableChangeListener(vetoableChangeListener);
        return this;
    }

    public void addPropertyChangeListener(final PropertyChangeListener propertyChangeListener) {
        this.propertyChange__Support.addPropertyChangeListener(propertyChangeListener);
    }

    public void removePropertyChangeListener(final PropertyChangeListener propertyChangeListener) {
        this.propertyChange__Support.removePropertyChangeListener(propertyChangeListener);
    }

    public CompositejointType withPropertyChangeListener(final PropertyChangeListener propertyChangeListener) {
        addPropertyChangeListener(propertyChangeListener);
        return this;
    }

    public void setKind(final JointkindType value) {
        final JointkindType __oldValue = this.kind;
        try {
            this.vetoableChange__Support.fireVetoableChange("kind", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.kind = value;
        this.propertyChange__Support.firePropertyChange("kind", __oldValue, value);
    }

    public void setSolimpfix(final String value) {
        final String __oldValue = this.solimpfix;
        try {
            this.vetoableChange__Support.fireVetoableChange("solimpfix", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.solimpfix = value;
        this.propertyChange__Support.firePropertyChange("solimpfix", __oldValue, value);
    }

    public void setSolreffix(final String value) {
        final String __oldValue = this.solreffix;
        try {
            this.vetoableChange__Support.fireVetoableChange("solreffix", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.solreffix = value;
        this.propertyChange__Support.firePropertyChange("solreffix", __oldValue, value);
    }

    public void setGroup(final Integer value) {
        final Integer __oldValue = this.group;
        try {
            this.vetoableChange__Support.fireVetoableChange("group", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.group = value;
        this.propertyChange__Support.firePropertyChange("group", __oldValue, value);
    }

    public void setStiffness(final BigDecimal value) {
        final BigDecimal __oldValue = this.stiffness;
        try {
            this.vetoableChange__Support.fireVetoableChange("stiffness", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.stiffness = value;
        this.propertyChange__Support.firePropertyChange("stiffness", __oldValue, value);
    }

    public void setDamping(final BigDecimal value) {
        final BigDecimal __oldValue = this.damping;
        try {
            this.vetoableChange__Support.fireVetoableChange("damping", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.damping = value;
        this.propertyChange__Support.firePropertyChange("damping", __oldValue, value);
    }

    public void setArmature(final BigDecimal value) {
        final BigDecimal __oldValue = this.armature;
        try {
            this.vetoableChange__Support.fireVetoableChange("armature", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.armature = value;
        this.propertyChange__Support.firePropertyChange("armature", __oldValue, value);
    }

    public void setLimited(final Boolean value) {
        final Boolean __oldValue = this.limited;
        try {
            this.vetoableChange__Support.fireVetoableChange("limited", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.limited = value;
        this.propertyChange__Support.firePropertyChange("limited", __oldValue, value);
    }

    public void setRange(final String value) {
        final String __oldValue = this.range;
        try {
            this.vetoableChange__Support.fireVetoableChange("range", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.range = value;
        this.propertyChange__Support.firePropertyChange("range", __oldValue, value);
    }

    public void setMargin(final BigDecimal value) {
        final BigDecimal __oldValue = this.margin;
        try {
            this.vetoableChange__Support.fireVetoableChange("margin", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.margin = value;
        this.propertyChange__Support.firePropertyChange("margin", __oldValue, value);
    }

    public void setSolreflimit(final String value) {
        final String __oldValue = this.solreflimit;
        try {
            this.vetoableChange__Support.fireVetoableChange("solreflimit", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.solreflimit = value;
        this.propertyChange__Support.firePropertyChange("solreflimit", __oldValue, value);
    }

    public void setSolimplimit(final String value) {
        final String __oldValue = this.solimplimit;
        try {
            this.vetoableChange__Support.fireVetoableChange("solimplimit", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.solimplimit = value;
        this.propertyChange__Support.firePropertyChange("solimplimit", __oldValue, value);
    }

    public void setFrictionloss(final BigDecimal value) {
        final BigDecimal __oldValue = this.frictionloss;
        try {
            this.vetoableChange__Support.fireVetoableChange("frictionloss", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.frictionloss = value;
        this.propertyChange__Support.firePropertyChange("frictionloss", __oldValue, value);
    }

    public void setSolreffriction(final String value) {
        final String __oldValue = this.solreffriction;
        try {
            this.vetoableChange__Support.fireVetoableChange("solreffriction", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.solreffriction = value;
        this.propertyChange__Support.firePropertyChange("solreffriction", __oldValue, value);
    }

    public void setSolimpfriction(final String value) {
        final String __oldValue = this.solimpfriction;
        try {
            this.vetoableChange__Support.fireVetoableChange("solimpfriction", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.solimpfriction = value;
        this.propertyChange__Support.firePropertyChange("solimpfriction", __oldValue, value);
    }

    @Override
    public CompositejointType clone() {
        final CompositejointType _newObject;
        try {
            _newObject = ((CompositejointType) super.clone());
        } catch (CloneNotSupportedException e) {
            throw new RuntimeException(e);
        }
        return _newObject;
    }

    @Override
    public CompositejointType createCopy() {
        final CompositejointType _newObject;
        try {
            _newObject = ((CompositejointType) super.clone());
        } catch (CloneNotSupportedException e) {
            throw new RuntimeException(e);
        }
        _newObject.kind = this.kind;
        _newObject.solimpfix = this.solimpfix;
        _newObject.solreffix = this.solreffix;
        _newObject.group = this.group;
        _newObject.stiffness = this.stiffness;
        _newObject.damping = this.damping;
        _newObject.armature = this.armature;
        _newObject.limited = this.limited;
        _newObject.range = this.range;
        _newObject.margin = this.margin;
        _newObject.solreflimit = this.solreflimit;
        _newObject.solimplimit = this.solimplimit;
        _newObject.frictionloss = this.frictionloss;
        _newObject.solreffriction = this.solreffriction;
        _newObject.solimpfriction = this.solimpfriction;
        return _newObject;
    }

    @Override
    public CompositejointType createCopy(final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        final CompositejointType _newObject;
        try {
            _newObject = ((CompositejointType) super.clone());
        } catch (CloneNotSupportedException e) {
            throw new RuntimeException(e);
        }
        final PropertyTree kindPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("kind"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(kindPropertyTree!= null):((kindPropertyTree == null)||(!kindPropertyTree.isLeaf())))) {
            _newObject.kind = this.kind;
        }
        final PropertyTree solimpfixPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("solimpfix"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(solimpfixPropertyTree!= null):((solimpfixPropertyTree == null)||(!solimpfixPropertyTree.isLeaf())))) {
            _newObject.solimpfix = this.solimpfix;
        }
        final PropertyTree solreffixPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("solreffix"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(solreffixPropertyTree!= null):((solreffixPropertyTree == null)||(!solreffixPropertyTree.isLeaf())))) {
            _newObject.solreffix = this.solreffix;
        }
        final PropertyTree groupPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("group"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(groupPropertyTree!= null):((groupPropertyTree == null)||(!groupPropertyTree.isLeaf())))) {
            _newObject.group = this.group;
        }
        final PropertyTree stiffnessPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("stiffness"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(stiffnessPropertyTree!= null):((stiffnessPropertyTree == null)||(!stiffnessPropertyTree.isLeaf())))) {
            _newObject.stiffness = this.stiffness;
        }
        final PropertyTree dampingPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("damping"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(dampingPropertyTree!= null):((dampingPropertyTree == null)||(!dampingPropertyTree.isLeaf())))) {
            _newObject.damping = this.damping;
        }
        final PropertyTree armaturePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("armature"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(armaturePropertyTree!= null):((armaturePropertyTree == null)||(!armaturePropertyTree.isLeaf())))) {
            _newObject.armature = this.armature;
        }
        final PropertyTree limitedPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("limited"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(limitedPropertyTree!= null):((limitedPropertyTree == null)||(!limitedPropertyTree.isLeaf())))) {
            _newObject.limited = this.limited;
        }
        final PropertyTree rangePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("range"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(rangePropertyTree!= null):((rangePropertyTree == null)||(!rangePropertyTree.isLeaf())))) {
            _newObject.range = this.range;
        }
        final PropertyTree marginPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("margin"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(marginPropertyTree!= null):((marginPropertyTree == null)||(!marginPropertyTree.isLeaf())))) {
            _newObject.margin = this.margin;
        }
        final PropertyTree solreflimitPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("solreflimit"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(solreflimitPropertyTree!= null):((solreflimitPropertyTree == null)||(!solreflimitPropertyTree.isLeaf())))) {
            _newObject.solreflimit = this.solreflimit;
        }
        final PropertyTree solimplimitPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("solimplimit"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(solimplimitPropertyTree!= null):((solimplimitPropertyTree == null)||(!solimplimitPropertyTree.isLeaf())))) {
            _newObject.solimplimit = this.solimplimit;
        }
        final PropertyTree frictionlossPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("frictionloss"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(frictionlossPropertyTree!= null):((frictionlossPropertyTree == null)||(!frictionlossPropertyTree.isLeaf())))) {
            _newObject.frictionloss = this.frictionloss;
        }
        final PropertyTree solreffrictionPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("solreffriction"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(solreffrictionPropertyTree!= null):((solreffrictionPropertyTree == null)||(!solreffrictionPropertyTree.isLeaf())))) {
            _newObject.solreffriction = this.solreffriction;
        }
        final PropertyTree solimpfrictionPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("solimpfriction"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(solimpfrictionPropertyTree!= null):((solimpfrictionPropertyTree == null)||(!solimpfrictionPropertyTree.isLeaf())))) {
            _newObject.solimpfriction = this.solimpfriction;
        }
        return _newObject;
    }

    @Override
    public CompositejointType copyExcept(final PropertyTree _propertyTree) {
        return createCopy(_propertyTree, PropertyTreeUse.EXCLUDE);
    }

    @Override
    public CompositejointType copyOnly(final PropertyTree _propertyTree) {
        return createCopy(_propertyTree, PropertyTreeUse.INCLUDE);
    }

    /**
     * Copies all state of this object to a builder. This method is used by the {@link #copyOf} method and should not be called directly by client code.
     * 
     * @param _other
     *     A builder instance to which the state of this object will be copied.
     */
    public<_B >void copyTo(final CompositejointType.Builder<_B> _other) {
        _other.kind = this.kind;
        _other.solimpfix = this.solimpfix;
        _other.solreffix = this.solreffix;
        _other.group = this.group;
        _other.stiffness = this.stiffness;
        _other.damping = this.damping;
        _other.armature = this.armature;
        _other.limited = this.limited;
        _other.range = this.range;
        _other.margin = this.margin;
        _other.solreflimit = this.solreflimit;
        _other.solimplimit = this.solimplimit;
        _other.frictionloss = this.frictionloss;
        _other.solreffriction = this.solreffriction;
        _other.solimpfriction = this.solimpfriction;
    }

    public<_B >CompositejointType.Builder<_B> newCopyBuilder(final _B _parentBuilder) {
        return new CompositejointType.Builder<_B>(_parentBuilder, this, true);
    }

    public CompositejointType.Builder<Void> newCopyBuilder() {
        return newCopyBuilder(null);
    }

    public static CompositejointType.Builder<Void> builder() {
        return new CompositejointType.Builder<Void>(null, null, false);
    }

    public static<_B >CompositejointType.Builder<_B> copyOf(final CompositejointType _other) {
        final CompositejointType.Builder<_B> _newBuilder = new CompositejointType.Builder<_B>(null, null, false);
        _other.copyTo(_newBuilder);
        return _newBuilder;
    }

    /**
     * Copies all state of this object to a builder. This method is used by the {@link #copyOf} method and should not be called directly by client code.
     * 
     * @param _other
     *     A builder instance to which the state of this object will be copied.
     */
    public<_B >void copyTo(final CompositejointType.Builder<_B> _other, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        final PropertyTree kindPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("kind"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(kindPropertyTree!= null):((kindPropertyTree == null)||(!kindPropertyTree.isLeaf())))) {
            _other.kind = this.kind;
        }
        final PropertyTree solimpfixPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("solimpfix"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(solimpfixPropertyTree!= null):((solimpfixPropertyTree == null)||(!solimpfixPropertyTree.isLeaf())))) {
            _other.solimpfix = this.solimpfix;
        }
        final PropertyTree solreffixPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("solreffix"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(solreffixPropertyTree!= null):((solreffixPropertyTree == null)||(!solreffixPropertyTree.isLeaf())))) {
            _other.solreffix = this.solreffix;
        }
        final PropertyTree groupPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("group"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(groupPropertyTree!= null):((groupPropertyTree == null)||(!groupPropertyTree.isLeaf())))) {
            _other.group = this.group;
        }
        final PropertyTree stiffnessPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("stiffness"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(stiffnessPropertyTree!= null):((stiffnessPropertyTree == null)||(!stiffnessPropertyTree.isLeaf())))) {
            _other.stiffness = this.stiffness;
        }
        final PropertyTree dampingPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("damping"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(dampingPropertyTree!= null):((dampingPropertyTree == null)||(!dampingPropertyTree.isLeaf())))) {
            _other.damping = this.damping;
        }
        final PropertyTree armaturePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("armature"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(armaturePropertyTree!= null):((armaturePropertyTree == null)||(!armaturePropertyTree.isLeaf())))) {
            _other.armature = this.armature;
        }
        final PropertyTree limitedPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("limited"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(limitedPropertyTree!= null):((limitedPropertyTree == null)||(!limitedPropertyTree.isLeaf())))) {
            _other.limited = this.limited;
        }
        final PropertyTree rangePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("range"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(rangePropertyTree!= null):((rangePropertyTree == null)||(!rangePropertyTree.isLeaf())))) {
            _other.range = this.range;
        }
        final PropertyTree marginPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("margin"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(marginPropertyTree!= null):((marginPropertyTree == null)||(!marginPropertyTree.isLeaf())))) {
            _other.margin = this.margin;
        }
        final PropertyTree solreflimitPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("solreflimit"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(solreflimitPropertyTree!= null):((solreflimitPropertyTree == null)||(!solreflimitPropertyTree.isLeaf())))) {
            _other.solreflimit = this.solreflimit;
        }
        final PropertyTree solimplimitPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("solimplimit"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(solimplimitPropertyTree!= null):((solimplimitPropertyTree == null)||(!solimplimitPropertyTree.isLeaf())))) {
            _other.solimplimit = this.solimplimit;
        }
        final PropertyTree frictionlossPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("frictionloss"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(frictionlossPropertyTree!= null):((frictionlossPropertyTree == null)||(!frictionlossPropertyTree.isLeaf())))) {
            _other.frictionloss = this.frictionloss;
        }
        final PropertyTree solreffrictionPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("solreffriction"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(solreffrictionPropertyTree!= null):((solreffrictionPropertyTree == null)||(!solreffrictionPropertyTree.isLeaf())))) {
            _other.solreffriction = this.solreffriction;
        }
        final PropertyTree solimpfrictionPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("solimpfriction"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(solimpfrictionPropertyTree!= null):((solimpfrictionPropertyTree == null)||(!solimpfrictionPropertyTree.isLeaf())))) {
            _other.solimpfriction = this.solimpfriction;
        }
    }

    public<_B >CompositejointType.Builder<_B> newCopyBuilder(final _B _parentBuilder, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        return new CompositejointType.Builder<_B>(_parentBuilder, this, true, _propertyTree, _propertyTreeUse);
    }

    public CompositejointType.Builder<Void> newCopyBuilder(final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        return newCopyBuilder(null, _propertyTree, _propertyTreeUse);
    }

    public static<_B >CompositejointType.Builder<_B> copyOf(final CompositejointType _other, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        final CompositejointType.Builder<_B> _newBuilder = new CompositejointType.Builder<_B>(null, null, false);
        _other.copyTo(_newBuilder, _propertyTree, _propertyTreeUse);
        return _newBuilder;
    }

    public static CompositejointType.Builder<Void> copyExcept(final CompositejointType _other, final PropertyTree _propertyTree) {
        return copyOf(_other, _propertyTree, PropertyTreeUse.EXCLUDE);
    }

    public static CompositejointType.Builder<Void> copyOnly(final CompositejointType _other, final PropertyTree _propertyTree) {
        return copyOf(_other, _propertyTree, PropertyTreeUse.INCLUDE);
    }

    public CompositejointType visit(final PropertyVisitor _visitor_) {
        _visitor_.visit(this);
        return this;
    }

    public static class Builder<_B >implements Buildable
    {

        protected final _B _parentBuilder;
        private JointkindType kind;
        private String solimpfix;
        private String solreffix;
        private Integer group;
        private BigDecimal stiffness;
        private BigDecimal damping;
        private BigDecimal armature;
        private Boolean limited;
        private String range;
        private BigDecimal margin;
        private String solreflimit;
        private String solimplimit;
        private BigDecimal frictionloss;
        private String solreffriction;
        private String solimpfriction;

        public Builder(final _B _parentBuilder, final CompositejointType _other, final boolean _copy) {
            this._parentBuilder = _parentBuilder;
            if (_other!= null) {
                this.kind = _other.kind;
                this.solimpfix = _other.solimpfix;
                this.solreffix = _other.solreffix;
                this.group = _other.group;
                this.stiffness = _other.stiffness;
                this.damping = _other.damping;
                this.armature = _other.armature;
                this.limited = _other.limited;
                this.range = _other.range;
                this.margin = _other.margin;
                this.solreflimit = _other.solreflimit;
                this.solimplimit = _other.solimplimit;
                this.frictionloss = _other.frictionloss;
                this.solreffriction = _other.solreffriction;
                this.solimpfriction = _other.solimpfriction;
            }
        }

        public Builder(final _B _parentBuilder, final CompositejointType _other, final boolean _copy, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
            this._parentBuilder = _parentBuilder;
            if (_other!= null) {
                final PropertyTree kindPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("kind"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(kindPropertyTree!= null):((kindPropertyTree == null)||(!kindPropertyTree.isLeaf())))) {
                    this.kind = _other.kind;
                }
                final PropertyTree solimpfixPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("solimpfix"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(solimpfixPropertyTree!= null):((solimpfixPropertyTree == null)||(!solimpfixPropertyTree.isLeaf())))) {
                    this.solimpfix = _other.solimpfix;
                }
                final PropertyTree solreffixPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("solreffix"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(solreffixPropertyTree!= null):((solreffixPropertyTree == null)||(!solreffixPropertyTree.isLeaf())))) {
                    this.solreffix = _other.solreffix;
                }
                final PropertyTree groupPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("group"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(groupPropertyTree!= null):((groupPropertyTree == null)||(!groupPropertyTree.isLeaf())))) {
                    this.group = _other.group;
                }
                final PropertyTree stiffnessPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("stiffness"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(stiffnessPropertyTree!= null):((stiffnessPropertyTree == null)||(!stiffnessPropertyTree.isLeaf())))) {
                    this.stiffness = _other.stiffness;
                }
                final PropertyTree dampingPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("damping"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(dampingPropertyTree!= null):((dampingPropertyTree == null)||(!dampingPropertyTree.isLeaf())))) {
                    this.damping = _other.damping;
                }
                final PropertyTree armaturePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("armature"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(armaturePropertyTree!= null):((armaturePropertyTree == null)||(!armaturePropertyTree.isLeaf())))) {
                    this.armature = _other.armature;
                }
                final PropertyTree limitedPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("limited"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(limitedPropertyTree!= null):((limitedPropertyTree == null)||(!limitedPropertyTree.isLeaf())))) {
                    this.limited = _other.limited;
                }
                final PropertyTree rangePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("range"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(rangePropertyTree!= null):((rangePropertyTree == null)||(!rangePropertyTree.isLeaf())))) {
                    this.range = _other.range;
                }
                final PropertyTree marginPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("margin"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(marginPropertyTree!= null):((marginPropertyTree == null)||(!marginPropertyTree.isLeaf())))) {
                    this.margin = _other.margin;
                }
                final PropertyTree solreflimitPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("solreflimit"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(solreflimitPropertyTree!= null):((solreflimitPropertyTree == null)||(!solreflimitPropertyTree.isLeaf())))) {
                    this.solreflimit = _other.solreflimit;
                }
                final PropertyTree solimplimitPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("solimplimit"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(solimplimitPropertyTree!= null):((solimplimitPropertyTree == null)||(!solimplimitPropertyTree.isLeaf())))) {
                    this.solimplimit = _other.solimplimit;
                }
                final PropertyTree frictionlossPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("frictionloss"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(frictionlossPropertyTree!= null):((frictionlossPropertyTree == null)||(!frictionlossPropertyTree.isLeaf())))) {
                    this.frictionloss = _other.frictionloss;
                }
                final PropertyTree solreffrictionPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("solreffriction"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(solreffrictionPropertyTree!= null):((solreffrictionPropertyTree == null)||(!solreffrictionPropertyTree.isLeaf())))) {
                    this.solreffriction = _other.solreffriction;
                }
                final PropertyTree solimpfrictionPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("solimpfriction"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(solimpfrictionPropertyTree!= null):((solimpfrictionPropertyTree == null)||(!solimpfrictionPropertyTree.isLeaf())))) {
                    this.solimpfriction = _other.solimpfriction;
                }
            }
        }

        public _B end() {
            return this._parentBuilder;
        }

        protected<_P extends CompositejointType >_P init(final _P _product) {
            _product.kind = this.kind;
            _product.solimpfix = this.solimpfix;
            _product.solreffix = this.solreffix;
            _product.group = this.group;
            _product.stiffness = this.stiffness;
            _product.damping = this.damping;
            _product.armature = this.armature;
            _product.limited = this.limited;
            _product.range = this.range;
            _product.margin = this.margin;
            _product.solreflimit = this.solreflimit;
            _product.solimplimit = this.solimplimit;
            _product.frictionloss = this.frictionloss;
            _product.solreffriction = this.solreffriction;
            _product.solimpfriction = this.solimpfriction;
            return _product;
        }

        /**
         * Sets the new value of "kind" (any previous value will be replaced)
         * 
         * @param kind
         *     New value of the "kind" property.
         */
        public CompositejointType.Builder<_B> withKind(final JointkindType kind) {
            this.kind = kind;
            return this;
        }

        /**
         * Sets the new value of "solimpfix" (any previous value will be replaced)
         * 
         * @param solimpfix
         *     New value of the "solimpfix" property.
         */
        public CompositejointType.Builder<_B> withSolimpfix(final String solimpfix) {
            this.solimpfix = solimpfix;
            return this;
        }

        /**
         * Sets the new value of "solreffix" (any previous value will be replaced)
         * 
         * @param solreffix
         *     New value of the "solreffix" property.
         */
        public CompositejointType.Builder<_B> withSolreffix(final String solreffix) {
            this.solreffix = solreffix;
            return this;
        }

        /**
         * Sets the new value of "group" (any previous value will be replaced)
         * 
         * @param group
         *     New value of the "group" property.
         */
        public CompositejointType.Builder<_B> withGroup(final Integer group) {
            this.group = group;
            return this;
        }

        /**
         * Sets the new value of "stiffness" (any previous value will be replaced)
         * 
         * @param stiffness
         *     New value of the "stiffness" property.
         */
        public CompositejointType.Builder<_B> withStiffness(final BigDecimal stiffness) {
            this.stiffness = stiffness;
            return this;
        }

        /**
         * Sets the new value of "damping" (any previous value will be replaced)
         * 
         * @param damping
         *     New value of the "damping" property.
         */
        public CompositejointType.Builder<_B> withDamping(final BigDecimal damping) {
            this.damping = damping;
            return this;
        }

        /**
         * Sets the new value of "armature" (any previous value will be replaced)
         * 
         * @param armature
         *     New value of the "armature" property.
         */
        public CompositejointType.Builder<_B> withArmature(final BigDecimal armature) {
            this.armature = armature;
            return this;
        }

        /**
         * Sets the new value of "limited" (any previous value will be replaced)
         * 
         * @param limited
         *     New value of the "limited" property.
         */
        public CompositejointType.Builder<_B> withLimited(final Boolean limited) {
            this.limited = limited;
            return this;
        }

        /**
         * Sets the new value of "range" (any previous value will be replaced)
         * 
         * @param range
         *     New value of the "range" property.
         */
        public CompositejointType.Builder<_B> withRange(final String range) {
            this.range = range;
            return this;
        }

        /**
         * Sets the new value of "margin" (any previous value will be replaced)
         * 
         * @param margin
         *     New value of the "margin" property.
         */
        public CompositejointType.Builder<_B> withMargin(final BigDecimal margin) {
            this.margin = margin;
            return this;
        }

        /**
         * Sets the new value of "solreflimit" (any previous value will be replaced)
         * 
         * @param solreflimit
         *     New value of the "solreflimit" property.
         */
        public CompositejointType.Builder<_B> withSolreflimit(final String solreflimit) {
            this.solreflimit = solreflimit;
            return this;
        }

        /**
         * Sets the new value of "solimplimit" (any previous value will be replaced)
         * 
         * @param solimplimit
         *     New value of the "solimplimit" property.
         */
        public CompositejointType.Builder<_B> withSolimplimit(final String solimplimit) {
            this.solimplimit = solimplimit;
            return this;
        }

        /**
         * Sets the new value of "frictionloss" (any previous value will be replaced)
         * 
         * @param frictionloss
         *     New value of the "frictionloss" property.
         */
        public CompositejointType.Builder<_B> withFrictionloss(final BigDecimal frictionloss) {
            this.frictionloss = frictionloss;
            return this;
        }

        /**
         * Sets the new value of "solreffriction" (any previous value will be replaced)
         * 
         * @param solreffriction
         *     New value of the "solreffriction" property.
         */
        public CompositejointType.Builder<_B> withSolreffriction(final String solreffriction) {
            this.solreffriction = solreffriction;
            return this;
        }

        /**
         * Sets the new value of "solimpfriction" (any previous value will be replaced)
         * 
         * @param solimpfriction
         *     New value of the "solimpfriction" property.
         */
        public CompositejointType.Builder<_B> withSolimpfriction(final String solimpfriction) {
            this.solimpfriction = solimpfriction;
            return this;
        }

        @Override
        public CompositejointType build() {
            return this.init(new CompositejointType());
        }

        public CompositejointType.Builder<_B> copyOf(final CompositejointType _other) {
            _other.copyTo(this);
            return this;
        }

        public CompositejointType.Builder<_B> copyOf(final CompositejointType.Builder _other) {
            return copyOf(_other.build());
        }

    }

    public static class PropInfo {

        public final static transient String KIND = "kind";
        public final static transient String SOLIMPFIX = "solimpfix";
        public final static transient String SOLREFFIX = "solreffix";
        public final static transient String GROUP = "group";
        public final static transient String STIFFNESS = "stiffness";
        public final static transient String DAMPING = "damping";
        public final static transient String ARMATURE = "armature";
        public final static transient String LIMITED = "limited";
        public final static transient String RANGE = "range";
        public final static transient String MARGIN = "margin";
        public final static transient String SOLREFLIMIT = "solreflimit";
        public final static transient String SOLIMPLIMIT = "solimplimit";
        public final static transient String FRICTIONLOSS = "frictionloss";
        public final static transient String SOLREFFRICTION = "solreffriction";
        public final static transient String SOLIMPFRICTION = "solimpfriction";

    }

    public static class Select
        extends CompositejointType.Selector<CompositejointType.Select, Void>
    {


        Select() {
            super(null, null, null);
        }

        public static CompositejointType.Select _root() {
            return new CompositejointType.Select();
        }

    }

    public static class Selector<TRoot extends com.kscs.util.jaxb.Selector<TRoot, ?> , TParent >
        extends com.kscs.util.jaxb.Selector<TRoot, TParent>
    {

        private com.kscs.util.jaxb.Selector<TRoot, CompositejointType.Selector<TRoot, TParent>> kind = null;
        private com.kscs.util.jaxb.Selector<TRoot, CompositejointType.Selector<TRoot, TParent>> solimpfix = null;
        private com.kscs.util.jaxb.Selector<TRoot, CompositejointType.Selector<TRoot, TParent>> solreffix = null;
        private com.kscs.util.jaxb.Selector<TRoot, CompositejointType.Selector<TRoot, TParent>> group = null;
        private com.kscs.util.jaxb.Selector<TRoot, CompositejointType.Selector<TRoot, TParent>> stiffness = null;
        private com.kscs.util.jaxb.Selector<TRoot, CompositejointType.Selector<TRoot, TParent>> damping = null;
        private com.kscs.util.jaxb.Selector<TRoot, CompositejointType.Selector<TRoot, TParent>> armature = null;
        private com.kscs.util.jaxb.Selector<TRoot, CompositejointType.Selector<TRoot, TParent>> limited = null;
        private com.kscs.util.jaxb.Selector<TRoot, CompositejointType.Selector<TRoot, TParent>> range = null;
        private com.kscs.util.jaxb.Selector<TRoot, CompositejointType.Selector<TRoot, TParent>> margin = null;
        private com.kscs.util.jaxb.Selector<TRoot, CompositejointType.Selector<TRoot, TParent>> solreflimit = null;
        private com.kscs.util.jaxb.Selector<TRoot, CompositejointType.Selector<TRoot, TParent>> solimplimit = null;
        private com.kscs.util.jaxb.Selector<TRoot, CompositejointType.Selector<TRoot, TParent>> frictionloss = null;
        private com.kscs.util.jaxb.Selector<TRoot, CompositejointType.Selector<TRoot, TParent>> solreffriction = null;
        private com.kscs.util.jaxb.Selector<TRoot, CompositejointType.Selector<TRoot, TParent>> solimpfriction = null;

        public Selector(final TRoot root, final TParent parent, final String propertyName) {
            super(root, parent, propertyName);
        }

        @Override
        public Map<String, PropertyTree> buildChildren() {
            final Map<String, PropertyTree> products = new HashMap<String, PropertyTree>();
            products.putAll(super.buildChildren());
            if (this.kind!= null) {
                products.put("kind", this.kind.init());
            }
            if (this.solimpfix!= null) {
                products.put("solimpfix", this.solimpfix.init());
            }
            if (this.solreffix!= null) {
                products.put("solreffix", this.solreffix.init());
            }
            if (this.group!= null) {
                products.put("group", this.group.init());
            }
            if (this.stiffness!= null) {
                products.put("stiffness", this.stiffness.init());
            }
            if (this.damping!= null) {
                products.put("damping", this.damping.init());
            }
            if (this.armature!= null) {
                products.put("armature", this.armature.init());
            }
            if (this.limited!= null) {
                products.put("limited", this.limited.init());
            }
            if (this.range!= null) {
                products.put("range", this.range.init());
            }
            if (this.margin!= null) {
                products.put("margin", this.margin.init());
            }
            if (this.solreflimit!= null) {
                products.put("solreflimit", this.solreflimit.init());
            }
            if (this.solimplimit!= null) {
                products.put("solimplimit", this.solimplimit.init());
            }
            if (this.frictionloss!= null) {
                products.put("frictionloss", this.frictionloss.init());
            }
            if (this.solreffriction!= null) {
                products.put("solreffriction", this.solreffriction.init());
            }
            if (this.solimpfriction!= null) {
                products.put("solimpfriction", this.solimpfriction.init());
            }
            return products;
        }

        public com.kscs.util.jaxb.Selector<TRoot, CompositejointType.Selector<TRoot, TParent>> kind() {
            return ((this.kind == null)?this.kind = new com.kscs.util.jaxb.Selector<TRoot, CompositejointType.Selector<TRoot, TParent>>(this._root, this, "kind"):this.kind);
        }

        public com.kscs.util.jaxb.Selector<TRoot, CompositejointType.Selector<TRoot, TParent>> solimpfix() {
            return ((this.solimpfix == null)?this.solimpfix = new com.kscs.util.jaxb.Selector<TRoot, CompositejointType.Selector<TRoot, TParent>>(this._root, this, "solimpfix"):this.solimpfix);
        }

        public com.kscs.util.jaxb.Selector<TRoot, CompositejointType.Selector<TRoot, TParent>> solreffix() {
            return ((this.solreffix == null)?this.solreffix = new com.kscs.util.jaxb.Selector<TRoot, CompositejointType.Selector<TRoot, TParent>>(this._root, this, "solreffix"):this.solreffix);
        }

        public com.kscs.util.jaxb.Selector<TRoot, CompositejointType.Selector<TRoot, TParent>> group() {
            return ((this.group == null)?this.group = new com.kscs.util.jaxb.Selector<TRoot, CompositejointType.Selector<TRoot, TParent>>(this._root, this, "group"):this.group);
        }

        public com.kscs.util.jaxb.Selector<TRoot, CompositejointType.Selector<TRoot, TParent>> stiffness() {
            return ((this.stiffness == null)?this.stiffness = new com.kscs.util.jaxb.Selector<TRoot, CompositejointType.Selector<TRoot, TParent>>(this._root, this, "stiffness"):this.stiffness);
        }

        public com.kscs.util.jaxb.Selector<TRoot, CompositejointType.Selector<TRoot, TParent>> damping() {
            return ((this.damping == null)?this.damping = new com.kscs.util.jaxb.Selector<TRoot, CompositejointType.Selector<TRoot, TParent>>(this._root, this, "damping"):this.damping);
        }

        public com.kscs.util.jaxb.Selector<TRoot, CompositejointType.Selector<TRoot, TParent>> armature() {
            return ((this.armature == null)?this.armature = new com.kscs.util.jaxb.Selector<TRoot, CompositejointType.Selector<TRoot, TParent>>(this._root, this, "armature"):this.armature);
        }

        public com.kscs.util.jaxb.Selector<TRoot, CompositejointType.Selector<TRoot, TParent>> limited() {
            return ((this.limited == null)?this.limited = new com.kscs.util.jaxb.Selector<TRoot, CompositejointType.Selector<TRoot, TParent>>(this._root, this, "limited"):this.limited);
        }

        public com.kscs.util.jaxb.Selector<TRoot, CompositejointType.Selector<TRoot, TParent>> range() {
            return ((this.range == null)?this.range = new com.kscs.util.jaxb.Selector<TRoot, CompositejointType.Selector<TRoot, TParent>>(this._root, this, "range"):this.range);
        }

        public com.kscs.util.jaxb.Selector<TRoot, CompositejointType.Selector<TRoot, TParent>> margin() {
            return ((this.margin == null)?this.margin = new com.kscs.util.jaxb.Selector<TRoot, CompositejointType.Selector<TRoot, TParent>>(this._root, this, "margin"):this.margin);
        }

        public com.kscs.util.jaxb.Selector<TRoot, CompositejointType.Selector<TRoot, TParent>> solreflimit() {
            return ((this.solreflimit == null)?this.solreflimit = new com.kscs.util.jaxb.Selector<TRoot, CompositejointType.Selector<TRoot, TParent>>(this._root, this, "solreflimit"):this.solreflimit);
        }

        public com.kscs.util.jaxb.Selector<TRoot, CompositejointType.Selector<TRoot, TParent>> solimplimit() {
            return ((this.solimplimit == null)?this.solimplimit = new com.kscs.util.jaxb.Selector<TRoot, CompositejointType.Selector<TRoot, TParent>>(this._root, this, "solimplimit"):this.solimplimit);
        }

        public com.kscs.util.jaxb.Selector<TRoot, CompositejointType.Selector<TRoot, TParent>> frictionloss() {
            return ((this.frictionloss == null)?this.frictionloss = new com.kscs.util.jaxb.Selector<TRoot, CompositejointType.Selector<TRoot, TParent>>(this._root, this, "frictionloss"):this.frictionloss);
        }

        public com.kscs.util.jaxb.Selector<TRoot, CompositejointType.Selector<TRoot, TParent>> solreffriction() {
            return ((this.solreffriction == null)?this.solreffriction = new com.kscs.util.jaxb.Selector<TRoot, CompositejointType.Selector<TRoot, TParent>>(this._root, this, "solreffriction"):this.solreffriction);
        }

        public com.kscs.util.jaxb.Selector<TRoot, CompositejointType.Selector<TRoot, TParent>> solimpfriction() {
            return ((this.solimpfriction == null)?this.solimpfriction = new com.kscs.util.jaxb.Selector<TRoot, CompositejointType.Selector<TRoot, TParent>>(this._root, this, "solimpfriction"):this.solimpfriction);
        }

    }

}
