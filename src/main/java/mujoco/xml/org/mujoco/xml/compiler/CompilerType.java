//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.3.0 
// See <a href="https://javaee.github.io/jaxb-v2/">https://javaee.github.io/jaxb-v2/</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2024.03.13 at 04:24:41 PM EDT 
//


package org.mujoco.xml.compiler;

import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeSupport;
import java.beans.PropertyVetoException;
import java.beans.VetoableChangeListener;
import java.beans.VetoableChangeSupport;
import java.math.BigDecimal;
import java.util.HashMap;
import java.util.Map;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.bind.annotation.XmlType;
import com.kscs.util.jaxb.Buildable;
import com.kscs.util.jaxb.Copyable;
import com.kscs.util.jaxb.PartialCopyable;
import com.kscs.util.jaxb.PropertyTree;
import com.kscs.util.jaxb.PropertyTreeUse;
import com.kscs.util.jaxb.PropertyVisitor;
import org.mujoco.xml.attributetypes.AngleType;
import org.mujoco.xml.attributetypes.CoordinateType;
import org.mujoco.xml.attributetypes.InertiafromgeomType;


/**
 * <p>Java class for compilerType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="compilerType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;attribute name="boundmass" type="{http://www.w3.org/2001/XMLSchema}decimal" default="0" /&gt;
 *       &lt;attribute name="boudinertia" type="{http://www.w3.org/2001/XMLSchema}decimal" default="0" /&gt;
 *       &lt;attribute name="settotalmass" type="{http://www.w3.org/2001/XMLSchema}decimal" default="-1" /&gt;
 *       &lt;attribute name="balanceinertia" type="{http://www.w3.org/2001/XMLSchema}boolean" default="false" /&gt;
 *       &lt;attribute name="strippath" type="{http://www.w3.org/2001/XMLSchema}boolean" default="false" /&gt;
 *       &lt;attribute name="coordinate" type="{attributeTypes}coordinateType" default="local" /&gt;
 *       &lt;attribute name="angle" type="{attributeTypes}angleType" default="degree" /&gt;
 *       &lt;attribute name="fitaabb" type="{http://www.w3.org/2001/XMLSchema}boolean" default="false" /&gt;
 *       &lt;attribute name="eulerseq" type="{attributeTypes}eulerseqType" default="xyz" /&gt;
 *       &lt;attribute name="meshdir" type="{http://www.w3.org/2001/XMLSchema}string" /&gt;
 *       &lt;attribute name="texturedir" type="{http://www.w3.org/2001/XMLSchema}string" /&gt;
 *       &lt;attribute name="discardvisual" type="{http://www.w3.org/2001/XMLSchema}boolean" default="false" /&gt;
 *       &lt;attribute name="convexhull" type="{http://www.w3.org/2001/XMLSchema}boolean" default="true" /&gt;
 *       &lt;attribute name="userthread" type="{http://www.w3.org/2001/XMLSchema}boolean" default="true" /&gt;
 *       &lt;attribute name="fusestatic" type="{http://www.w3.org/2001/XMLSchema}boolean" default="false" /&gt;
 *       &lt;attribute name="inertiafromgeom" type="{attributeTypes}inertiafromgeomType" default="auto" /&gt;
 *       &lt;attribute name="inertiagrouprange" type="{attributeTypes}twoIntsType" default="0 5" /&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "compilerType")
@XmlSeeAlso({
    org.mujoco.xml.Mujoco.Compiler.class
})
public class CompilerType implements Cloneable, Copyable, PartialCopyable
{

    @XmlAttribute(name = "boundmass")
    protected BigDecimal boundmass;
    @XmlAttribute(name = "boudinertia")
    protected BigDecimal boudinertia;
    @XmlAttribute(name = "settotalmass")
    protected BigDecimal settotalmass;
    @XmlAttribute(name = "balanceinertia")
    protected Boolean balanceinertia;
    @XmlAttribute(name = "strippath")
    protected Boolean strippath;
    @XmlAttribute(name = "coordinate")
    protected CoordinateType coordinate;
    @XmlAttribute(name = "angle")
    protected AngleType angle;
    @XmlAttribute(name = "fitaabb")
    protected Boolean fitaabb;
    @XmlAttribute(name = "eulerseq")
    protected String eulerseq;
    @XmlAttribute(name = "meshdir")
    protected String meshdir;
    @XmlAttribute(name = "texturedir")
    protected String texturedir;
    @XmlAttribute(name = "discardvisual")
    protected Boolean discardvisual;
    @XmlAttribute(name = "convexhull")
    protected Boolean convexhull;
    @XmlAttribute(name = "userthread")
    protected Boolean userthread;
    @XmlAttribute(name = "fusestatic")
    protected Boolean fusestatic;
    @XmlAttribute(name = "inertiafromgeom")
    protected InertiafromgeomType inertiafromgeom;
    @XmlAttribute(name = "inertiagrouprange")
    protected String inertiagrouprange;
    protected final transient VetoableChangeSupport vetoableChange__Support = new VetoableChangeSupport(this);
    protected final transient PropertyChangeSupport propertyChange__Support = new PropertyChangeSupport(this);

    /**
     * Generated by copy-constructor plugin, JAXB requires public no-arg constructor.
     * 
     */
    public CompilerType() {
        // Generated by copy-constructor plugin, JAXB requires public no-arg constructor.
    }

    /**
     * Instantiates a CompilerType copying the state of another CompilerType
     * 
     * @param _other
     *     The original CompilerType from which to copy state.
     */
    public CompilerType(final CompilerType _other) {
        this.boundmass = _other.boundmass;
        this.boudinertia = _other.boudinertia;
        this.settotalmass = _other.settotalmass;
        this.balanceinertia = _other.balanceinertia;
        this.strippath = _other.strippath;
        this.coordinate = _other.coordinate;
        this.angle = _other.angle;
        this.fitaabb = _other.fitaabb;
        this.eulerseq = _other.eulerseq;
        this.meshdir = _other.meshdir;
        this.texturedir = _other.texturedir;
        this.discardvisual = _other.discardvisual;
        this.convexhull = _other.convexhull;
        this.userthread = _other.userthread;
        this.fusestatic = _other.fusestatic;
        this.inertiafromgeom = _other.inertiafromgeom;
        this.inertiagrouprange = _other.inertiagrouprange;
    }

    /**
     * Instantiates a CompilerType copying the state of another CompilerType
     * 
     * @param _propertyTreeUse
     *     Meaning of the {@link PropertyPath}: Exclude or include members contained in property path.
     * @param _propertyTree
     *     A restricting {@link PropertyPath} that defines which nodes of the source object tree should actually be copied.
     * @param _other
     *     The original CompilerType from which to copy state.
     */
    public CompilerType(final CompilerType _other, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        final PropertyTree boundmassPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("boundmass"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(boundmassPropertyTree!= null):((boundmassPropertyTree == null)||(!boundmassPropertyTree.isLeaf())))) {
            this.boundmass = _other.boundmass;
        }
        final PropertyTree boudinertiaPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("boudinertia"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(boudinertiaPropertyTree!= null):((boudinertiaPropertyTree == null)||(!boudinertiaPropertyTree.isLeaf())))) {
            this.boudinertia = _other.boudinertia;
        }
        final PropertyTree settotalmassPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("settotalmass"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(settotalmassPropertyTree!= null):((settotalmassPropertyTree == null)||(!settotalmassPropertyTree.isLeaf())))) {
            this.settotalmass = _other.settotalmass;
        }
        final PropertyTree balanceinertiaPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("balanceinertia"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(balanceinertiaPropertyTree!= null):((balanceinertiaPropertyTree == null)||(!balanceinertiaPropertyTree.isLeaf())))) {
            this.balanceinertia = _other.balanceinertia;
        }
        final PropertyTree strippathPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("strippath"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(strippathPropertyTree!= null):((strippathPropertyTree == null)||(!strippathPropertyTree.isLeaf())))) {
            this.strippath = _other.strippath;
        }
        final PropertyTree coordinatePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("coordinate"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(coordinatePropertyTree!= null):((coordinatePropertyTree == null)||(!coordinatePropertyTree.isLeaf())))) {
            this.coordinate = _other.coordinate;
        }
        final PropertyTree anglePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("angle"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(anglePropertyTree!= null):((anglePropertyTree == null)||(!anglePropertyTree.isLeaf())))) {
            this.angle = _other.angle;
        }
        final PropertyTree fitaabbPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("fitaabb"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(fitaabbPropertyTree!= null):((fitaabbPropertyTree == null)||(!fitaabbPropertyTree.isLeaf())))) {
            this.fitaabb = _other.fitaabb;
        }
        final PropertyTree eulerseqPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("eulerseq"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(eulerseqPropertyTree!= null):((eulerseqPropertyTree == null)||(!eulerseqPropertyTree.isLeaf())))) {
            this.eulerseq = _other.eulerseq;
        }
        final PropertyTree meshdirPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("meshdir"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(meshdirPropertyTree!= null):((meshdirPropertyTree == null)||(!meshdirPropertyTree.isLeaf())))) {
            this.meshdir = _other.meshdir;
        }
        final PropertyTree texturedirPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("texturedir"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(texturedirPropertyTree!= null):((texturedirPropertyTree == null)||(!texturedirPropertyTree.isLeaf())))) {
            this.texturedir = _other.texturedir;
        }
        final PropertyTree discardvisualPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("discardvisual"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(discardvisualPropertyTree!= null):((discardvisualPropertyTree == null)||(!discardvisualPropertyTree.isLeaf())))) {
            this.discardvisual = _other.discardvisual;
        }
        final PropertyTree convexhullPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("convexhull"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(convexhullPropertyTree!= null):((convexhullPropertyTree == null)||(!convexhullPropertyTree.isLeaf())))) {
            this.convexhull = _other.convexhull;
        }
        final PropertyTree userthreadPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("userthread"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(userthreadPropertyTree!= null):((userthreadPropertyTree == null)||(!userthreadPropertyTree.isLeaf())))) {
            this.userthread = _other.userthread;
        }
        final PropertyTree fusestaticPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("fusestatic"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(fusestaticPropertyTree!= null):((fusestaticPropertyTree == null)||(!fusestaticPropertyTree.isLeaf())))) {
            this.fusestatic = _other.fusestatic;
        }
        final PropertyTree inertiafromgeomPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("inertiafromgeom"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(inertiafromgeomPropertyTree!= null):((inertiafromgeomPropertyTree == null)||(!inertiafromgeomPropertyTree.isLeaf())))) {
            this.inertiafromgeom = _other.inertiafromgeom;
        }
        final PropertyTree inertiagrouprangePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("inertiagrouprange"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(inertiagrouprangePropertyTree!= null):((inertiagrouprangePropertyTree == null)||(!inertiagrouprangePropertyTree.isLeaf())))) {
            this.inertiagrouprange = _other.inertiagrouprange;
        }
    }

    /**
     * Gets the value of the boundmass property.
     * 
     * @return
     *     possible object is
     *     {@link BigDecimal }
     *     
     */
    public BigDecimal getBoundmass() {
        if (boundmass == null) {
            return new BigDecimal("0");
        } else {
            return boundmass;
        }
    }

    /**
     * Gets the value of the boudinertia property.
     * 
     * @return
     *     possible object is
     *     {@link BigDecimal }
     *     
     */
    public BigDecimal getBoudinertia() {
        if (boudinertia == null) {
            return new BigDecimal("0");
        } else {
            return boudinertia;
        }
    }

    /**
     * Gets the value of the settotalmass property.
     * 
     * @return
     *     possible object is
     *     {@link BigDecimal }
     *     
     */
    public BigDecimal getSettotalmass() {
        if (settotalmass == null) {
            return new BigDecimal("-1");
        } else {
            return settotalmass;
        }
    }

    /**
     * Gets the value of the balanceinertia property.
     * 
     * @return
     *     possible object is
     *     {@link Boolean }
     *     
     */
    public boolean isBalanceinertia() {
        if (balanceinertia == null) {
            return false;
        } else {
            return balanceinertia;
        }
    }

    /**
     * Gets the value of the strippath property.
     * 
     * @return
     *     possible object is
     *     {@link Boolean }
     *     
     */
    public boolean isStrippath() {
        if (strippath == null) {
            return false;
        } else {
            return strippath;
        }
    }

    /**
     * Gets the value of the coordinate property.
     * 
     * @return
     *     possible object is
     *     {@link CoordinateType }
     *     
     */
    public CoordinateType getCoordinate() {
        if (coordinate == null) {
            return CoordinateType.LOCAL;
        } else {
            return coordinate;
        }
    }

    /**
     * Gets the value of the angle property.
     * 
     * @return
     *     possible object is
     *     {@link AngleType }
     *     
     */
    public AngleType getAngle() {
        if (angle == null) {
            return AngleType.DEGREE;
        } else {
            return angle;
        }
    }

    /**
     * Gets the value of the fitaabb property.
     * 
     * @return
     *     possible object is
     *     {@link Boolean }
     *     
     */
    public boolean isFitaabb() {
        if (fitaabb == null) {
            return false;
        } else {
            return fitaabb;
        }
    }

    /**
     * Gets the value of the eulerseq property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getEulerseq() {
        if (eulerseq == null) {
            return "xyz";
        } else {
            return eulerseq;
        }
    }

    /**
     * Gets the value of the meshdir property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getMeshdir() {
        return meshdir;
    }

    /**
     * Gets the value of the texturedir property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getTexturedir() {
        return texturedir;
    }

    /**
     * Gets the value of the discardvisual property.
     * 
     * @return
     *     possible object is
     *     {@link Boolean }
     *     
     */
    public boolean isDiscardvisual() {
        if (discardvisual == null) {
            return false;
        } else {
            return discardvisual;
        }
    }

    /**
     * Gets the value of the convexhull property.
     * 
     * @return
     *     possible object is
     *     {@link Boolean }
     *     
     */
    public boolean isConvexhull() {
        if (convexhull == null) {
            return true;
        } else {
            return convexhull;
        }
    }

    /**
     * Gets the value of the userthread property.
     * 
     * @return
     *     possible object is
     *     {@link Boolean }
     *     
     */
    public boolean isUserthread() {
        if (userthread == null) {
            return true;
        } else {
            return userthread;
        }
    }

    /**
     * Gets the value of the fusestatic property.
     * 
     * @return
     *     possible object is
     *     {@link Boolean }
     *     
     */
    public boolean isFusestatic() {
        if (fusestatic == null) {
            return false;
        } else {
            return fusestatic;
        }
    }

    /**
     * Gets the value of the inertiafromgeom property.
     * 
     * @return
     *     possible object is
     *     {@link InertiafromgeomType }
     *     
     */
    public InertiafromgeomType getInertiafromgeom() {
        if (inertiafromgeom == null) {
            return InertiafromgeomType.AUTO;
        } else {
            return inertiafromgeom;
        }
    }

    /**
     * Gets the value of the inertiagrouprange property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getInertiagrouprange() {
        if (inertiagrouprange == null) {
            return "0 5";
        } else {
            return inertiagrouprange;
        }
    }

    public void addVetoableChangeListener(final VetoableChangeListener vetoableChangeListener) {
        this.vetoableChange__Support.addVetoableChangeListener(vetoableChangeListener);
    }

    public void removeVetoableChangeListener(final VetoableChangeListener vetoableChangeListener) {
        this.vetoableChange__Support.removeVetoableChangeListener(vetoableChangeListener);
    }

    public CompilerType withVetoableChangeListener(final VetoableChangeListener vetoableChangeListener) {
        addVetoableChangeListener(vetoableChangeListener);
        return this;
    }

    public void addPropertyChangeListener(final PropertyChangeListener propertyChangeListener) {
        this.propertyChange__Support.addPropertyChangeListener(propertyChangeListener);
    }

    public void removePropertyChangeListener(final PropertyChangeListener propertyChangeListener) {
        this.propertyChange__Support.removePropertyChangeListener(propertyChangeListener);
    }

    public CompilerType withPropertyChangeListener(final PropertyChangeListener propertyChangeListener) {
        addPropertyChangeListener(propertyChangeListener);
        return this;
    }

    public void setBoundmass(final BigDecimal value) {
        final BigDecimal __oldValue = this.boundmass;
        try {
            this.vetoableChange__Support.fireVetoableChange("boundmass", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.boundmass = value;
        this.propertyChange__Support.firePropertyChange("boundmass", __oldValue, value);
    }

    public void setBoudinertia(final BigDecimal value) {
        final BigDecimal __oldValue = this.boudinertia;
        try {
            this.vetoableChange__Support.fireVetoableChange("boudinertia", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.boudinertia = value;
        this.propertyChange__Support.firePropertyChange("boudinertia", __oldValue, value);
    }

    public void setSettotalmass(final BigDecimal value) {
        final BigDecimal __oldValue = this.settotalmass;
        try {
            this.vetoableChange__Support.fireVetoableChange("settotalmass", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.settotalmass = value;
        this.propertyChange__Support.firePropertyChange("settotalmass", __oldValue, value);
    }

    public void setBalanceinertia(final Boolean value) {
        final Boolean __oldValue = this.balanceinertia;
        try {
            this.vetoableChange__Support.fireVetoableChange("balanceinertia", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.balanceinertia = value;
        this.propertyChange__Support.firePropertyChange("balanceinertia", __oldValue, value);
    }

    public void setStrippath(final Boolean value) {
        final Boolean __oldValue = this.strippath;
        try {
            this.vetoableChange__Support.fireVetoableChange("strippath", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.strippath = value;
        this.propertyChange__Support.firePropertyChange("strippath", __oldValue, value);
    }

    public void setCoordinate(final CoordinateType value) {
        final CoordinateType __oldValue = this.coordinate;
        try {
            this.vetoableChange__Support.fireVetoableChange("coordinate", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.coordinate = value;
        this.propertyChange__Support.firePropertyChange("coordinate", __oldValue, value);
    }

    public void setAngle(final AngleType value) {
        final AngleType __oldValue = this.angle;
        try {
            this.vetoableChange__Support.fireVetoableChange("angle", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.angle = value;
        this.propertyChange__Support.firePropertyChange("angle", __oldValue, value);
    }

    public void setFitaabb(final Boolean value) {
        final Boolean __oldValue = this.fitaabb;
        try {
            this.vetoableChange__Support.fireVetoableChange("fitaabb", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.fitaabb = value;
        this.propertyChange__Support.firePropertyChange("fitaabb", __oldValue, value);
    }

    public void setEulerseq(final String value) {
        final String __oldValue = this.eulerseq;
        try {
            this.vetoableChange__Support.fireVetoableChange("eulerseq", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.eulerseq = value;
        this.propertyChange__Support.firePropertyChange("eulerseq", __oldValue, value);
    }

    public void setMeshdir(final String value) {
        final String __oldValue = this.meshdir;
        try {
            this.vetoableChange__Support.fireVetoableChange("meshdir", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.meshdir = value;
        this.propertyChange__Support.firePropertyChange("meshdir", __oldValue, value);
    }

    public void setTexturedir(final String value) {
        final String __oldValue = this.texturedir;
        try {
            this.vetoableChange__Support.fireVetoableChange("texturedir", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.texturedir = value;
        this.propertyChange__Support.firePropertyChange("texturedir", __oldValue, value);
    }

    public void setDiscardvisual(final Boolean value) {
        final Boolean __oldValue = this.discardvisual;
        try {
            this.vetoableChange__Support.fireVetoableChange("discardvisual", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.discardvisual = value;
        this.propertyChange__Support.firePropertyChange("discardvisual", __oldValue, value);
    }

    public void setConvexhull(final Boolean value) {
        final Boolean __oldValue = this.convexhull;
        try {
            this.vetoableChange__Support.fireVetoableChange("convexhull", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.convexhull = value;
        this.propertyChange__Support.firePropertyChange("convexhull", __oldValue, value);
    }

    public void setUserthread(final Boolean value) {
        final Boolean __oldValue = this.userthread;
        try {
            this.vetoableChange__Support.fireVetoableChange("userthread", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.userthread = value;
        this.propertyChange__Support.firePropertyChange("userthread", __oldValue, value);
    }

    public void setFusestatic(final Boolean value) {
        final Boolean __oldValue = this.fusestatic;
        try {
            this.vetoableChange__Support.fireVetoableChange("fusestatic", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.fusestatic = value;
        this.propertyChange__Support.firePropertyChange("fusestatic", __oldValue, value);
    }

    public void setInertiafromgeom(final InertiafromgeomType value) {
        final InertiafromgeomType __oldValue = this.inertiafromgeom;
        try {
            this.vetoableChange__Support.fireVetoableChange("inertiafromgeom", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.inertiafromgeom = value;
        this.propertyChange__Support.firePropertyChange("inertiafromgeom", __oldValue, value);
    }

    public void setInertiagrouprange(final String value) {
        final String __oldValue = this.inertiagrouprange;
        try {
            this.vetoableChange__Support.fireVetoableChange("inertiagrouprange", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.inertiagrouprange = value;
        this.propertyChange__Support.firePropertyChange("inertiagrouprange", __oldValue, value);
    }

    @Override
    public CompilerType clone() {
        final CompilerType _newObject;
        try {
            _newObject = ((CompilerType) super.clone());
        } catch (CloneNotSupportedException e) {
            throw new RuntimeException(e);
        }
        return _newObject;
    }

    @Override
    public CompilerType createCopy() {
        final CompilerType _newObject;
        try {
            _newObject = ((CompilerType) super.clone());
        } catch (CloneNotSupportedException e) {
            throw new RuntimeException(e);
        }
        _newObject.boundmass = this.boundmass;
        _newObject.boudinertia = this.boudinertia;
        _newObject.settotalmass = this.settotalmass;
        _newObject.balanceinertia = this.balanceinertia;
        _newObject.strippath = this.strippath;
        _newObject.coordinate = this.coordinate;
        _newObject.angle = this.angle;
        _newObject.fitaabb = this.fitaabb;
        _newObject.eulerseq = this.eulerseq;
        _newObject.meshdir = this.meshdir;
        _newObject.texturedir = this.texturedir;
        _newObject.discardvisual = this.discardvisual;
        _newObject.convexhull = this.convexhull;
        _newObject.userthread = this.userthread;
        _newObject.fusestatic = this.fusestatic;
        _newObject.inertiafromgeom = this.inertiafromgeom;
        _newObject.inertiagrouprange = this.inertiagrouprange;
        return _newObject;
    }

    @Override
    public CompilerType createCopy(final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        final CompilerType _newObject;
        try {
            _newObject = ((CompilerType) super.clone());
        } catch (CloneNotSupportedException e) {
            throw new RuntimeException(e);
        }
        final PropertyTree boundmassPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("boundmass"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(boundmassPropertyTree!= null):((boundmassPropertyTree == null)||(!boundmassPropertyTree.isLeaf())))) {
            _newObject.boundmass = this.boundmass;
        }
        final PropertyTree boudinertiaPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("boudinertia"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(boudinertiaPropertyTree!= null):((boudinertiaPropertyTree == null)||(!boudinertiaPropertyTree.isLeaf())))) {
            _newObject.boudinertia = this.boudinertia;
        }
        final PropertyTree settotalmassPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("settotalmass"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(settotalmassPropertyTree!= null):((settotalmassPropertyTree == null)||(!settotalmassPropertyTree.isLeaf())))) {
            _newObject.settotalmass = this.settotalmass;
        }
        final PropertyTree balanceinertiaPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("balanceinertia"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(balanceinertiaPropertyTree!= null):((balanceinertiaPropertyTree == null)||(!balanceinertiaPropertyTree.isLeaf())))) {
            _newObject.balanceinertia = this.balanceinertia;
        }
        final PropertyTree strippathPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("strippath"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(strippathPropertyTree!= null):((strippathPropertyTree == null)||(!strippathPropertyTree.isLeaf())))) {
            _newObject.strippath = this.strippath;
        }
        final PropertyTree coordinatePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("coordinate"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(coordinatePropertyTree!= null):((coordinatePropertyTree == null)||(!coordinatePropertyTree.isLeaf())))) {
            _newObject.coordinate = this.coordinate;
        }
        final PropertyTree anglePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("angle"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(anglePropertyTree!= null):((anglePropertyTree == null)||(!anglePropertyTree.isLeaf())))) {
            _newObject.angle = this.angle;
        }
        final PropertyTree fitaabbPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("fitaabb"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(fitaabbPropertyTree!= null):((fitaabbPropertyTree == null)||(!fitaabbPropertyTree.isLeaf())))) {
            _newObject.fitaabb = this.fitaabb;
        }
        final PropertyTree eulerseqPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("eulerseq"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(eulerseqPropertyTree!= null):((eulerseqPropertyTree == null)||(!eulerseqPropertyTree.isLeaf())))) {
            _newObject.eulerseq = this.eulerseq;
        }
        final PropertyTree meshdirPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("meshdir"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(meshdirPropertyTree!= null):((meshdirPropertyTree == null)||(!meshdirPropertyTree.isLeaf())))) {
            _newObject.meshdir = this.meshdir;
        }
        final PropertyTree texturedirPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("texturedir"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(texturedirPropertyTree!= null):((texturedirPropertyTree == null)||(!texturedirPropertyTree.isLeaf())))) {
            _newObject.texturedir = this.texturedir;
        }
        final PropertyTree discardvisualPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("discardvisual"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(discardvisualPropertyTree!= null):((discardvisualPropertyTree == null)||(!discardvisualPropertyTree.isLeaf())))) {
            _newObject.discardvisual = this.discardvisual;
        }
        final PropertyTree convexhullPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("convexhull"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(convexhullPropertyTree!= null):((convexhullPropertyTree == null)||(!convexhullPropertyTree.isLeaf())))) {
            _newObject.convexhull = this.convexhull;
        }
        final PropertyTree userthreadPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("userthread"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(userthreadPropertyTree!= null):((userthreadPropertyTree == null)||(!userthreadPropertyTree.isLeaf())))) {
            _newObject.userthread = this.userthread;
        }
        final PropertyTree fusestaticPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("fusestatic"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(fusestaticPropertyTree!= null):((fusestaticPropertyTree == null)||(!fusestaticPropertyTree.isLeaf())))) {
            _newObject.fusestatic = this.fusestatic;
        }
        final PropertyTree inertiafromgeomPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("inertiafromgeom"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(inertiafromgeomPropertyTree!= null):((inertiafromgeomPropertyTree == null)||(!inertiafromgeomPropertyTree.isLeaf())))) {
            _newObject.inertiafromgeom = this.inertiafromgeom;
        }
        final PropertyTree inertiagrouprangePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("inertiagrouprange"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(inertiagrouprangePropertyTree!= null):((inertiagrouprangePropertyTree == null)||(!inertiagrouprangePropertyTree.isLeaf())))) {
            _newObject.inertiagrouprange = this.inertiagrouprange;
        }
        return _newObject;
    }

    @Override
    public CompilerType copyExcept(final PropertyTree _propertyTree) {
        return createCopy(_propertyTree, PropertyTreeUse.EXCLUDE);
    }

    @Override
    public CompilerType copyOnly(final PropertyTree _propertyTree) {
        return createCopy(_propertyTree, PropertyTreeUse.INCLUDE);
    }

    /**
     * Copies all state of this object to a builder. This method is used by the {@link #copyOf} method and should not be called directly by client code.
     * 
     * @param _other
     *     A builder instance to which the state of this object will be copied.
     */
    public<_B >void copyTo(final CompilerType.Builder<_B> _other) {
        _other.boundmass = this.boundmass;
        _other.boudinertia = this.boudinertia;
        _other.settotalmass = this.settotalmass;
        _other.balanceinertia = this.balanceinertia;
        _other.strippath = this.strippath;
        _other.coordinate = this.coordinate;
        _other.angle = this.angle;
        _other.fitaabb = this.fitaabb;
        _other.eulerseq = this.eulerseq;
        _other.meshdir = this.meshdir;
        _other.texturedir = this.texturedir;
        _other.discardvisual = this.discardvisual;
        _other.convexhull = this.convexhull;
        _other.userthread = this.userthread;
        _other.fusestatic = this.fusestatic;
        _other.inertiafromgeom = this.inertiafromgeom;
        _other.inertiagrouprange = this.inertiagrouprange;
    }

    public<_B >CompilerType.Builder<_B> newCopyBuilder(final _B _parentBuilder) {
        return new CompilerType.Builder<_B>(_parentBuilder, this, true);
    }

    public CompilerType.Builder<Void> newCopyBuilder() {
        return newCopyBuilder(null);
    }

    public static CompilerType.Builder<Void> builder() {
        return new CompilerType.Builder<Void>(null, null, false);
    }

    public static<_B >CompilerType.Builder<_B> copyOf(final CompilerType _other) {
        final CompilerType.Builder<_B> _newBuilder = new CompilerType.Builder<_B>(null, null, false);
        _other.copyTo(_newBuilder);
        return _newBuilder;
    }

    /**
     * Copies all state of this object to a builder. This method is used by the {@link #copyOf} method and should not be called directly by client code.
     * 
     * @param _other
     *     A builder instance to which the state of this object will be copied.
     */
    public<_B >void copyTo(final CompilerType.Builder<_B> _other, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        final PropertyTree boundmassPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("boundmass"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(boundmassPropertyTree!= null):((boundmassPropertyTree == null)||(!boundmassPropertyTree.isLeaf())))) {
            _other.boundmass = this.boundmass;
        }
        final PropertyTree boudinertiaPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("boudinertia"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(boudinertiaPropertyTree!= null):((boudinertiaPropertyTree == null)||(!boudinertiaPropertyTree.isLeaf())))) {
            _other.boudinertia = this.boudinertia;
        }
        final PropertyTree settotalmassPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("settotalmass"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(settotalmassPropertyTree!= null):((settotalmassPropertyTree == null)||(!settotalmassPropertyTree.isLeaf())))) {
            _other.settotalmass = this.settotalmass;
        }
        final PropertyTree balanceinertiaPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("balanceinertia"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(balanceinertiaPropertyTree!= null):((balanceinertiaPropertyTree == null)||(!balanceinertiaPropertyTree.isLeaf())))) {
            _other.balanceinertia = this.balanceinertia;
        }
        final PropertyTree strippathPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("strippath"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(strippathPropertyTree!= null):((strippathPropertyTree == null)||(!strippathPropertyTree.isLeaf())))) {
            _other.strippath = this.strippath;
        }
        final PropertyTree coordinatePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("coordinate"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(coordinatePropertyTree!= null):((coordinatePropertyTree == null)||(!coordinatePropertyTree.isLeaf())))) {
            _other.coordinate = this.coordinate;
        }
        final PropertyTree anglePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("angle"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(anglePropertyTree!= null):((anglePropertyTree == null)||(!anglePropertyTree.isLeaf())))) {
            _other.angle = this.angle;
        }
        final PropertyTree fitaabbPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("fitaabb"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(fitaabbPropertyTree!= null):((fitaabbPropertyTree == null)||(!fitaabbPropertyTree.isLeaf())))) {
            _other.fitaabb = this.fitaabb;
        }
        final PropertyTree eulerseqPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("eulerseq"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(eulerseqPropertyTree!= null):((eulerseqPropertyTree == null)||(!eulerseqPropertyTree.isLeaf())))) {
            _other.eulerseq = this.eulerseq;
        }
        final PropertyTree meshdirPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("meshdir"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(meshdirPropertyTree!= null):((meshdirPropertyTree == null)||(!meshdirPropertyTree.isLeaf())))) {
            _other.meshdir = this.meshdir;
        }
        final PropertyTree texturedirPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("texturedir"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(texturedirPropertyTree!= null):((texturedirPropertyTree == null)||(!texturedirPropertyTree.isLeaf())))) {
            _other.texturedir = this.texturedir;
        }
        final PropertyTree discardvisualPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("discardvisual"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(discardvisualPropertyTree!= null):((discardvisualPropertyTree == null)||(!discardvisualPropertyTree.isLeaf())))) {
            _other.discardvisual = this.discardvisual;
        }
        final PropertyTree convexhullPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("convexhull"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(convexhullPropertyTree!= null):((convexhullPropertyTree == null)||(!convexhullPropertyTree.isLeaf())))) {
            _other.convexhull = this.convexhull;
        }
        final PropertyTree userthreadPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("userthread"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(userthreadPropertyTree!= null):((userthreadPropertyTree == null)||(!userthreadPropertyTree.isLeaf())))) {
            _other.userthread = this.userthread;
        }
        final PropertyTree fusestaticPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("fusestatic"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(fusestaticPropertyTree!= null):((fusestaticPropertyTree == null)||(!fusestaticPropertyTree.isLeaf())))) {
            _other.fusestatic = this.fusestatic;
        }
        final PropertyTree inertiafromgeomPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("inertiafromgeom"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(inertiafromgeomPropertyTree!= null):((inertiafromgeomPropertyTree == null)||(!inertiafromgeomPropertyTree.isLeaf())))) {
            _other.inertiafromgeom = this.inertiafromgeom;
        }
        final PropertyTree inertiagrouprangePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("inertiagrouprange"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(inertiagrouprangePropertyTree!= null):((inertiagrouprangePropertyTree == null)||(!inertiagrouprangePropertyTree.isLeaf())))) {
            _other.inertiagrouprange = this.inertiagrouprange;
        }
    }

    public<_B >CompilerType.Builder<_B> newCopyBuilder(final _B _parentBuilder, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        return new CompilerType.Builder<_B>(_parentBuilder, this, true, _propertyTree, _propertyTreeUse);
    }

    public CompilerType.Builder<Void> newCopyBuilder(final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        return newCopyBuilder(null, _propertyTree, _propertyTreeUse);
    }

    public static<_B >CompilerType.Builder<_B> copyOf(final CompilerType _other, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        final CompilerType.Builder<_B> _newBuilder = new CompilerType.Builder<_B>(null, null, false);
        _other.copyTo(_newBuilder, _propertyTree, _propertyTreeUse);
        return _newBuilder;
    }

    public static CompilerType.Builder<Void> copyExcept(final CompilerType _other, final PropertyTree _propertyTree) {
        return copyOf(_other, _propertyTree, PropertyTreeUse.EXCLUDE);
    }

    public static CompilerType.Builder<Void> copyOnly(final CompilerType _other, final PropertyTree _propertyTree) {
        return copyOf(_other, _propertyTree, PropertyTreeUse.INCLUDE);
    }

    public CompilerType visit(final PropertyVisitor _visitor_) {
        _visitor_.visit(this);
        return this;
    }

    public static class Builder<_B >implements Buildable
    {

        protected final _B _parentBuilder;
        private BigDecimal boundmass;
        private BigDecimal boudinertia;
        private BigDecimal settotalmass;
        private Boolean balanceinertia;
        private Boolean strippath;
        private CoordinateType coordinate;
        private AngleType angle;
        private Boolean fitaabb;
        private String eulerseq;
        private String meshdir;
        private String texturedir;
        private Boolean discardvisual;
        private Boolean convexhull;
        private Boolean userthread;
        private Boolean fusestatic;
        private InertiafromgeomType inertiafromgeom;
        private String inertiagrouprange;

        public Builder(final _B _parentBuilder, final CompilerType _other, final boolean _copy) {
            this._parentBuilder = _parentBuilder;
            if (_other!= null) {
                this.boundmass = _other.boundmass;
                this.boudinertia = _other.boudinertia;
                this.settotalmass = _other.settotalmass;
                this.balanceinertia = _other.balanceinertia;
                this.strippath = _other.strippath;
                this.coordinate = _other.coordinate;
                this.angle = _other.angle;
                this.fitaabb = _other.fitaabb;
                this.eulerseq = _other.eulerseq;
                this.meshdir = _other.meshdir;
                this.texturedir = _other.texturedir;
                this.discardvisual = _other.discardvisual;
                this.convexhull = _other.convexhull;
                this.userthread = _other.userthread;
                this.fusestatic = _other.fusestatic;
                this.inertiafromgeom = _other.inertiafromgeom;
                this.inertiagrouprange = _other.inertiagrouprange;
            }
        }

        public Builder(final _B _parentBuilder, final CompilerType _other, final boolean _copy, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
            this._parentBuilder = _parentBuilder;
            if (_other!= null) {
                final PropertyTree boundmassPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("boundmass"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(boundmassPropertyTree!= null):((boundmassPropertyTree == null)||(!boundmassPropertyTree.isLeaf())))) {
                    this.boundmass = _other.boundmass;
                }
                final PropertyTree boudinertiaPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("boudinertia"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(boudinertiaPropertyTree!= null):((boudinertiaPropertyTree == null)||(!boudinertiaPropertyTree.isLeaf())))) {
                    this.boudinertia = _other.boudinertia;
                }
                final PropertyTree settotalmassPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("settotalmass"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(settotalmassPropertyTree!= null):((settotalmassPropertyTree == null)||(!settotalmassPropertyTree.isLeaf())))) {
                    this.settotalmass = _other.settotalmass;
                }
                final PropertyTree balanceinertiaPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("balanceinertia"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(balanceinertiaPropertyTree!= null):((balanceinertiaPropertyTree == null)||(!balanceinertiaPropertyTree.isLeaf())))) {
                    this.balanceinertia = _other.balanceinertia;
                }
                final PropertyTree strippathPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("strippath"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(strippathPropertyTree!= null):((strippathPropertyTree == null)||(!strippathPropertyTree.isLeaf())))) {
                    this.strippath = _other.strippath;
                }
                final PropertyTree coordinatePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("coordinate"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(coordinatePropertyTree!= null):((coordinatePropertyTree == null)||(!coordinatePropertyTree.isLeaf())))) {
                    this.coordinate = _other.coordinate;
                }
                final PropertyTree anglePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("angle"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(anglePropertyTree!= null):((anglePropertyTree == null)||(!anglePropertyTree.isLeaf())))) {
                    this.angle = _other.angle;
                }
                final PropertyTree fitaabbPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("fitaabb"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(fitaabbPropertyTree!= null):((fitaabbPropertyTree == null)||(!fitaabbPropertyTree.isLeaf())))) {
                    this.fitaabb = _other.fitaabb;
                }
                final PropertyTree eulerseqPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("eulerseq"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(eulerseqPropertyTree!= null):((eulerseqPropertyTree == null)||(!eulerseqPropertyTree.isLeaf())))) {
                    this.eulerseq = _other.eulerseq;
                }
                final PropertyTree meshdirPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("meshdir"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(meshdirPropertyTree!= null):((meshdirPropertyTree == null)||(!meshdirPropertyTree.isLeaf())))) {
                    this.meshdir = _other.meshdir;
                }
                final PropertyTree texturedirPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("texturedir"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(texturedirPropertyTree!= null):((texturedirPropertyTree == null)||(!texturedirPropertyTree.isLeaf())))) {
                    this.texturedir = _other.texturedir;
                }
                final PropertyTree discardvisualPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("discardvisual"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(discardvisualPropertyTree!= null):((discardvisualPropertyTree == null)||(!discardvisualPropertyTree.isLeaf())))) {
                    this.discardvisual = _other.discardvisual;
                }
                final PropertyTree convexhullPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("convexhull"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(convexhullPropertyTree!= null):((convexhullPropertyTree == null)||(!convexhullPropertyTree.isLeaf())))) {
                    this.convexhull = _other.convexhull;
                }
                final PropertyTree userthreadPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("userthread"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(userthreadPropertyTree!= null):((userthreadPropertyTree == null)||(!userthreadPropertyTree.isLeaf())))) {
                    this.userthread = _other.userthread;
                }
                final PropertyTree fusestaticPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("fusestatic"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(fusestaticPropertyTree!= null):((fusestaticPropertyTree == null)||(!fusestaticPropertyTree.isLeaf())))) {
                    this.fusestatic = _other.fusestatic;
                }
                final PropertyTree inertiafromgeomPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("inertiafromgeom"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(inertiafromgeomPropertyTree!= null):((inertiafromgeomPropertyTree == null)||(!inertiafromgeomPropertyTree.isLeaf())))) {
                    this.inertiafromgeom = _other.inertiafromgeom;
                }
                final PropertyTree inertiagrouprangePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("inertiagrouprange"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(inertiagrouprangePropertyTree!= null):((inertiagrouprangePropertyTree == null)||(!inertiagrouprangePropertyTree.isLeaf())))) {
                    this.inertiagrouprange = _other.inertiagrouprange;
                }
            }
        }

        public _B end() {
            return this._parentBuilder;
        }

        protected<_P extends CompilerType >_P init(final _P _product) {
            _product.boundmass = this.boundmass;
            _product.boudinertia = this.boudinertia;
            _product.settotalmass = this.settotalmass;
            _product.balanceinertia = this.balanceinertia;
            _product.strippath = this.strippath;
            _product.coordinate = this.coordinate;
            _product.angle = this.angle;
            _product.fitaabb = this.fitaabb;
            _product.eulerseq = this.eulerseq;
            _product.meshdir = this.meshdir;
            _product.texturedir = this.texturedir;
            _product.discardvisual = this.discardvisual;
            _product.convexhull = this.convexhull;
            _product.userthread = this.userthread;
            _product.fusestatic = this.fusestatic;
            _product.inertiafromgeom = this.inertiafromgeom;
            _product.inertiagrouprange = this.inertiagrouprange;
            return _product;
        }

        /**
         * Sets the new value of "boundmass" (any previous value will be replaced)
         * 
         * @param boundmass
         *     New value of the "boundmass" property.
         */
        public CompilerType.Builder<_B> withBoundmass(final BigDecimal boundmass) {
            this.boundmass = boundmass;
            return this;
        }

        /**
         * Sets the new value of "boudinertia" (any previous value will be replaced)
         * 
         * @param boudinertia
         *     New value of the "boudinertia" property.
         */
        public CompilerType.Builder<_B> withBoudinertia(final BigDecimal boudinertia) {
            this.boudinertia = boudinertia;
            return this;
        }

        /**
         * Sets the new value of "settotalmass" (any previous value will be replaced)
         * 
         * @param settotalmass
         *     New value of the "settotalmass" property.
         */
        public CompilerType.Builder<_B> withSettotalmass(final BigDecimal settotalmass) {
            this.settotalmass = settotalmass;
            return this;
        }

        /**
         * Sets the new value of "balanceinertia" (any previous value will be replaced)
         * 
         * @param balanceinertia
         *     New value of the "balanceinertia" property.
         */
        public CompilerType.Builder<_B> withBalanceinertia(final Boolean balanceinertia) {
            this.balanceinertia = balanceinertia;
            return this;
        }

        /**
         * Sets the new value of "strippath" (any previous value will be replaced)
         * 
         * @param strippath
         *     New value of the "strippath" property.
         */
        public CompilerType.Builder<_B> withStrippath(final Boolean strippath) {
            this.strippath = strippath;
            return this;
        }

        /**
         * Sets the new value of "coordinate" (any previous value will be replaced)
         * 
         * @param coordinate
         *     New value of the "coordinate" property.
         */
        public CompilerType.Builder<_B> withCoordinate(final CoordinateType coordinate) {
            this.coordinate = coordinate;
            return this;
        }

        /**
         * Sets the new value of "angle" (any previous value will be replaced)
         * 
         * @param angle
         *     New value of the "angle" property.
         */
        public CompilerType.Builder<_B> withAngle(final AngleType angle) {
            this.angle = angle;
            return this;
        }

        /**
         * Sets the new value of "fitaabb" (any previous value will be replaced)
         * 
         * @param fitaabb
         *     New value of the "fitaabb" property.
         */
        public CompilerType.Builder<_B> withFitaabb(final Boolean fitaabb) {
            this.fitaabb = fitaabb;
            return this;
        }

        /**
         * Sets the new value of "eulerseq" (any previous value will be replaced)
         * 
         * @param eulerseq
         *     New value of the "eulerseq" property.
         */
        public CompilerType.Builder<_B> withEulerseq(final String eulerseq) {
            this.eulerseq = eulerseq;
            return this;
        }

        /**
         * Sets the new value of "meshdir" (any previous value will be replaced)
         * 
         * @param meshdir
         *     New value of the "meshdir" property.
         */
        public CompilerType.Builder<_B> withMeshdir(final String meshdir) {
            this.meshdir = meshdir;
            return this;
        }

        /**
         * Sets the new value of "texturedir" (any previous value will be replaced)
         * 
         * @param texturedir
         *     New value of the "texturedir" property.
         */
        public CompilerType.Builder<_B> withTexturedir(final String texturedir) {
            this.texturedir = texturedir;
            return this;
        }

        /**
         * Sets the new value of "discardvisual" (any previous value will be replaced)
         * 
         * @param discardvisual
         *     New value of the "discardvisual" property.
         */
        public CompilerType.Builder<_B> withDiscardvisual(final Boolean discardvisual) {
            this.discardvisual = discardvisual;
            return this;
        }

        /**
         * Sets the new value of "convexhull" (any previous value will be replaced)
         * 
         * @param convexhull
         *     New value of the "convexhull" property.
         */
        public CompilerType.Builder<_B> withConvexhull(final Boolean convexhull) {
            this.convexhull = convexhull;
            return this;
        }

        /**
         * Sets the new value of "userthread" (any previous value will be replaced)
         * 
         * @param userthread
         *     New value of the "userthread" property.
         */
        public CompilerType.Builder<_B> withUserthread(final Boolean userthread) {
            this.userthread = userthread;
            return this;
        }

        /**
         * Sets the new value of "fusestatic" (any previous value will be replaced)
         * 
         * @param fusestatic
         *     New value of the "fusestatic" property.
         */
        public CompilerType.Builder<_B> withFusestatic(final Boolean fusestatic) {
            this.fusestatic = fusestatic;
            return this;
        }

        /**
         * Sets the new value of "inertiafromgeom" (any previous value will be replaced)
         * 
         * @param inertiafromgeom
         *     New value of the "inertiafromgeom" property.
         */
        public CompilerType.Builder<_B> withInertiafromgeom(final InertiafromgeomType inertiafromgeom) {
            this.inertiafromgeom = inertiafromgeom;
            return this;
        }

        /**
         * Sets the new value of "inertiagrouprange" (any previous value will be replaced)
         * 
         * @param inertiagrouprange
         *     New value of the "inertiagrouprange" property.
         */
        public CompilerType.Builder<_B> withInertiagrouprange(final String inertiagrouprange) {
            this.inertiagrouprange = inertiagrouprange;
            return this;
        }

        @Override
        public CompilerType build() {
            return this.init(new CompilerType());
        }

        public CompilerType.Builder<_B> copyOf(final CompilerType _other) {
            _other.copyTo(this);
            return this;
        }

        public CompilerType.Builder<_B> copyOf(final CompilerType.Builder _other) {
            return copyOf(_other.build());
        }

    }

    public static class PropInfo {

        public final static transient String BOUNDMASS = "boundmass";
        public final static transient String BOUDINERTIA = "boudinertia";
        public final static transient String SETTOTALMASS = "settotalmass";
        public final static transient String BALANCEINERTIA = "balanceinertia";
        public final static transient String STRIPPATH = "strippath";
        public final static transient String COORDINATE = "coordinate";
        public final static transient String ANGLE = "angle";
        public final static transient String FITAABB = "fitaabb";
        public final static transient String EULERSEQ = "eulerseq";
        public final static transient String MESHDIR = "meshdir";
        public final static transient String TEXTUREDIR = "texturedir";
        public final static transient String DISCARDVISUAL = "discardvisual";
        public final static transient String CONVEXHULL = "convexhull";
        public final static transient String USERTHREAD = "userthread";
        public final static transient String FUSESTATIC = "fusestatic";
        public final static transient String INERTIAFROMGEOM = "inertiafromgeom";
        public final static transient String INERTIAGROUPRANGE = "inertiagrouprange";

    }

    public static class Select
        extends CompilerType.Selector<CompilerType.Select, Void>
    {


        Select() {
            super(null, null, null);
        }

        public static CompilerType.Select _root() {
            return new CompilerType.Select();
        }

    }

    public static class Selector<TRoot extends com.kscs.util.jaxb.Selector<TRoot, ?> , TParent >
        extends com.kscs.util.jaxb.Selector<TRoot, TParent>
    {

        private com.kscs.util.jaxb.Selector<TRoot, CompilerType.Selector<TRoot, TParent>> boundmass = null;
        private com.kscs.util.jaxb.Selector<TRoot, CompilerType.Selector<TRoot, TParent>> boudinertia = null;
        private com.kscs.util.jaxb.Selector<TRoot, CompilerType.Selector<TRoot, TParent>> settotalmass = null;
        private com.kscs.util.jaxb.Selector<TRoot, CompilerType.Selector<TRoot, TParent>> balanceinertia = null;
        private com.kscs.util.jaxb.Selector<TRoot, CompilerType.Selector<TRoot, TParent>> strippath = null;
        private com.kscs.util.jaxb.Selector<TRoot, CompilerType.Selector<TRoot, TParent>> coordinate = null;
        private com.kscs.util.jaxb.Selector<TRoot, CompilerType.Selector<TRoot, TParent>> angle = null;
        private com.kscs.util.jaxb.Selector<TRoot, CompilerType.Selector<TRoot, TParent>> fitaabb = null;
        private com.kscs.util.jaxb.Selector<TRoot, CompilerType.Selector<TRoot, TParent>> eulerseq = null;
        private com.kscs.util.jaxb.Selector<TRoot, CompilerType.Selector<TRoot, TParent>> meshdir = null;
        private com.kscs.util.jaxb.Selector<TRoot, CompilerType.Selector<TRoot, TParent>> texturedir = null;
        private com.kscs.util.jaxb.Selector<TRoot, CompilerType.Selector<TRoot, TParent>> discardvisual = null;
        private com.kscs.util.jaxb.Selector<TRoot, CompilerType.Selector<TRoot, TParent>> convexhull = null;
        private com.kscs.util.jaxb.Selector<TRoot, CompilerType.Selector<TRoot, TParent>> userthread = null;
        private com.kscs.util.jaxb.Selector<TRoot, CompilerType.Selector<TRoot, TParent>> fusestatic = null;
        private com.kscs.util.jaxb.Selector<TRoot, CompilerType.Selector<TRoot, TParent>> inertiafromgeom = null;
        private com.kscs.util.jaxb.Selector<TRoot, CompilerType.Selector<TRoot, TParent>> inertiagrouprange = null;

        public Selector(final TRoot root, final TParent parent, final String propertyName) {
            super(root, parent, propertyName);
        }

        @Override
        public Map<String, PropertyTree> buildChildren() {
            final Map<String, PropertyTree> products = new HashMap<String, PropertyTree>();
            products.putAll(super.buildChildren());
            if (this.boundmass!= null) {
                products.put("boundmass", this.boundmass.init());
            }
            if (this.boudinertia!= null) {
                products.put("boudinertia", this.boudinertia.init());
            }
            if (this.settotalmass!= null) {
                products.put("settotalmass", this.settotalmass.init());
            }
            if (this.balanceinertia!= null) {
                products.put("balanceinertia", this.balanceinertia.init());
            }
            if (this.strippath!= null) {
                products.put("strippath", this.strippath.init());
            }
            if (this.coordinate!= null) {
                products.put("coordinate", this.coordinate.init());
            }
            if (this.angle!= null) {
                products.put("angle", this.angle.init());
            }
            if (this.fitaabb!= null) {
                products.put("fitaabb", this.fitaabb.init());
            }
            if (this.eulerseq!= null) {
                products.put("eulerseq", this.eulerseq.init());
            }
            if (this.meshdir!= null) {
                products.put("meshdir", this.meshdir.init());
            }
            if (this.texturedir!= null) {
                products.put("texturedir", this.texturedir.init());
            }
            if (this.discardvisual!= null) {
                products.put("discardvisual", this.discardvisual.init());
            }
            if (this.convexhull!= null) {
                products.put("convexhull", this.convexhull.init());
            }
            if (this.userthread!= null) {
                products.put("userthread", this.userthread.init());
            }
            if (this.fusestatic!= null) {
                products.put("fusestatic", this.fusestatic.init());
            }
            if (this.inertiafromgeom!= null) {
                products.put("inertiafromgeom", this.inertiafromgeom.init());
            }
            if (this.inertiagrouprange!= null) {
                products.put("inertiagrouprange", this.inertiagrouprange.init());
            }
            return products;
        }

        public com.kscs.util.jaxb.Selector<TRoot, CompilerType.Selector<TRoot, TParent>> boundmass() {
            return ((this.boundmass == null)?this.boundmass = new com.kscs.util.jaxb.Selector<TRoot, CompilerType.Selector<TRoot, TParent>>(this._root, this, "boundmass"):this.boundmass);
        }

        public com.kscs.util.jaxb.Selector<TRoot, CompilerType.Selector<TRoot, TParent>> boudinertia() {
            return ((this.boudinertia == null)?this.boudinertia = new com.kscs.util.jaxb.Selector<TRoot, CompilerType.Selector<TRoot, TParent>>(this._root, this, "boudinertia"):this.boudinertia);
        }

        public com.kscs.util.jaxb.Selector<TRoot, CompilerType.Selector<TRoot, TParent>> settotalmass() {
            return ((this.settotalmass == null)?this.settotalmass = new com.kscs.util.jaxb.Selector<TRoot, CompilerType.Selector<TRoot, TParent>>(this._root, this, "settotalmass"):this.settotalmass);
        }

        public com.kscs.util.jaxb.Selector<TRoot, CompilerType.Selector<TRoot, TParent>> balanceinertia() {
            return ((this.balanceinertia == null)?this.balanceinertia = new com.kscs.util.jaxb.Selector<TRoot, CompilerType.Selector<TRoot, TParent>>(this._root, this, "balanceinertia"):this.balanceinertia);
        }

        public com.kscs.util.jaxb.Selector<TRoot, CompilerType.Selector<TRoot, TParent>> strippath() {
            return ((this.strippath == null)?this.strippath = new com.kscs.util.jaxb.Selector<TRoot, CompilerType.Selector<TRoot, TParent>>(this._root, this, "strippath"):this.strippath);
        }

        public com.kscs.util.jaxb.Selector<TRoot, CompilerType.Selector<TRoot, TParent>> coordinate() {
            return ((this.coordinate == null)?this.coordinate = new com.kscs.util.jaxb.Selector<TRoot, CompilerType.Selector<TRoot, TParent>>(this._root, this, "coordinate"):this.coordinate);
        }

        public com.kscs.util.jaxb.Selector<TRoot, CompilerType.Selector<TRoot, TParent>> angle() {
            return ((this.angle == null)?this.angle = new com.kscs.util.jaxb.Selector<TRoot, CompilerType.Selector<TRoot, TParent>>(this._root, this, "angle"):this.angle);
        }

        public com.kscs.util.jaxb.Selector<TRoot, CompilerType.Selector<TRoot, TParent>> fitaabb() {
            return ((this.fitaabb == null)?this.fitaabb = new com.kscs.util.jaxb.Selector<TRoot, CompilerType.Selector<TRoot, TParent>>(this._root, this, "fitaabb"):this.fitaabb);
        }

        public com.kscs.util.jaxb.Selector<TRoot, CompilerType.Selector<TRoot, TParent>> eulerseq() {
            return ((this.eulerseq == null)?this.eulerseq = new com.kscs.util.jaxb.Selector<TRoot, CompilerType.Selector<TRoot, TParent>>(this._root, this, "eulerseq"):this.eulerseq);
        }

        public com.kscs.util.jaxb.Selector<TRoot, CompilerType.Selector<TRoot, TParent>> meshdir() {
            return ((this.meshdir == null)?this.meshdir = new com.kscs.util.jaxb.Selector<TRoot, CompilerType.Selector<TRoot, TParent>>(this._root, this, "meshdir"):this.meshdir);
        }

        public com.kscs.util.jaxb.Selector<TRoot, CompilerType.Selector<TRoot, TParent>> texturedir() {
            return ((this.texturedir == null)?this.texturedir = new com.kscs.util.jaxb.Selector<TRoot, CompilerType.Selector<TRoot, TParent>>(this._root, this, "texturedir"):this.texturedir);
        }

        public com.kscs.util.jaxb.Selector<TRoot, CompilerType.Selector<TRoot, TParent>> discardvisual() {
            return ((this.discardvisual == null)?this.discardvisual = new com.kscs.util.jaxb.Selector<TRoot, CompilerType.Selector<TRoot, TParent>>(this._root, this, "discardvisual"):this.discardvisual);
        }

        public com.kscs.util.jaxb.Selector<TRoot, CompilerType.Selector<TRoot, TParent>> convexhull() {
            return ((this.convexhull == null)?this.convexhull = new com.kscs.util.jaxb.Selector<TRoot, CompilerType.Selector<TRoot, TParent>>(this._root, this, "convexhull"):this.convexhull);
        }

        public com.kscs.util.jaxb.Selector<TRoot, CompilerType.Selector<TRoot, TParent>> userthread() {
            return ((this.userthread == null)?this.userthread = new com.kscs.util.jaxb.Selector<TRoot, CompilerType.Selector<TRoot, TParent>>(this._root, this, "userthread"):this.userthread);
        }

        public com.kscs.util.jaxb.Selector<TRoot, CompilerType.Selector<TRoot, TParent>> fusestatic() {
            return ((this.fusestatic == null)?this.fusestatic = new com.kscs.util.jaxb.Selector<TRoot, CompilerType.Selector<TRoot, TParent>>(this._root, this, "fusestatic"):this.fusestatic);
        }

        public com.kscs.util.jaxb.Selector<TRoot, CompilerType.Selector<TRoot, TParent>> inertiafromgeom() {
            return ((this.inertiafromgeom == null)?this.inertiafromgeom = new com.kscs.util.jaxb.Selector<TRoot, CompilerType.Selector<TRoot, TParent>>(this._root, this, "inertiafromgeom"):this.inertiafromgeom);
        }

        public com.kscs.util.jaxb.Selector<TRoot, CompilerType.Selector<TRoot, TParent>> inertiagrouprange() {
            return ((this.inertiagrouprange == null)?this.inertiagrouprange = new com.kscs.util.jaxb.Selector<TRoot, CompilerType.Selector<TRoot, TParent>>(this._root, this, "inertiagrouprange"):this.inertiagrouprange);
        }

    }

}
