//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.3.0 
// See <a href="https://javaee.github.io/jaxb-v2/">https://javaee.github.io/jaxb-v2/</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2024.01.14 at 10:23:33 PM EST 
//


package org.mujoco.xml;

import java.beans.PropertyChangeListener;
import java.beans.VetoableChangeListener;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.xml.bind.JAXBElement;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlElementRef;
import javax.xml.bind.annotation.XmlElementRefs;
import javax.xml.bind.annotation.XmlElements;
import javax.xml.bind.annotation.XmlType;
import com.kscs.util.jaxb.BoundList;
import com.kscs.util.jaxb.BoundListProxy;
import com.kscs.util.jaxb.Buildable;
import com.kscs.util.jaxb.Copyable;
import com.kscs.util.jaxb.PartialCopyable;
import com.kscs.util.jaxb.PropertyTree;
import com.kscs.util.jaxb.PropertyTreeUse;
import com.kscs.util.jaxb.PropertyVisitor;
import org.mujoco.xml.attributetypes.CompositetypeType;
import org.mujoco.xml.body.BodyType;
import org.mujoco.xml.body.CameraType;
import org.mujoco.xml.body.CompositeType;
import org.mujoco.xml.body.CompositegeomType;
import org.mujoco.xml.body.CompositejointType;
import org.mujoco.xml.body.CompositesiteType;
import org.mujoco.xml.body.GeomType;
import org.mujoco.xml.body.InertialType;
import org.mujoco.xml.body.JointType;
import org.mujoco.xml.body.LightType;
import org.mujoco.xml.body.PinType;
import org.mujoco.xml.body.SiteType;
import org.mujoco.xml.body.SkinType;
import org.mujoco.xml.body.TendonType;
import org.mujoco.xml.root.IncludeType;


/**
 * <p>Java class for bodyarchType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="bodyarchType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;extension base="{body}bodyType"&gt;
 *       &lt;choice maxOccurs="unbounded" minOccurs="0"&gt;
 *         &lt;element name="inertial" type="{body}inertialType"/&gt;
 *         &lt;element name="joint" type="{body}jointType"/&gt;
 *         &lt;element name="freejoint" type="{body}jointType"/&gt;
 *         &lt;element name="geom" type="{body}geomType"/&gt;
 *         &lt;element name="site" type="{body}siteType"/&gt;
 *         &lt;element name="camera" type="{body}cameraType"/&gt;
 *         &lt;element name="light" type="{body}lightType"/&gt;
 *         &lt;element name="composite"&gt;
 *           &lt;complexType&gt;
 *             &lt;complexContent&gt;
 *               &lt;extension base="{body}compositeType"&gt;
 *                 &lt;choice maxOccurs="unbounded" minOccurs="0"&gt;
 *                   &lt;element name="joint" type="{body}compositejointType"/&gt;
 *                   &lt;element name="tendon" type="{body}tendonType"/&gt;
 *                   &lt;element name="geom" type="{body}compositegeomType"/&gt;
 *                   &lt;element name="site" type="{body}compositesiteType"/&gt;
 *                   &lt;element name="skin" type="{body}skinType"/&gt;
 *                   &lt;element name="pin" type="{body}pinType"/&gt;
 *                   &lt;element name="include" type="{root}includeType"/&gt;
 *                 &lt;/choice&gt;
 *               &lt;/extension&gt;
 *             &lt;/complexContent&gt;
 *           &lt;/complexType&gt;
 *         &lt;/element&gt;
 *         &lt;element name="body" type="{}bodyarchType"/&gt;
 *         &lt;element name="include" type="{root}includeType"/&gt;
 *       &lt;/choice&gt;
 *     &lt;/extension&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "bodyarchType", propOrder = {
    "inertialOrJointOrFreejoint"
})
public class BodyarchType
    extends BodyType
    implements Cloneable, Copyable, PartialCopyable
{

    @XmlElementRefs({
        @XmlElementRef(name = "inertial", type = JAXBElement.class, required = false),
        @XmlElementRef(name = "joint", type = JAXBElement.class, required = false),
        @XmlElementRef(name = "freejoint", type = JAXBElement.class, required = false),
        @XmlElementRef(name = "geom", type = JAXBElement.class, required = false),
        @XmlElementRef(name = "site", type = JAXBElement.class, required = false),
        @XmlElementRef(name = "camera", type = JAXBElement.class, required = false),
        @XmlElementRef(name = "light", type = JAXBElement.class, required = false),
        @XmlElementRef(name = "composite", type = JAXBElement.class, required = false),
        @XmlElementRef(name = "body", type = JAXBElement.class, required = false),
        @XmlElementRef(name = "include", type = JAXBElement.class, required = false)
    })
    protected List<JAXBElement<?>> inertialOrJointOrFreejoint;
    private transient BoundList<JAXBElement<?>> inertialOrJointOrFreejoint__Proxy = null;

    /**
     * Generated by copy-constructor plugin, JAXB requires public no-arg constructor.
     * 
     */
    public BodyarchType() {
        // Generated by copy-constructor plugin, JAXB requires public no-arg constructor.
    }

    /**
     * Instantiates a BodyarchType copying the state of another BodyarchType
     * 
     * @param _other
     *     The original BodyarchType from which to copy state.
     */
    public BodyarchType(final BodyarchType _other) {
        super(_other);
        this.inertialOrJointOrFreejoint = ((_other.inertialOrJointOrFreejoint == null)?null:new ArrayList<JAXBElement<?>>(_other.inertialOrJointOrFreejoint));
    }

    /**
     * Instantiates a BodyarchType copying the state of another BodyarchType
     * 
     * @param _propertyTreeUse
     *     Meaning of the {@link PropertyPath}: Exclude or include members contained in property path.
     * @param _propertyTree
     *     A restricting {@link PropertyPath} that defines which nodes of the source object tree should actually be copied.
     * @param _other
     *     The original BodyarchType from which to copy state.
     */
    public BodyarchType(final BodyarchType _other, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        super(_other, _propertyTree, _propertyTreeUse);
        final PropertyTree inertialOrJointOrFreejointPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("inertialOrJointOrFreejoint"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(inertialOrJointOrFreejointPropertyTree!= null):((inertialOrJointOrFreejointPropertyTree == null)||(!inertialOrJointOrFreejointPropertyTree.isLeaf())))) {
            this.inertialOrJointOrFreejoint = ((_other.inertialOrJointOrFreejoint == null)?null:new ArrayList<JAXBElement<?>>(_other.inertialOrJointOrFreejoint));
        }
    }

    public BoundList<JAXBElement<?>> getInertialOrJointOrFreejoint() {
        if (this.inertialOrJointOrFreejoint == null) {
            this.inertialOrJointOrFreejoint = new ArrayList<JAXBElement<?>>();
        }
        if (this.inertialOrJointOrFreejoint__Proxy == null) {
            this.inertialOrJointOrFreejoint__Proxy = new BoundListProxy<JAXBElement<?>>(this.inertialOrJointOrFreejoint);
        }
        return this.inertialOrJointOrFreejoint__Proxy;
    }

    @Override
    public BodyarchType withVetoableChangeListener(final VetoableChangeListener vetoableChangeListener) {
        addVetoableChangeListener(vetoableChangeListener);
        return this;
    }

    @Override
    public BodyarchType withPropertyChangeListener(final PropertyChangeListener propertyChangeListener) {
        addPropertyChangeListener(propertyChangeListener);
        return this;
    }

    @Override
    public BodyarchType clone() {
        final BodyarchType _newObject;
        _newObject = ((BodyarchType) super.clone());
        _newObject.inertialOrJointOrFreejoint = ((this.inertialOrJointOrFreejoint == null)?null:new ArrayList<JAXBElement<?>>(this.inertialOrJointOrFreejoint));
        return _newObject;
    }

    @Override
    public BodyarchType createCopy() {
        final BodyarchType _newObject = ((BodyarchType) super.createCopy());
        _newObject.inertialOrJointOrFreejoint = ((this.inertialOrJointOrFreejoint == null)?null:new ArrayList<JAXBElement<?>>(this.inertialOrJointOrFreejoint));
        return _newObject;
    }

    @Override
    public BodyarchType createCopy(final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        final BodyarchType _newObject = ((BodyarchType) super.createCopy(_propertyTree, _propertyTreeUse));
        final PropertyTree inertialOrJointOrFreejointPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("inertialOrJointOrFreejoint"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(inertialOrJointOrFreejointPropertyTree!= null):((inertialOrJointOrFreejointPropertyTree == null)||(!inertialOrJointOrFreejointPropertyTree.isLeaf())))) {
            _newObject.inertialOrJointOrFreejoint = ((this.inertialOrJointOrFreejoint == null)?null:new ArrayList<JAXBElement<?>>(this.inertialOrJointOrFreejoint));
        }
        return _newObject;
    }

    @Override
    public BodyarchType copyExcept(final PropertyTree _propertyTree) {
        return createCopy(_propertyTree, PropertyTreeUse.EXCLUDE);
    }

    @Override
    public BodyarchType copyOnly(final PropertyTree _propertyTree) {
        return createCopy(_propertyTree, PropertyTreeUse.INCLUDE);
    }

    /**
     * Copies all state of this object to a builder. This method is used by the {@link #copyOf} method and should not be called directly by client code.
     * 
     * @param _other
     *     A builder instance to which the state of this object will be copied.
     */
    public<_B >void copyTo(final BodyarchType.Builder<_B> _other) {
        super.copyTo(_other);
        if (this.inertialOrJointOrFreejoint == null) {
            _other.inertialOrJointOrFreejoint = null;
        } else {
            _other.inertialOrJointOrFreejoint = new ArrayList<Buildable>();
            for (JAXBElement<?> _item: this.inertialOrJointOrFreejoint) {
                _other.inertialOrJointOrFreejoint.add(((_item == null)?null:new Buildable.PrimitiveBuildable(_item)));
            }
        }
    }

    @Override
    public<_B >BodyarchType.Builder<_B> newCopyBuilder(final _B _parentBuilder) {
        return new BodyarchType.Builder<_B>(_parentBuilder, this, true);
    }

    @Override
    public BodyarchType.Builder<Void> newCopyBuilder() {
        return newCopyBuilder(null);
    }

    public static BodyarchType.Builder<Void> builder() {
        return new BodyarchType.Builder<Void>(null, null, false);
    }

    public static<_B >BodyarchType.Builder<_B> copyOf(final BodyType _other) {
        final BodyarchType.Builder<_B> _newBuilder = new BodyarchType.Builder<_B>(null, null, false);
        _other.copyTo(_newBuilder);
        return _newBuilder;
    }

    public static<_B >BodyarchType.Builder<_B> copyOf(final BodyarchType _other) {
        final BodyarchType.Builder<_B> _newBuilder = new BodyarchType.Builder<_B>(null, null, false);
        _other.copyTo(_newBuilder);
        return _newBuilder;
    }

    /**
     * Copies all state of this object to a builder. This method is used by the {@link #copyOf} method and should not be called directly by client code.
     * 
     * @param _other
     *     A builder instance to which the state of this object will be copied.
     */
    public<_B >void copyTo(final BodyarchType.Builder<_B> _other, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        super.copyTo(_other, _propertyTree, _propertyTreeUse);
        final PropertyTree inertialOrJointOrFreejointPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("inertialOrJointOrFreejoint"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(inertialOrJointOrFreejointPropertyTree!= null):((inertialOrJointOrFreejointPropertyTree == null)||(!inertialOrJointOrFreejointPropertyTree.isLeaf())))) {
            if (this.inertialOrJointOrFreejoint == null) {
                _other.inertialOrJointOrFreejoint = null;
            } else {
                _other.inertialOrJointOrFreejoint = new ArrayList<Buildable>();
                for (JAXBElement<?> _item: this.inertialOrJointOrFreejoint) {
                    _other.inertialOrJointOrFreejoint.add(((_item == null)?null:new Buildable.PrimitiveBuildable(_item)));
                }
            }
        }
    }

    @Override
    public<_B >BodyarchType.Builder<_B> newCopyBuilder(final _B _parentBuilder, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        return new BodyarchType.Builder<_B>(_parentBuilder, this, true, _propertyTree, _propertyTreeUse);
    }

    @Override
    public BodyarchType.Builder<Void> newCopyBuilder(final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        return newCopyBuilder(null, _propertyTree, _propertyTreeUse);
    }

    public static<_B >BodyarchType.Builder<_B> copyOf(final BodyType _other, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        final BodyarchType.Builder<_B> _newBuilder = new BodyarchType.Builder<_B>(null, null, false);
        _other.copyTo(_newBuilder, _propertyTree, _propertyTreeUse);
        return _newBuilder;
    }

    public static<_B >BodyarchType.Builder<_B> copyOf(final BodyarchType _other, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        final BodyarchType.Builder<_B> _newBuilder = new BodyarchType.Builder<_B>(null, null, false);
        _other.copyTo(_newBuilder, _propertyTree, _propertyTreeUse);
        return _newBuilder;
    }

    public static BodyarchType.Builder<Void> copyExcept(final BodyType _other, final PropertyTree _propertyTree) {
        return copyOf(_other, _propertyTree, PropertyTreeUse.EXCLUDE);
    }

    public static BodyarchType.Builder<Void> copyExcept(final BodyarchType _other, final PropertyTree _propertyTree) {
        return copyOf(_other, _propertyTree, PropertyTreeUse.EXCLUDE);
    }

    public static BodyarchType.Builder<Void> copyOnly(final BodyType _other, final PropertyTree _propertyTree) {
        return copyOf(_other, _propertyTree, PropertyTreeUse.INCLUDE);
    }

    public static BodyarchType.Builder<Void> copyOnly(final BodyarchType _other, final PropertyTree _propertyTree) {
        return copyOf(_other, _propertyTree, PropertyTreeUse.INCLUDE);
    }

    public BodyarchType visit(final PropertyVisitor _visitor_) {
        super.visit(_visitor_);
        return this;
    }

    public static class Builder<_B >
        extends BodyType.Builder<_B>
        implements Buildable
    {

        private List<Buildable> inertialOrJointOrFreejoint;

        public Builder(final _B _parentBuilder, final BodyarchType _other, final boolean _copy) {
            super(_parentBuilder, _other, _copy);
            if (_other!= null) {
                if (_other.inertialOrJointOrFreejoint == null) {
                    this.inertialOrJointOrFreejoint = null;
                } else {
                    this.inertialOrJointOrFreejoint = new ArrayList<Buildable>();
                    for (JAXBElement<?> _item: _other.inertialOrJointOrFreejoint) {
                        this.inertialOrJointOrFreejoint.add(((_item == null)?null:new Buildable.PrimitiveBuildable(_item)));
                    }
                }
            }
        }

        public Builder(final _B _parentBuilder, final BodyarchType _other, final boolean _copy, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
            super(_parentBuilder, _other, _copy, _propertyTree, _propertyTreeUse);
            if (_other!= null) {
                final PropertyTree inertialOrJointOrFreejointPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("inertialOrJointOrFreejoint"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(inertialOrJointOrFreejointPropertyTree!= null):((inertialOrJointOrFreejointPropertyTree == null)||(!inertialOrJointOrFreejointPropertyTree.isLeaf())))) {
                    if (_other.inertialOrJointOrFreejoint == null) {
                        this.inertialOrJointOrFreejoint = null;
                    } else {
                        this.inertialOrJointOrFreejoint = new ArrayList<Buildable>();
                        for (JAXBElement<?> _item: _other.inertialOrJointOrFreejoint) {
                            this.inertialOrJointOrFreejoint.add(((_item == null)?null:new Buildable.PrimitiveBuildable(_item)));
                        }
                    }
                }
            }
        }

        protected<_P extends BodyarchType >_P init(final _P _product) {
            if (this.inertialOrJointOrFreejoint!= null) {
                final List<JAXBElement<?>> inertialOrJointOrFreejoint = new ArrayList<JAXBElement<?>>(this.inertialOrJointOrFreejoint.size());
                for (Buildable _item: this.inertialOrJointOrFreejoint) {
                    inertialOrJointOrFreejoint.add(((JAXBElement<?> ) _item.build()));
                }
                _product.inertialOrJointOrFreejoint = inertialOrJointOrFreejoint;
            }
            return super.init(_product);
        }

        /**
         * Adds the given items to the value of "inertialOrJointOrFreejoint"
         * 
         * @param inertialOrJointOrFreejoint
         *     Items to add to the value of the "inertialOrJointOrFreejoint" property
         */
        public BodyarchType.Builder<_B> addInertialOrJointOrFreejoint(final Iterable<? extends JAXBElement<?>> inertialOrJointOrFreejoint) {
            if (inertialOrJointOrFreejoint!= null) {
                if (this.inertialOrJointOrFreejoint == null) {
                    this.inertialOrJointOrFreejoint = new ArrayList<Buildable>();
                }
                for (JAXBElement<?> _item: inertialOrJointOrFreejoint) {
                    this.inertialOrJointOrFreejoint.add(new Buildable.PrimitiveBuildable(_item));
                }
            }
            return this;
        }

        /**
         * Sets the new value of "inertialOrJointOrFreejoint" (any previous value will be replaced)
         * 
         * @param inertialOrJointOrFreejoint
         *     New value of the "inertialOrJointOrFreejoint" property.
         */
        public BodyarchType.Builder<_B> withInertialOrJointOrFreejoint(final Iterable<? extends JAXBElement<?>> inertialOrJointOrFreejoint) {
            if (this.inertialOrJointOrFreejoint!= null) {
                this.inertialOrJointOrFreejoint.clear();
            }
            return addInertialOrJointOrFreejoint(inertialOrJointOrFreejoint);
        }

        /**
         * Adds the given items to the value of "inertialOrJointOrFreejoint"
         * 
         * @param inertialOrJointOrFreejoint
         *     Items to add to the value of the "inertialOrJointOrFreejoint" property
         */
        public BodyarchType.Builder<_B> addInertialOrJointOrFreejoint(JAXBElement<?> ... inertialOrJointOrFreejoint) {
            addInertialOrJointOrFreejoint(Arrays.asList(inertialOrJointOrFreejoint));
            return this;
        }

        /**
         * Sets the new value of "inertialOrJointOrFreejoint" (any previous value will be replaced)
         * 
         * @param inertialOrJointOrFreejoint
         *     New value of the "inertialOrJointOrFreejoint" property.
         */
        public BodyarchType.Builder<_B> withInertialOrJointOrFreejoint(JAXBElement<?> ... inertialOrJointOrFreejoint) {
            withInertialOrJointOrFreejoint(Arrays.asList(inertialOrJointOrFreejoint));
            return this;
        }

        /**
         * Adds the given items to the value of "inertial_"
         * 
         * @param inertial_
         *     Items to add to the value of the "inertial_" property
         */
        public BodyarchType.Builder<_B> addInertial(final Iterable<? extends JAXBElement<InertialType>> inertial_) {
            return addInertialOrJointOrFreejoint(inertial_);
        }

        /**
         * Adds the given items to the value of "inertial_"
         * 
         * @param inertial_
         *     Items to add to the value of the "inertial_" property
         */
        public BodyarchType.Builder<_B> addInertial(JAXBElement<InertialType> ... inertial_) {
            return addInertial(Arrays.asList(inertial_));
        }

        /**
         * Adds the given items to the value of "joint_"
         * 
         * @param joint_
         *     Items to add to the value of the "joint_" property
         */
        public BodyarchType.Builder<_B> addJoint(final Iterable<? extends JAXBElement<JointType>> joint_) {
            return addInertialOrJointOrFreejoint(joint_);
        }

        /**
         * Adds the given items to the value of "joint_"
         * 
         * @param joint_
         *     Items to add to the value of the "joint_" property
         */
        public BodyarchType.Builder<_B> addJoint(JAXBElement<JointType> ... joint_) {
            return addJoint(Arrays.asList(joint_));
        }

        /**
         * Adds the given items to the value of "freejoint_"
         * 
         * @param freejoint_
         *     Items to add to the value of the "freejoint_" property
         */
        public BodyarchType.Builder<_B> addFreejoint(final Iterable<? extends JAXBElement<JointType>> freejoint_) {
            return addInertialOrJointOrFreejoint(freejoint_);
        }

        /**
         * Adds the given items to the value of "freejoint_"
         * 
         * @param freejoint_
         *     Items to add to the value of the "freejoint_" property
         */
        public BodyarchType.Builder<_B> addFreejoint(JAXBElement<JointType> ... freejoint_) {
            return addFreejoint(Arrays.asList(freejoint_));
        }

        /**
         * Adds the given items to the value of "geom_"
         * 
         * @param geom_
         *     Items to add to the value of the "geom_" property
         */
        public BodyarchType.Builder<_B> addGeom(final Iterable<? extends JAXBElement<GeomType>> geom_) {
            return addInertialOrJointOrFreejoint(geom_);
        }

        /**
         * Adds the given items to the value of "geom_"
         * 
         * @param geom_
         *     Items to add to the value of the "geom_" property
         */
        public BodyarchType.Builder<_B> addGeom(JAXBElement<GeomType> ... geom_) {
            return addGeom(Arrays.asList(geom_));
        }

        /**
         * Adds the given items to the value of "site_"
         * 
         * @param site_
         *     Items to add to the value of the "site_" property
         */
        public BodyarchType.Builder<_B> addSite(final Iterable<? extends JAXBElement<SiteType>> site_) {
            return addInertialOrJointOrFreejoint(site_);
        }

        /**
         * Adds the given items to the value of "site_"
         * 
         * @param site_
         *     Items to add to the value of the "site_" property
         */
        public BodyarchType.Builder<_B> addSite(JAXBElement<SiteType> ... site_) {
            return addSite(Arrays.asList(site_));
        }

        /**
         * Adds the given items to the value of "camera_"
         * 
         * @param camera_
         *     Items to add to the value of the "camera_" property
         */
        public BodyarchType.Builder<_B> addCamera(final Iterable<? extends JAXBElement<CameraType>> camera_) {
            return addInertialOrJointOrFreejoint(camera_);
        }

        /**
         * Adds the given items to the value of "camera_"
         * 
         * @param camera_
         *     Items to add to the value of the "camera_" property
         */
        public BodyarchType.Builder<_B> addCamera(JAXBElement<CameraType> ... camera_) {
            return addCamera(Arrays.asList(camera_));
        }

        /**
         * Adds the given items to the value of "light_"
         * 
         * @param light_
         *     Items to add to the value of the "light_" property
         */
        public BodyarchType.Builder<_B> addLight(final Iterable<? extends JAXBElement<LightType>> light_) {
            return addInertialOrJointOrFreejoint(light_);
        }

        /**
         * Adds the given items to the value of "light_"
         * 
         * @param light_
         *     Items to add to the value of the "light_" property
         */
        public BodyarchType.Builder<_B> addLight(JAXBElement<LightType> ... light_) {
            return addLight(Arrays.asList(light_));
        }

        /**
         * Adds the given items to the value of "composite_"
         * 
         * @param composite_
         *     Items to add to the value of the "composite_" property
         */
        public BodyarchType.Builder<_B> addComposite(final Iterable<? extends JAXBElement<BodyarchType.Composite>> composite_) {
            return addInertialOrJointOrFreejoint(composite_);
        }

        /**
         * Adds the given items to the value of "composite_"
         * 
         * @param composite_
         *     Items to add to the value of the "composite_" property
         */
        public BodyarchType.Builder<_B> addComposite(JAXBElement<BodyarchType.Composite> ... composite_) {
            return addComposite(Arrays.asList(composite_));
        }

        /**
         * Adds the given items to the value of "body_"
         * 
         * @param body_
         *     Items to add to the value of the "body_" property
         */
        public BodyarchType.Builder<_B> addBody(final Iterable<? extends JAXBElement<BodyarchType>> body_) {
            return addInertialOrJointOrFreejoint(body_);
        }

        /**
         * Adds the given items to the value of "body_"
         * 
         * @param body_
         *     Items to add to the value of the "body_" property
         */
        public BodyarchType.Builder<_B> addBody(JAXBElement<BodyarchType> ... body_) {
            return addBody(Arrays.asList(body_));
        }

        /**
         * Adds the given items to the value of "include_"
         * 
         * @param include_
         *     Items to add to the value of the "include_" property
         */
        public BodyarchType.Builder<_B> addInclude(final Iterable<? extends JAXBElement<IncludeType>> include_) {
            return addInertialOrJointOrFreejoint(include_);
        }

        /**
         * Adds the given items to the value of "include_"
         * 
         * @param include_
         *     Items to add to the value of the "include_" property
         */
        public BodyarchType.Builder<_B> addInclude(JAXBElement<IncludeType> ... include_) {
            return addInclude(Arrays.asList(include_));
        }

        /**
         * Sets the new value of "name" (any previous value will be replaced)
         * 
         * @param name
         *     New value of the "name" property.
         */
        @Override
        public BodyarchType.Builder<_B> withName(final String name) {
            super.withName(name);
            return this;
        }

        /**
         * Sets the new value of "childclass" (any previous value will be replaced)
         * 
         * @param childclass
         *     New value of the "childclass" property.
         */
        @Override
        public BodyarchType.Builder<_B> withChildclass(final String childclass) {
            super.withChildclass(childclass);
            return this;
        }

        /**
         * Sets the new value of "mocap" (any previous value will be replaced)
         * 
         * @param mocap
         *     New value of the "mocap" property.
         */
        @Override
        public BodyarchType.Builder<_B> withMocap(final Boolean mocap) {
            super.withMocap(mocap);
            return this;
        }

        /**
         * Sets the new value of "pos" (any previous value will be replaced)
         * 
         * @param pos
         *     New value of the "pos" property.
         */
        @Override
        public BodyarchType.Builder<_B> withPos(final String pos) {
            super.withPos(pos);
            return this;
        }

        /**
         * Sets the new value of "quat" (any previous value will be replaced)
         * 
         * @param quat
         *     New value of the "quat" property.
         */
        @Override
        public BodyarchType.Builder<_B> withQuat(final String quat) {
            super.withQuat(quat);
            return this;
        }

        /**
         * Sets the new value of "axisangle" (any previous value will be replaced)
         * 
         * @param axisangle
         *     New value of the "axisangle" property.
         */
        @Override
        public BodyarchType.Builder<_B> withAxisangle(final String axisangle) {
            super.withAxisangle(axisangle);
            return this;
        }

        /**
         * Sets the new value of "euler" (any previous value will be replaced)
         * 
         * @param euler
         *     New value of the "euler" property.
         */
        @Override
        public BodyarchType.Builder<_B> withEuler(final String euler) {
            super.withEuler(euler);
            return this;
        }

        /**
         * Sets the new value of "xyaxes" (any previous value will be replaced)
         * 
         * @param xyaxes
         *     New value of the "xyaxes" property.
         */
        @Override
        public BodyarchType.Builder<_B> withXyaxes(final String xyaxes) {
            super.withXyaxes(xyaxes);
            return this;
        }

        /**
         * Sets the new value of "zaxis" (any previous value will be replaced)
         * 
         * @param zaxis
         *     New value of the "zaxis" property.
         */
        @Override
        public BodyarchType.Builder<_B> withZaxis(final String zaxis) {
            super.withZaxis(zaxis);
            return this;
        }

        /**
         * Sets the new value of "user" (any previous value will be replaced)
         * 
         * @param user
         *     New value of the "user" property.
         */
        @Override
        public BodyarchType.Builder<_B> withUser(final String user) {
            super.withUser(user);
            return this;
        }

        @Override
        public BodyarchType build() {
            if (_storedValue == null) {
                return this.init(new BodyarchType());
            } else {
                return ((BodyarchType) _storedValue);
            }
        }

        public BodyarchType.Builder<_B> copyOf(final BodyarchType _other) {
            _other.copyTo(this);
            return this;
        }

        public BodyarchType.Builder<_B> copyOf(final BodyarchType.Builder _other) {
            return copyOf(_other.build());
        }

    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType&gt;
     *   &lt;complexContent&gt;
     *     &lt;extension base="{body}compositeType"&gt;
     *       &lt;choice maxOccurs="unbounded" minOccurs="0"&gt;
     *         &lt;element name="joint" type="{body}compositejointType"/&gt;
     *         &lt;element name="tendon" type="{body}tendonType"/&gt;
     *         &lt;element name="geom" type="{body}compositegeomType"/&gt;
     *         &lt;element name="site" type="{body}compositesiteType"/&gt;
     *         &lt;element name="skin" type="{body}skinType"/&gt;
     *         &lt;element name="pin" type="{body}pinType"/&gt;
     *         &lt;element name="include" type="{root}includeType"/&gt;
     *       &lt;/choice&gt;
     *     &lt;/extension&gt;
     *   &lt;/complexContent&gt;
     * &lt;/complexType&gt;
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "jointOrTendonOrGeom"
    })
    public static class Composite
        extends CompositeType
        implements Cloneable, Copyable, PartialCopyable
    {

        @XmlElements({
            @XmlElement(name = "joint", type = CompositejointType.class),
            @XmlElement(name = "tendon", type = TendonType.class),
            @XmlElement(name = "geom", type = CompositegeomType.class),
            @XmlElement(name = "site", type = CompositesiteType.class),
            @XmlElement(name = "skin", type = SkinType.class),
            @XmlElement(name = "pin", type = PinType.class),
            @XmlElement(name = "include", type = IncludeType.class)
        })
        protected List<Object> jointOrTendonOrGeom;
        private transient BoundList<Object> jointOrTendonOrGeom__Proxy = null;

        /**
         * Generated by copy-constructor plugin, JAXB requires public no-arg constructor.
         * 
         */
        public Composite() {
            // Generated by copy-constructor plugin, JAXB requires public no-arg constructor.
        }

        /**
         * Instantiates a Composite copying the state of another Composite
         * 
         * @param _other
         *     The original Composite from which to copy state.
         */
        public Composite(final BodyarchType.Composite _other) {
            super(_other);
            this.jointOrTendonOrGeom = ((_other.jointOrTendonOrGeom == null)?null:new ArrayList<Object>(_other.jointOrTendonOrGeom));
        }

        /**
         * Instantiates a Composite copying the state of another Composite
         * 
         * @param _propertyTreeUse
         *     Meaning of the {@link PropertyPath}: Exclude or include members contained in property path.
         * @param _propertyTree
         *     A restricting {@link PropertyPath} that defines which nodes of the source object tree should actually be copied.
         * @param _other
         *     The original Composite from which to copy state.
         */
        public Composite(final BodyarchType.Composite _other, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
            super(_other, _propertyTree, _propertyTreeUse);
            final PropertyTree jointOrTendonOrGeomPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("jointOrTendonOrGeom"));
            if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(jointOrTendonOrGeomPropertyTree!= null):((jointOrTendonOrGeomPropertyTree == null)||(!jointOrTendonOrGeomPropertyTree.isLeaf())))) {
                this.jointOrTendonOrGeom = ((_other.jointOrTendonOrGeom == null)?null:new ArrayList<Object>(_other.jointOrTendonOrGeom));
            }
        }

        public BoundList<Object> getJointOrTendonOrGeom() {
            if (this.jointOrTendonOrGeom == null) {
                this.jointOrTendonOrGeom = new ArrayList<Object>();
            }
            if (this.jointOrTendonOrGeom__Proxy == null) {
                this.jointOrTendonOrGeom__Proxy = new BoundListProxy<Object>(this.jointOrTendonOrGeom);
            }
            return this.jointOrTendonOrGeom__Proxy;
        }

        @Override
        public BodyarchType.Composite withVetoableChangeListener(final VetoableChangeListener vetoableChangeListener) {
            addVetoableChangeListener(vetoableChangeListener);
            return this;
        }

        @Override
        public BodyarchType.Composite withPropertyChangeListener(final PropertyChangeListener propertyChangeListener) {
            addPropertyChangeListener(propertyChangeListener);
            return this;
        }

        @Override
        public BodyarchType.Composite clone() {
            final BodyarchType.Composite _newObject;
            _newObject = ((BodyarchType.Composite) super.clone());
            _newObject.jointOrTendonOrGeom = ((this.jointOrTendonOrGeom == null)?null:new ArrayList<Object>(this.jointOrTendonOrGeom));
            return _newObject;
        }

        @Override
        public BodyarchType.Composite createCopy() {
            final BodyarchType.Composite _newObject = ((BodyarchType.Composite) super.createCopy());
            _newObject.jointOrTendonOrGeom = ((this.jointOrTendonOrGeom == null)?null:new ArrayList<Object>(this.jointOrTendonOrGeom));
            return _newObject;
        }

        @Override
        public BodyarchType.Composite createCopy(final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
            final BodyarchType.Composite _newObject = ((BodyarchType.Composite) super.createCopy(_propertyTree, _propertyTreeUse));
            final PropertyTree jointOrTendonOrGeomPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("jointOrTendonOrGeom"));
            if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(jointOrTendonOrGeomPropertyTree!= null):((jointOrTendonOrGeomPropertyTree == null)||(!jointOrTendonOrGeomPropertyTree.isLeaf())))) {
                _newObject.jointOrTendonOrGeom = ((this.jointOrTendonOrGeom == null)?null:new ArrayList<Object>(this.jointOrTendonOrGeom));
            }
            return _newObject;
        }

        @Override
        public BodyarchType.Composite copyExcept(final PropertyTree _propertyTree) {
            return createCopy(_propertyTree, PropertyTreeUse.EXCLUDE);
        }

        @Override
        public BodyarchType.Composite copyOnly(final PropertyTree _propertyTree) {
            return createCopy(_propertyTree, PropertyTreeUse.INCLUDE);
        }

        /**
         * Copies all state of this object to a builder. This method is used by the {@link #copyOf} method and should not be called directly by client code.
         * 
         * @param _other
         *     A builder instance to which the state of this object will be copied.
         */
        public<_B >void copyTo(final BodyarchType.Composite.Builder<_B> _other) {
            super.copyTo(_other);
            if (this.jointOrTendonOrGeom == null) {
                _other.jointOrTendonOrGeom = null;
            } else {
                _other.jointOrTendonOrGeom = new ArrayList<Buildable>();
                for (Object _item: this.jointOrTendonOrGeom) {
                    _other.jointOrTendonOrGeom.add(((_item == null)?null:new Buildable.PrimitiveBuildable(_item)));
                }
            }
        }

        @Override
        public<_B >BodyarchType.Composite.Builder<_B> newCopyBuilder(final _B _parentBuilder) {
            return new BodyarchType.Composite.Builder<_B>(_parentBuilder, this, true);
        }

        @Override
        public BodyarchType.Composite.Builder<Void> newCopyBuilder() {
            return newCopyBuilder(null);
        }

        public static BodyarchType.Composite.Builder<Void> builder() {
            return new BodyarchType.Composite.Builder<Void>(null, null, false);
        }

        public static<_B >BodyarchType.Composite.Builder<_B> copyOf(final CompositeType _other) {
            final BodyarchType.Composite.Builder<_B> _newBuilder = new BodyarchType.Composite.Builder<_B>(null, null, false);
            _other.copyTo(_newBuilder);
            return _newBuilder;
        }

        public static<_B >BodyarchType.Composite.Builder<_B> copyOf(final BodyarchType.Composite _other) {
            final BodyarchType.Composite.Builder<_B> _newBuilder = new BodyarchType.Composite.Builder<_B>(null, null, false);
            _other.copyTo(_newBuilder);
            return _newBuilder;
        }

        /**
         * Copies all state of this object to a builder. This method is used by the {@link #copyOf} method and should not be called directly by client code.
         * 
         * @param _other
         *     A builder instance to which the state of this object will be copied.
         */
        public<_B >void copyTo(final BodyarchType.Composite.Builder<_B> _other, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
            super.copyTo(_other, _propertyTree, _propertyTreeUse);
            final PropertyTree jointOrTendonOrGeomPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("jointOrTendonOrGeom"));
            if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(jointOrTendonOrGeomPropertyTree!= null):((jointOrTendonOrGeomPropertyTree == null)||(!jointOrTendonOrGeomPropertyTree.isLeaf())))) {
                if (this.jointOrTendonOrGeom == null) {
                    _other.jointOrTendonOrGeom = null;
                } else {
                    _other.jointOrTendonOrGeom = new ArrayList<Buildable>();
                    for (Object _item: this.jointOrTendonOrGeom) {
                        _other.jointOrTendonOrGeom.add(((_item == null)?null:new Buildable.PrimitiveBuildable(_item)));
                    }
                }
            }
        }

        @Override
        public<_B >BodyarchType.Composite.Builder<_B> newCopyBuilder(final _B _parentBuilder, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
            return new BodyarchType.Composite.Builder<_B>(_parentBuilder, this, true, _propertyTree, _propertyTreeUse);
        }

        @Override
        public BodyarchType.Composite.Builder<Void> newCopyBuilder(final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
            return newCopyBuilder(null, _propertyTree, _propertyTreeUse);
        }

        public static<_B >BodyarchType.Composite.Builder<_B> copyOf(final CompositeType _other, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
            final BodyarchType.Composite.Builder<_B> _newBuilder = new BodyarchType.Composite.Builder<_B>(null, null, false);
            _other.copyTo(_newBuilder, _propertyTree, _propertyTreeUse);
            return _newBuilder;
        }

        public static<_B >BodyarchType.Composite.Builder<_B> copyOf(final BodyarchType.Composite _other, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
            final BodyarchType.Composite.Builder<_B> _newBuilder = new BodyarchType.Composite.Builder<_B>(null, null, false);
            _other.copyTo(_newBuilder, _propertyTree, _propertyTreeUse);
            return _newBuilder;
        }

        public static BodyarchType.Composite.Builder<Void> copyExcept(final CompositeType _other, final PropertyTree _propertyTree) {
            return copyOf(_other, _propertyTree, PropertyTreeUse.EXCLUDE);
        }

        public static BodyarchType.Composite.Builder<Void> copyExcept(final BodyarchType.Composite _other, final PropertyTree _propertyTree) {
            return copyOf(_other, _propertyTree, PropertyTreeUse.EXCLUDE);
        }

        public static BodyarchType.Composite.Builder<Void> copyOnly(final CompositeType _other, final PropertyTree _propertyTree) {
            return copyOf(_other, _propertyTree, PropertyTreeUse.INCLUDE);
        }

        public static BodyarchType.Composite.Builder<Void> copyOnly(final BodyarchType.Composite _other, final PropertyTree _propertyTree) {
            return copyOf(_other, _propertyTree, PropertyTreeUse.INCLUDE);
        }

        public BodyarchType.Composite visit(final PropertyVisitor _visitor_) {
            super.visit(_visitor_);
            return this;
        }

        public static class Builder<_B >
            extends CompositeType.Builder<_B>
            implements Buildable
        {

            private List<Buildable> jointOrTendonOrGeom;

            public Builder(final _B _parentBuilder, final BodyarchType.Composite _other, final boolean _copy) {
                super(_parentBuilder, _other, _copy);
                if (_other!= null) {
                    if (_other.jointOrTendonOrGeom == null) {
                        this.jointOrTendonOrGeom = null;
                    } else {
                        this.jointOrTendonOrGeom = new ArrayList<Buildable>();
                        for (Object _item: _other.jointOrTendonOrGeom) {
                            this.jointOrTendonOrGeom.add(((_item == null)?null:new Buildable.PrimitiveBuildable(_item)));
                        }
                    }
                }
            }

            public Builder(final _B _parentBuilder, final BodyarchType.Composite _other, final boolean _copy, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
                super(_parentBuilder, _other, _copy, _propertyTree, _propertyTreeUse);
                if (_other!= null) {
                    final PropertyTree jointOrTendonOrGeomPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("jointOrTendonOrGeom"));
                    if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(jointOrTendonOrGeomPropertyTree!= null):((jointOrTendonOrGeomPropertyTree == null)||(!jointOrTendonOrGeomPropertyTree.isLeaf())))) {
                        if (_other.jointOrTendonOrGeom == null) {
                            this.jointOrTendonOrGeom = null;
                        } else {
                            this.jointOrTendonOrGeom = new ArrayList<Buildable>();
                            for (Object _item: _other.jointOrTendonOrGeom) {
                                this.jointOrTendonOrGeom.add(((_item == null)?null:new Buildable.PrimitiveBuildable(_item)));
                            }
                        }
                    }
                }
            }

            protected<_P extends BodyarchType.Composite >_P init(final _P _product) {
                if (this.jointOrTendonOrGeom!= null) {
                    final List<Object> jointOrTendonOrGeom = new ArrayList<Object>(this.jointOrTendonOrGeom.size());
                    for (Buildable _item: this.jointOrTendonOrGeom) {
                        jointOrTendonOrGeom.add(((Object) _item.build()));
                    }
                    _product.jointOrTendonOrGeom = jointOrTendonOrGeom;
                }
                return super.init(_product);
            }

            /**
             * Adds the given items to the value of "jointOrTendonOrGeom"
             * 
             * @param jointOrTendonOrGeom
             *     Items to add to the value of the "jointOrTendonOrGeom" property
             */
            public BodyarchType.Composite.Builder<_B> addJointOrTendonOrGeom(final Iterable<?> jointOrTendonOrGeom) {
                if (jointOrTendonOrGeom!= null) {
                    if (this.jointOrTendonOrGeom == null) {
                        this.jointOrTendonOrGeom = new ArrayList<Buildable>();
                    }
                    for (Object _item: jointOrTendonOrGeom) {
                        this.jointOrTendonOrGeom.add(new Buildable.PrimitiveBuildable(_item));
                    }
                }
                return this;
            }

            /**
             * Sets the new value of "jointOrTendonOrGeom" (any previous value will be replaced)
             * 
             * @param jointOrTendonOrGeom
             *     New value of the "jointOrTendonOrGeom" property.
             */
            public BodyarchType.Composite.Builder<_B> withJointOrTendonOrGeom(final Iterable<?> jointOrTendonOrGeom) {
                if (this.jointOrTendonOrGeom!= null) {
                    this.jointOrTendonOrGeom.clear();
                }
                return addJointOrTendonOrGeom(jointOrTendonOrGeom);
            }

            /**
             * Adds the given items to the value of "jointOrTendonOrGeom"
             * 
             * @param jointOrTendonOrGeom
             *     Items to add to the value of the "jointOrTendonOrGeom" property
             */
            public BodyarchType.Composite.Builder<_B> addJointOrTendonOrGeom(Object... jointOrTendonOrGeom) {
                addJointOrTendonOrGeom(Arrays.asList(jointOrTendonOrGeom));
                return this;
            }

            /**
             * Sets the new value of "jointOrTendonOrGeom" (any previous value will be replaced)
             * 
             * @param jointOrTendonOrGeom
             *     New value of the "jointOrTendonOrGeom" property.
             */
            public BodyarchType.Composite.Builder<_B> withJointOrTendonOrGeom(Object... jointOrTendonOrGeom) {
                withJointOrTendonOrGeom(Arrays.asList(jointOrTendonOrGeom));
                return this;
            }

            /**
             * Adds the given items to the value of "joint_"
             * 
             * @param joint_
             *     Items to add to the value of the "joint_" property
             */
            public BodyarchType.Composite.Builder<_B> addJoint(final Iterable<? extends CompositejointType> joint_) {
                if (joint_!= null) {
                    if (this.jointOrTendonOrGeom == null) {
                        this.jointOrTendonOrGeom = new ArrayList<Buildable>();
                    }
                    for (CompositejointType _item: joint_) {
                        this.jointOrTendonOrGeom.add(new CompositejointType.Builder<BodyarchType.Composite.Builder<_B>>(this, _item, false));
                    }
                }
                return this;
            }

            /**
             * Adds the given items to the value of "joint_"
             * 
             * @param joint_
             *     Items to add to the value of the "joint_" property
             */
            public BodyarchType.Composite.Builder<_B> addJoint(CompositejointType... joint_) {
                return addJoint(Arrays.asList(joint_));
            }

            /**
             * Returns a new builder to build an additional value of the "joint" property.
             * Use {@link org.mujoco.xml.body.CompositejointType.Builder#end()} to return to the current builder.
             * 
             * @return
             *     a new builder to build an additional value of the "joint" property.
             *     Use {@link org.mujoco.xml.body.CompositejointType.Builder#end()} to return to the current builder.
             */
            public CompositejointType.Builder<? extends BodyarchType.Composite.Builder<_B>> addJoint() {
                if (this.jointOrTendonOrGeom == null) {
                    this.jointOrTendonOrGeom = new ArrayList<Buildable>();
                }
                final CompositejointType.Builder<BodyarchType.Composite.Builder<_B>> joint_Builder = new CompositejointType.Builder<BodyarchType.Composite.Builder<_B>>(this, null, false);
                this.jointOrTendonOrGeom.add(joint_Builder);
                return joint_Builder;
            }

            /**
             * Adds the given items to the value of "tendon_"
             * 
             * @param tendon_
             *     Items to add to the value of the "tendon_" property
             */
            public BodyarchType.Composite.Builder<_B> addTendon(final Iterable<? extends TendonType> tendon_) {
                if (tendon_!= null) {
                    if (this.jointOrTendonOrGeom == null) {
                        this.jointOrTendonOrGeom = new ArrayList<Buildable>();
                    }
                    for (TendonType _item: tendon_) {
                        this.jointOrTendonOrGeom.add(new TendonType.Builder<BodyarchType.Composite.Builder<_B>>(this, _item, false));
                    }
                }
                return this;
            }

            /**
             * Adds the given items to the value of "tendon_"
             * 
             * @param tendon_
             *     Items to add to the value of the "tendon_" property
             */
            public BodyarchType.Composite.Builder<_B> addTendon(TendonType... tendon_) {
                return addTendon(Arrays.asList(tendon_));
            }

            /**
             * Returns a new builder to build an additional value of the "tendon" property.
             * Use {@link org.mujoco.xml.body.TendonType.Builder#end()} to return to the current builder.
             * 
             * @return
             *     a new builder to build an additional value of the "tendon" property.
             *     Use {@link org.mujoco.xml.body.TendonType.Builder#end()} to return to the current builder.
             */
            public TendonType.Builder<? extends BodyarchType.Composite.Builder<_B>> addTendon() {
                if (this.jointOrTendonOrGeom == null) {
                    this.jointOrTendonOrGeom = new ArrayList<Buildable>();
                }
                final TendonType.Builder<BodyarchType.Composite.Builder<_B>> tendon_Builder = new TendonType.Builder<BodyarchType.Composite.Builder<_B>>(this, null, false);
                this.jointOrTendonOrGeom.add(tendon_Builder);
                return tendon_Builder;
            }

            /**
             * Adds the given items to the value of "geom_"
             * 
             * @param geom_
             *     Items to add to the value of the "geom_" property
             */
            public BodyarchType.Composite.Builder<_B> addGeom(final Iterable<? extends CompositegeomType> geom_) {
                if (geom_!= null) {
                    if (this.jointOrTendonOrGeom == null) {
                        this.jointOrTendonOrGeom = new ArrayList<Buildable>();
                    }
                    for (CompositegeomType _item: geom_) {
                        this.jointOrTendonOrGeom.add(new CompositegeomType.Builder<BodyarchType.Composite.Builder<_B>>(this, _item, false));
                    }
                }
                return this;
            }

            /**
             * Adds the given items to the value of "geom_"
             * 
             * @param geom_
             *     Items to add to the value of the "geom_" property
             */
            public BodyarchType.Composite.Builder<_B> addGeom(CompositegeomType... geom_) {
                return addGeom(Arrays.asList(geom_));
            }

            /**
             * Returns a new builder to build an additional value of the "geom" property.
             * Use {@link org.mujoco.xml.body.CompositegeomType.Builder#end()} to return to the current builder.
             * 
             * @return
             *     a new builder to build an additional value of the "geom" property.
             *     Use {@link org.mujoco.xml.body.CompositegeomType.Builder#end()} to return to the current builder.
             */
            public CompositegeomType.Builder<? extends BodyarchType.Composite.Builder<_B>> addGeom() {
                if (this.jointOrTendonOrGeom == null) {
                    this.jointOrTendonOrGeom = new ArrayList<Buildable>();
                }
                final CompositegeomType.Builder<BodyarchType.Composite.Builder<_B>> geom_Builder = new CompositegeomType.Builder<BodyarchType.Composite.Builder<_B>>(this, null, false);
                this.jointOrTendonOrGeom.add(geom_Builder);
                return geom_Builder;
            }

            /**
             * Adds the given items to the value of "site_"
             * 
             * @param site_
             *     Items to add to the value of the "site_" property
             */
            public BodyarchType.Composite.Builder<_B> addSite(final Iterable<? extends CompositesiteType> site_) {
                if (site_!= null) {
                    if (this.jointOrTendonOrGeom == null) {
                        this.jointOrTendonOrGeom = new ArrayList<Buildable>();
                    }
                    for (CompositesiteType _item: site_) {
                        this.jointOrTendonOrGeom.add(new CompositesiteType.Builder<BodyarchType.Composite.Builder<_B>>(this, _item, false));
                    }
                }
                return this;
            }

            /**
             * Adds the given items to the value of "site_"
             * 
             * @param site_
             *     Items to add to the value of the "site_" property
             */
            public BodyarchType.Composite.Builder<_B> addSite(CompositesiteType... site_) {
                return addSite(Arrays.asList(site_));
            }

            /**
             * Returns a new builder to build an additional value of the "site" property.
             * Use {@link org.mujoco.xml.body.CompositesiteType.Builder#end()} to return to the current builder.
             * 
             * @return
             *     a new builder to build an additional value of the "site" property.
             *     Use {@link org.mujoco.xml.body.CompositesiteType.Builder#end()} to return to the current builder.
             */
            public CompositesiteType.Builder<? extends BodyarchType.Composite.Builder<_B>> addSite() {
                if (this.jointOrTendonOrGeom == null) {
                    this.jointOrTendonOrGeom = new ArrayList<Buildable>();
                }
                final CompositesiteType.Builder<BodyarchType.Composite.Builder<_B>> site_Builder = new CompositesiteType.Builder<BodyarchType.Composite.Builder<_B>>(this, null, false);
                this.jointOrTendonOrGeom.add(site_Builder);
                return site_Builder;
            }

            /**
             * Adds the given items to the value of "skin_"
             * 
             * @param skin_
             *     Items to add to the value of the "skin_" property
             */
            public BodyarchType.Composite.Builder<_B> addSkin(final Iterable<? extends SkinType> skin_) {
                if (skin_!= null) {
                    if (this.jointOrTendonOrGeom == null) {
                        this.jointOrTendonOrGeom = new ArrayList<Buildable>();
                    }
                    for (SkinType _item: skin_) {
                        this.jointOrTendonOrGeom.add(new SkinType.Builder<BodyarchType.Composite.Builder<_B>>(this, _item, false));
                    }
                }
                return this;
            }

            /**
             * Adds the given items to the value of "skin_"
             * 
             * @param skin_
             *     Items to add to the value of the "skin_" property
             */
            public BodyarchType.Composite.Builder<_B> addSkin(SkinType... skin_) {
                return addSkin(Arrays.asList(skin_));
            }

            /**
             * Returns a new builder to build an additional value of the "skin" property.
             * Use {@link org.mujoco.xml.body.SkinType.Builder#end()} to return to the current builder.
             * 
             * @return
             *     a new builder to build an additional value of the "skin" property.
             *     Use {@link org.mujoco.xml.body.SkinType.Builder#end()} to return to the current builder.
             */
            public SkinType.Builder<? extends BodyarchType.Composite.Builder<_B>> addSkin() {
                if (this.jointOrTendonOrGeom == null) {
                    this.jointOrTendonOrGeom = new ArrayList<Buildable>();
                }
                final SkinType.Builder<BodyarchType.Composite.Builder<_B>> skin_Builder = new SkinType.Builder<BodyarchType.Composite.Builder<_B>>(this, null, false);
                this.jointOrTendonOrGeom.add(skin_Builder);
                return skin_Builder;
            }

            /**
             * Adds the given items to the value of "pin_"
             * 
             * @param pin_
             *     Items to add to the value of the "pin_" property
             */
            public BodyarchType.Composite.Builder<_B> addPin(final Iterable<? extends PinType> pin_) {
                if (pin_!= null) {
                    if (this.jointOrTendonOrGeom == null) {
                        this.jointOrTendonOrGeom = new ArrayList<Buildable>();
                    }
                    for (PinType _item: pin_) {
                        this.jointOrTendonOrGeom.add(new PinType.Builder<BodyarchType.Composite.Builder<_B>>(this, _item, false));
                    }
                }
                return this;
            }

            /**
             * Adds the given items to the value of "pin_"
             * 
             * @param pin_
             *     Items to add to the value of the "pin_" property
             */
            public BodyarchType.Composite.Builder<_B> addPin(PinType... pin_) {
                return addPin(Arrays.asList(pin_));
            }

            /**
             * Returns a new builder to build an additional value of the "pin" property.
             * Use {@link org.mujoco.xml.body.PinType.Builder#end()} to return to the current builder.
             * 
             * @return
             *     a new builder to build an additional value of the "pin" property.
             *     Use {@link org.mujoco.xml.body.PinType.Builder#end()} to return to the current builder.
             */
            public PinType.Builder<? extends BodyarchType.Composite.Builder<_B>> addPin() {
                if (this.jointOrTendonOrGeom == null) {
                    this.jointOrTendonOrGeom = new ArrayList<Buildable>();
                }
                final PinType.Builder<BodyarchType.Composite.Builder<_B>> pin_Builder = new PinType.Builder<BodyarchType.Composite.Builder<_B>>(this, null, false);
                this.jointOrTendonOrGeom.add(pin_Builder);
                return pin_Builder;
            }

            /**
             * Adds the given items to the value of "include_"
             * 
             * @param include_
             *     Items to add to the value of the "include_" property
             */
            public BodyarchType.Composite.Builder<_B> addInclude(final Iterable<? extends IncludeType> include_) {
                if (include_!= null) {
                    if (this.jointOrTendonOrGeom == null) {
                        this.jointOrTendonOrGeom = new ArrayList<Buildable>();
                    }
                    for (IncludeType _item: include_) {
                        this.jointOrTendonOrGeom.add(new IncludeType.Builder<BodyarchType.Composite.Builder<_B>>(this, _item, false));
                    }
                }
                return this;
            }

            /**
             * Adds the given items to the value of "include_"
             * 
             * @param include_
             *     Items to add to the value of the "include_" property
             */
            public BodyarchType.Composite.Builder<_B> addInclude(IncludeType... include_) {
                return addInclude(Arrays.asList(include_));
            }

            /**
             * Returns a new builder to build an additional value of the "include" property.
             * Use {@link org.mujoco.xml.root.IncludeType.Builder#end()} to return to the current builder.
             * 
             * @return
             *     a new builder to build an additional value of the "include" property.
             *     Use {@link org.mujoco.xml.root.IncludeType.Builder#end()} to return to the current builder.
             */
            public IncludeType.Builder<? extends BodyarchType.Composite.Builder<_B>> addInclude() {
                if (this.jointOrTendonOrGeom == null) {
                    this.jointOrTendonOrGeom = new ArrayList<Buildable>();
                }
                final IncludeType.Builder<BodyarchType.Composite.Builder<_B>> include_Builder = new IncludeType.Builder<BodyarchType.Composite.Builder<_B>>(this, null, false);
                this.jointOrTendonOrGeom.add(include_Builder);
                return include_Builder;
            }

            /**
             * Sets the new value of "prefix" (any previous value will be replaced)
             * 
             * @param prefix
             *     New value of the "prefix" property.
             */
            @Override
            public BodyarchType.Composite.Builder<_B> withPrefix(final String prefix) {
                super.withPrefix(prefix);
                return this;
            }

            /**
             * Sets the new value of "type" (any previous value will be replaced)
             * 
             * @param type
             *     New value of the "type" property.
             */
            @Override
            public BodyarchType.Composite.Builder<_B> withType(final CompositetypeType type) {
                super.withType(type);
                return this;
            }

            /**
             * Sets the new value of "count" (any previous value will be replaced)
             * 
             * @param count
             *     New value of the "count" property.
             */
            @Override
            public BodyarchType.Composite.Builder<_B> withCount(final String count) {
                super.withCount(count);
                return this;
            }

            /**
             * Sets the new value of "spacing" (any previous value will be replaced)
             * 
             * @param spacing
             *     New value of the "spacing" property.
             */
            @Override
            public BodyarchType.Composite.Builder<_B> withSpacing(final BigDecimal spacing) {
                super.withSpacing(spacing);
                return this;
            }

            /**
             * Sets the new value of "offset" (any previous value will be replaced)
             * 
             * @param offset
             *     New value of the "offset" property.
             */
            @Override
            public BodyarchType.Composite.Builder<_B> withOffset(final String offset) {
                super.withOffset(offset);
                return this;
            }

            /**
             * Sets the new value of "flatinertia" (any previous value will be replaced)
             * 
             * @param flatinertia
             *     New value of the "flatinertia" property.
             */
            @Override
            public BodyarchType.Composite.Builder<_B> withFlatinertia(final BigDecimal flatinertia) {
                super.withFlatinertia(flatinertia);
                return this;
            }

            /**
             * Sets the new value of "solimpsmooth" (any previous value will be replaced)
             * 
             * @param solimpsmooth
             *     New value of the "solimpsmooth" property.
             */
            @Override
            public BodyarchType.Composite.Builder<_B> withSolimpsmooth(final String solimpsmooth) {
                super.withSolimpsmooth(solimpsmooth);
                return this;
            }

            /**
             * Sets the new value of "solrefsmooth" (any previous value will be replaced)
             * 
             * @param solrefsmooth
             *     New value of the "solrefsmooth" property.
             */
            @Override
            public BodyarchType.Composite.Builder<_B> withSolrefsmooth(final String solrefsmooth) {
                super.withSolrefsmooth(solrefsmooth);
                return this;
            }

            @Override
            public BodyarchType.Composite build() {
                if (_storedValue == null) {
                    return this.init(new BodyarchType.Composite());
                } else {
                    return ((BodyarchType.Composite) _storedValue);
                }
            }

            public BodyarchType.Composite.Builder<_B> copyOf(final BodyarchType.Composite _other) {
                _other.copyTo(this);
                return this;
            }

            public BodyarchType.Composite.Builder<_B> copyOf(final BodyarchType.Composite.Builder _other) {
                return copyOf(_other.build());
            }

        }

        public static class PropInfo {

            public final static transient String JOINT_OR_TENDON_OR_GEOM = "jointOrTendonOrGeom";

        }

        public static class Select
            extends BodyarchType.Composite.Selector<BodyarchType.Composite.Select, Void>
        {


            Select() {
                super(null, null, null);
            }

            public static BodyarchType.Composite.Select _root() {
                return new BodyarchType.Composite.Select();
            }

        }

        public static class Selector<TRoot extends com.kscs.util.jaxb.Selector<TRoot, ?> , TParent >
            extends CompositeType.Selector<TRoot, TParent>
        {

            private com.kscs.util.jaxb.Selector<TRoot, BodyarchType.Composite.Selector<TRoot, TParent>> jointOrTendonOrGeom = null;

            public Selector(final TRoot root, final TParent parent, final String propertyName) {
                super(root, parent, propertyName);
            }

            @Override
            public Map<String, PropertyTree> buildChildren() {
                final Map<String, PropertyTree> products = new HashMap<String, PropertyTree>();
                products.putAll(super.buildChildren());
                if (this.jointOrTendonOrGeom!= null) {
                    products.put("jointOrTendonOrGeom", this.jointOrTendonOrGeom.init());
                }
                return products;
            }

            public com.kscs.util.jaxb.Selector<TRoot, BodyarchType.Composite.Selector<TRoot, TParent>> jointOrTendonOrGeom() {
                return ((this.jointOrTendonOrGeom == null)?this.jointOrTendonOrGeom = new com.kscs.util.jaxb.Selector<TRoot, BodyarchType.Composite.Selector<TRoot, TParent>>(this._root, this, "jointOrTendonOrGeom"):this.jointOrTendonOrGeom);
            }

        }

    }

    public static class PropInfo {

        public final static transient String INERTIAL_OR_JOINT_OR_FREEJOINT = "inertialOrJointOrFreejoint";

    }

    public static class Select
        extends BodyarchType.Selector<BodyarchType.Select, Void>
    {


        Select() {
            super(null, null, null);
        }

        public static BodyarchType.Select _root() {
            return new BodyarchType.Select();
        }

    }

    public static class Selector<TRoot extends com.kscs.util.jaxb.Selector<TRoot, ?> , TParent >
        extends BodyType.Selector<TRoot, TParent>
    {

        private com.kscs.util.jaxb.Selector<TRoot, BodyarchType.Selector<TRoot, TParent>> inertialOrJointOrFreejoint = null;

        public Selector(final TRoot root, final TParent parent, final String propertyName) {
            super(root, parent, propertyName);
        }

        @Override
        public Map<String, PropertyTree> buildChildren() {
            final Map<String, PropertyTree> products = new HashMap<String, PropertyTree>();
            products.putAll(super.buildChildren());
            if (this.inertialOrJointOrFreejoint!= null) {
                products.put("inertialOrJointOrFreejoint", this.inertialOrJointOrFreejoint.init());
            }
            return products;
        }

        public com.kscs.util.jaxb.Selector<TRoot, BodyarchType.Selector<TRoot, TParent>> inertialOrJointOrFreejoint() {
            return ((this.inertialOrJointOrFreejoint == null)?this.inertialOrJointOrFreejoint = new com.kscs.util.jaxb.Selector<TRoot, BodyarchType.Selector<TRoot, TParent>>(this._root, this, "inertialOrJointOrFreejoint"):this.inertialOrJointOrFreejoint);
        }

    }

}
