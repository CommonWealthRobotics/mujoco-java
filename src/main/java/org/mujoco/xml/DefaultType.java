//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.3.0 
// See <a href="https://javaee.github.io/jaxb-v2/">https://javaee.github.io/jaxb-v2/</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2024.03.13 at 04:36:46 PM EDT 
//


package org.mujoco.xml;

import java.beans.PropertyChangeListener;
import java.beans.VetoableChangeListener;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlElements;
import javax.xml.bind.annotation.XmlType;
import com.kscs.util.jaxb.BoundList;
import com.kscs.util.jaxb.BoundListProxy;
import com.kscs.util.jaxb.Buildable;
import com.kscs.util.jaxb.Copyable;
import com.kscs.util.jaxb.PartialCopyable;
import com.kscs.util.jaxb.PropertyTree;
import com.kscs.util.jaxb.PropertyTreeUse;
import com.kscs.util.jaxb.PropertyVisitor;
import org.mujoco.xml.MuJoCoDefault.CameraType;
import org.mujoco.xml.MuJoCoDefault.CylinderType;
import org.mujoco.xml.MuJoCoDefault.EqualityType;
import org.mujoco.xml.MuJoCoDefault.GeneralType;
import org.mujoco.xml.MuJoCoDefault.GeomType;
import org.mujoco.xml.MuJoCoDefault.JointType;
import org.mujoco.xml.MuJoCoDefault.LightType;
import org.mujoco.xml.MuJoCoDefault.MaterialType;
import org.mujoco.xml.MuJoCoDefault.MeshType;
import org.mujoco.xml.MuJoCoDefault.MotorType;
import org.mujoco.xml.MuJoCoDefault.MuscleType;
import org.mujoco.xml.MuJoCoDefault.PairType;
import org.mujoco.xml.MuJoCoDefault.PositionType;
import org.mujoco.xml.MuJoCoDefault.SiteType;
import org.mujoco.xml.MuJoCoDefault.TendonType;
import org.mujoco.xml.MuJoCoDefault.VelocityType;
import org.mujoco.xml.root.IncludeType;


/**
 * <p>Java class for defaultType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="defaultType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;extension base="{default}defaultType"&gt;
 *       &lt;choice maxOccurs="unbounded" minOccurs="0"&gt;
 *         &lt;element name="mesh" type="{default}meshType"/&gt;
 *         &lt;element name="material" type="{default}materialType"/&gt;
 *         &lt;element name="joint" type="{default}jointType"/&gt;
 *         &lt;element name="geom" type="{default}geomType"/&gt;
 *         &lt;element name="site" type="{default}siteType"/&gt;
 *         &lt;element name="camera" type="{default}cameraType"/&gt;
 *         &lt;element name="light" type="{default}lightType"/&gt;
 *         &lt;element name="pair" type="{default}pairType"/&gt;
 *         &lt;element name="equality" type="{default}equalityType"/&gt;
 *         &lt;element name="tendon" type="{default}tendonType"/&gt;
 *         &lt;element name="general" type="{default}generalType"/&gt;
 *         &lt;element name="motor" type="{default}motorType"/&gt;
 *         &lt;element name="position" type="{default}positionType"/&gt;
 *         &lt;element name="velocity" type="{default}velocityType"/&gt;
 *         &lt;element name="cylinder" type="{default}cylinderType"/&gt;
 *         &lt;element name="muscle" type="{default}muscleType"/&gt;
 *         &lt;element name="default" type="{}defaultType" minOccurs="0"/&gt;
 *         &lt;element name="include" type="{root}includeType"/&gt;
 *       &lt;/choice&gt;
 *     &lt;/extension&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "defaultType", propOrder = {
    "meshOrMaterialOrJoint"
})
public class DefaultType
    extends org.mujoco.xml.MuJoCoDefault.DefaultType
    implements Cloneable, Copyable, PartialCopyable
{

    @XmlElements({
        @XmlElement(name = "mesh", type = MeshType.class),
        @XmlElement(name = "material", type = MaterialType.class),
        @XmlElement(name = "joint", type = JointType.class),
        @XmlElement(name = "geom", type = GeomType.class),
        @XmlElement(name = "site", type = SiteType.class),
        @XmlElement(name = "camera", type = CameraType.class),
        @XmlElement(name = "light", type = LightType.class),
        @XmlElement(name = "pair", type = PairType.class),
        @XmlElement(name = "equality", type = EqualityType.class),
        @XmlElement(name = "tendon", type = TendonType.class),
        @XmlElement(name = "general", type = GeneralType.class),
        @XmlElement(name = "motor", type = MotorType.class),
        @XmlElement(name = "position", type = PositionType.class),
        @XmlElement(name = "velocity", type = VelocityType.class),
        @XmlElement(name = "cylinder", type = CylinderType.class),
        @XmlElement(name = "muscle", type = MuscleType.class),
        @XmlElement(name = "default", type = DefaultType.class),
        @XmlElement(name = "include", type = IncludeType.class)
    })
    protected List<Object> meshOrMaterialOrJoint;
    private transient BoundList<Object> meshOrMaterialOrJoint__Proxy = null;

    /**
     * Generated by copy-constructor plugin, JAXB requires public no-arg constructor.
     * 
     */
    public DefaultType() {
        // Generated by copy-constructor plugin, JAXB requires public no-arg constructor.
    }

    /**
     * Instantiates a DefaultType copying the state of another DefaultType
     * 
     * @param _other
     *     The original DefaultType from which to copy state.
     */
    public DefaultType(final DefaultType _other) {
        super(_other);
        this.meshOrMaterialOrJoint = ((_other.meshOrMaterialOrJoint == null)?null:new ArrayList<Object>(_other.meshOrMaterialOrJoint));
    }

    /**
     * Instantiates a DefaultType copying the state of another DefaultType
     * 
     * @param _propertyTreeUse
     *     Meaning of the {@link PropertyPath}: Exclude or include members contained in property path.
     * @param _propertyTree
     *     A restricting {@link PropertyPath} that defines which nodes of the source object tree should actually be copied.
     * @param _other
     *     The original DefaultType from which to copy state.
     */
    public DefaultType(final DefaultType _other, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        super(_other, _propertyTree, _propertyTreeUse);
        final PropertyTree meshOrMaterialOrJointPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("meshOrMaterialOrJoint"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(meshOrMaterialOrJointPropertyTree!= null):((meshOrMaterialOrJointPropertyTree == null)||(!meshOrMaterialOrJointPropertyTree.isLeaf())))) {
            this.meshOrMaterialOrJoint = ((_other.meshOrMaterialOrJoint == null)?null:new ArrayList<Object>(_other.meshOrMaterialOrJoint));
        }
    }

    public BoundList<Object> getMeshOrMaterialOrJoint() {
        if (this.meshOrMaterialOrJoint == null) {
            this.meshOrMaterialOrJoint = new ArrayList<Object>();
        }
        if (this.meshOrMaterialOrJoint__Proxy == null) {
            this.meshOrMaterialOrJoint__Proxy = new BoundListProxy<Object>(this.meshOrMaterialOrJoint);
        }
        return this.meshOrMaterialOrJoint__Proxy;
    }

    @Override
    public DefaultType withVetoableChangeListener(final VetoableChangeListener vetoableChangeListener) {
        addVetoableChangeListener(vetoableChangeListener);
        return this;
    }

    @Override
    public DefaultType withPropertyChangeListener(final PropertyChangeListener propertyChangeListener) {
        addPropertyChangeListener(propertyChangeListener);
        return this;
    }

    @Override
    public DefaultType clone() {
        final DefaultType _newObject;
        _newObject = ((DefaultType) super.clone());
        _newObject.meshOrMaterialOrJoint = ((this.meshOrMaterialOrJoint == null)?null:new ArrayList<Object>(this.meshOrMaterialOrJoint));
        return _newObject;
    }

    @Override
    public DefaultType createCopy() {
        final DefaultType _newObject = ((DefaultType) super.createCopy());
        _newObject.meshOrMaterialOrJoint = ((this.meshOrMaterialOrJoint == null)?null:new ArrayList<Object>(this.meshOrMaterialOrJoint));
        return _newObject;
    }

    @Override
    public DefaultType createCopy(final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        final DefaultType _newObject = ((DefaultType) super.createCopy(_propertyTree, _propertyTreeUse));
        final PropertyTree meshOrMaterialOrJointPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("meshOrMaterialOrJoint"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(meshOrMaterialOrJointPropertyTree!= null):((meshOrMaterialOrJointPropertyTree == null)||(!meshOrMaterialOrJointPropertyTree.isLeaf())))) {
            _newObject.meshOrMaterialOrJoint = ((this.meshOrMaterialOrJoint == null)?null:new ArrayList<Object>(this.meshOrMaterialOrJoint));
        }
        return _newObject;
    }

    @Override
    public DefaultType copyExcept(final PropertyTree _propertyTree) {
        return createCopy(_propertyTree, PropertyTreeUse.EXCLUDE);
    }

    @Override
    public DefaultType copyOnly(final PropertyTree _propertyTree) {
        return createCopy(_propertyTree, PropertyTreeUse.INCLUDE);
    }

    /**
     * Copies all state of this object to a builder. This method is used by the {@link #copyOf} method and should not be called directly by client code.
     * 
     * @param _other
     *     A builder instance to which the state of this object will be copied.
     */
    public<_B >void copyTo(final DefaultType.Builder<_B> _other) {
        super.copyTo(_other);
        if (this.meshOrMaterialOrJoint == null) {
            _other.meshOrMaterialOrJoint = null;
        } else {
            _other.meshOrMaterialOrJoint = new ArrayList<Buildable>();
            for (Object _item: this.meshOrMaterialOrJoint) {
                _other.meshOrMaterialOrJoint.add(((_item == null)?null:new Buildable.PrimitiveBuildable(_item)));
            }
        }
    }

    @Override
    public<_B >DefaultType.Builder<_B> newCopyBuilder(final _B _parentBuilder) {
        return new DefaultType.Builder<_B>(_parentBuilder, this, true);
    }

    @Override
    public DefaultType.Builder<Void> newCopyBuilder() {
        return newCopyBuilder(null);
    }

    public static DefaultType.Builder<Void> builder() {
        return new DefaultType.Builder<Void>(null, null, false);
    }

    public static<_B >DefaultType.Builder<_B> copyOf(final org.mujoco.xml.MuJoCoDefault.DefaultType _other) {
        final DefaultType.Builder<_B> _newBuilder = new DefaultType.Builder<_B>(null, null, false);
        _other.copyTo(_newBuilder);
        return _newBuilder;
    }

    public static<_B >DefaultType.Builder<_B> copyOf(final DefaultType _other) {
        final DefaultType.Builder<_B> _newBuilder = new DefaultType.Builder<_B>(null, null, false);
        _other.copyTo(_newBuilder);
        return _newBuilder;
    }

    /**
     * Copies all state of this object to a builder. This method is used by the {@link #copyOf} method and should not be called directly by client code.
     * 
     * @param _other
     *     A builder instance to which the state of this object will be copied.
     */
    public<_B >void copyTo(final DefaultType.Builder<_B> _other, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        super.copyTo(_other, _propertyTree, _propertyTreeUse);
        final PropertyTree meshOrMaterialOrJointPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("meshOrMaterialOrJoint"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(meshOrMaterialOrJointPropertyTree!= null):((meshOrMaterialOrJointPropertyTree == null)||(!meshOrMaterialOrJointPropertyTree.isLeaf())))) {
            if (this.meshOrMaterialOrJoint == null) {
                _other.meshOrMaterialOrJoint = null;
            } else {
                _other.meshOrMaterialOrJoint = new ArrayList<Buildable>();
                for (Object _item: this.meshOrMaterialOrJoint) {
                    _other.meshOrMaterialOrJoint.add(((_item == null)?null:new Buildable.PrimitiveBuildable(_item)));
                }
            }
        }
    }

    @Override
    public<_B >DefaultType.Builder<_B> newCopyBuilder(final _B _parentBuilder, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        return new DefaultType.Builder<_B>(_parentBuilder, this, true, _propertyTree, _propertyTreeUse);
    }

    @Override
    public DefaultType.Builder<Void> newCopyBuilder(final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        return newCopyBuilder(null, _propertyTree, _propertyTreeUse);
    }

    public static<_B >DefaultType.Builder<_B> copyOf(final org.mujoco.xml.MuJoCoDefault.DefaultType _other, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        final DefaultType.Builder<_B> _newBuilder = new DefaultType.Builder<_B>(null, null, false);
        _other.copyTo(_newBuilder, _propertyTree, _propertyTreeUse);
        return _newBuilder;
    }

    public static<_B >DefaultType.Builder<_B> copyOf(final DefaultType _other, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        final DefaultType.Builder<_B> _newBuilder = new DefaultType.Builder<_B>(null, null, false);
        _other.copyTo(_newBuilder, _propertyTree, _propertyTreeUse);
        return _newBuilder;
    }

    public static DefaultType.Builder<Void> copyExcept(final org.mujoco.xml.MuJoCoDefault.DefaultType _other, final PropertyTree _propertyTree) {
        return copyOf(_other, _propertyTree, PropertyTreeUse.EXCLUDE);
    }

    public static DefaultType.Builder<Void> copyExcept(final DefaultType _other, final PropertyTree _propertyTree) {
        return copyOf(_other, _propertyTree, PropertyTreeUse.EXCLUDE);
    }

    public static DefaultType.Builder<Void> copyOnly(final org.mujoco.xml.MuJoCoDefault.DefaultType _other, final PropertyTree _propertyTree) {
        return copyOf(_other, _propertyTree, PropertyTreeUse.INCLUDE);
    }

    public static DefaultType.Builder<Void> copyOnly(final DefaultType _other, final PropertyTree _propertyTree) {
        return copyOf(_other, _propertyTree, PropertyTreeUse.INCLUDE);
    }

    public DefaultType visit(final PropertyVisitor _visitor_) {
        super.visit(_visitor_);
        return this;
    }

    public static class Builder<_B >
        extends org.mujoco.xml.MuJoCoDefault.DefaultType.Builder<_B>
        implements Buildable
    {

        private List<Buildable> meshOrMaterialOrJoint;

        public Builder(final _B _parentBuilder, final DefaultType _other, final boolean _copy) {
            super(_parentBuilder, _other, _copy);
            if (_other!= null) {
                if (_other.meshOrMaterialOrJoint == null) {
                    this.meshOrMaterialOrJoint = null;
                } else {
                    this.meshOrMaterialOrJoint = new ArrayList<Buildable>();
                    for (Object _item: _other.meshOrMaterialOrJoint) {
                        this.meshOrMaterialOrJoint.add(((_item == null)?null:new Buildable.PrimitiveBuildable(_item)));
                    }
                }
            }
        }

        public Builder(final _B _parentBuilder, final DefaultType _other, final boolean _copy, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
            super(_parentBuilder, _other, _copy, _propertyTree, _propertyTreeUse);
            if (_other!= null) {
                final PropertyTree meshOrMaterialOrJointPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("meshOrMaterialOrJoint"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(meshOrMaterialOrJointPropertyTree!= null):((meshOrMaterialOrJointPropertyTree == null)||(!meshOrMaterialOrJointPropertyTree.isLeaf())))) {
                    if (_other.meshOrMaterialOrJoint == null) {
                        this.meshOrMaterialOrJoint = null;
                    } else {
                        this.meshOrMaterialOrJoint = new ArrayList<Buildable>();
                        for (Object _item: _other.meshOrMaterialOrJoint) {
                            this.meshOrMaterialOrJoint.add(((_item == null)?null:new Buildable.PrimitiveBuildable(_item)));
                        }
                    }
                }
            }
        }

        protected<_P extends DefaultType >_P init(final _P _product) {
            if (this.meshOrMaterialOrJoint!= null) {
                final List<Object> meshOrMaterialOrJoint = new ArrayList<Object>(this.meshOrMaterialOrJoint.size());
                for (Buildable _item: this.meshOrMaterialOrJoint) {
                    meshOrMaterialOrJoint.add(((Object) _item.build()));
                }
                _product.meshOrMaterialOrJoint = meshOrMaterialOrJoint;
            }
            return super.init(_product);
        }

        /**
         * Adds the given items to the value of "meshOrMaterialOrJoint"
         * 
         * @param meshOrMaterialOrJoint
         *     Items to add to the value of the "meshOrMaterialOrJoint" property
         */
        public DefaultType.Builder<_B> addMeshOrMaterialOrJoint(final Iterable<?> meshOrMaterialOrJoint) {
            if (meshOrMaterialOrJoint!= null) {
                if (this.meshOrMaterialOrJoint == null) {
                    this.meshOrMaterialOrJoint = new ArrayList<Buildable>();
                }
                for (Object _item: meshOrMaterialOrJoint) {
                    this.meshOrMaterialOrJoint.add(new Buildable.PrimitiveBuildable(_item));
                }
            }
            return this;
        }

        /**
         * Sets the new value of "meshOrMaterialOrJoint" (any previous value will be replaced)
         * 
         * @param meshOrMaterialOrJoint
         *     New value of the "meshOrMaterialOrJoint" property.
         */
        public DefaultType.Builder<_B> withMeshOrMaterialOrJoint(final Iterable<?> meshOrMaterialOrJoint) {
            if (this.meshOrMaterialOrJoint!= null) {
                this.meshOrMaterialOrJoint.clear();
            }
            return addMeshOrMaterialOrJoint(meshOrMaterialOrJoint);
        }

        /**
         * Adds the given items to the value of "meshOrMaterialOrJoint"
         * 
         * @param meshOrMaterialOrJoint
         *     Items to add to the value of the "meshOrMaterialOrJoint" property
         */
        public DefaultType.Builder<_B> addMeshOrMaterialOrJoint(Object... meshOrMaterialOrJoint) {
            addMeshOrMaterialOrJoint(Arrays.asList(meshOrMaterialOrJoint));
            return this;
        }

        /**
         * Sets the new value of "meshOrMaterialOrJoint" (any previous value will be replaced)
         * 
         * @param meshOrMaterialOrJoint
         *     New value of the "meshOrMaterialOrJoint" property.
         */
        public DefaultType.Builder<_B> withMeshOrMaterialOrJoint(Object... meshOrMaterialOrJoint) {
            withMeshOrMaterialOrJoint(Arrays.asList(meshOrMaterialOrJoint));
            return this;
        }

        /**
         * Adds the given items to the value of "mesh_"
         * 
         * @param mesh_
         *     Items to add to the value of the "mesh_" property
         */
        public DefaultType.Builder<_B> addMesh(final Iterable<? extends MeshType> mesh_) {
            if (mesh_!= null) {
                if (this.meshOrMaterialOrJoint == null) {
                    this.meshOrMaterialOrJoint = new ArrayList<Buildable>();
                }
                for (MeshType _item: mesh_) {
                    this.meshOrMaterialOrJoint.add(new MeshType.Builder<DefaultType.Builder<_B>>(this, _item, true));
                }
            }
            return this;
        }

        /**
         * Adds the given items to the value of "mesh_"
         * 
         * @param mesh_
         *     Items to add to the value of the "mesh_" property
         */
        public DefaultType.Builder<_B> addMesh(MeshType... mesh_) {
            return addMesh(Arrays.asList(mesh_));
        }

        /**
         * Returns a new builder to build an additional value of the "mesh" property.
         * Use {@link org.mujoco.xml.MuJoCoDefault.MeshType.Builder#end()} to return to the current builder.
         * 
         * @return
         *     a new builder to build an additional value of the "mesh" property.
         *     Use {@link org.mujoco.xml.MuJoCoDefault.MeshType.Builder#end()} to return to the current builder.
         */
        public MeshType.Builder<? extends DefaultType.Builder<_B>> addMesh() {
            if (this.meshOrMaterialOrJoint == null) {
                this.meshOrMaterialOrJoint = new ArrayList<Buildable>();
            }
            final MeshType.Builder<DefaultType.Builder<_B>> mesh_Builder = new MeshType.Builder<DefaultType.Builder<_B>>(this, null, false);
            this.meshOrMaterialOrJoint.add(mesh_Builder);
            return mesh_Builder;
        }

        /**
         * Adds the given items to the value of "material_"
         * 
         * @param material_
         *     Items to add to the value of the "material_" property
         */
        public DefaultType.Builder<_B> addMaterial(final Iterable<? extends MaterialType> material_) {
            if (material_!= null) {
                if (this.meshOrMaterialOrJoint == null) {
                    this.meshOrMaterialOrJoint = new ArrayList<Buildable>();
                }
                for (MaterialType _item: material_) {
                    this.meshOrMaterialOrJoint.add(new MaterialType.Builder<DefaultType.Builder<_B>>(this, _item, true));
                }
            }
            return this;
        }

        /**
         * Adds the given items to the value of "material_"
         * 
         * @param material_
         *     Items to add to the value of the "material_" property
         */
        public DefaultType.Builder<_B> addMaterial(MaterialType... material_) {
            return addMaterial(Arrays.asList(material_));
        }

        /**
         * Returns a new builder to build an additional value of the "material" property.
         * Use {@link org.mujoco.xml.MuJoCoDefault.MaterialType.Builder#end()} to return to the current builder.
         * 
         * @return
         *     a new builder to build an additional value of the "material" property.
         *     Use {@link org.mujoco.xml.MuJoCoDefault.MaterialType.Builder#end()} to return to the current builder.
         */
        public MaterialType.Builder<? extends DefaultType.Builder<_B>> addMaterial() {
            if (this.meshOrMaterialOrJoint == null) {
                this.meshOrMaterialOrJoint = new ArrayList<Buildable>();
            }
            final MaterialType.Builder<DefaultType.Builder<_B>> material_Builder = new MaterialType.Builder<DefaultType.Builder<_B>>(this, null, false);
            this.meshOrMaterialOrJoint.add(material_Builder);
            return material_Builder;
        }

        /**
         * Adds the given items to the value of "joint_"
         * 
         * @param joint_
         *     Items to add to the value of the "joint_" property
         */
        public DefaultType.Builder<_B> addJoint(final Iterable<? extends JointType> joint_) {
            if (joint_!= null) {
                if (this.meshOrMaterialOrJoint == null) {
                    this.meshOrMaterialOrJoint = new ArrayList<Buildable>();
                }
                for (JointType _item: joint_) {
                    this.meshOrMaterialOrJoint.add(new JointType.Builder<DefaultType.Builder<_B>>(this, _item, true));
                }
            }
            return this;
        }

        /**
         * Adds the given items to the value of "joint_"
         * 
         * @param joint_
         *     Items to add to the value of the "joint_" property
         */
        public DefaultType.Builder<_B> addJoint(JointType... joint_) {
            return addJoint(Arrays.asList(joint_));
        }

        /**
         * Returns a new builder to build an additional value of the "joint" property.
         * Use {@link org.mujoco.xml.MuJoCoDefault.JointType.Builder#end()} to return to the current builder.
         * 
         * @return
         *     a new builder to build an additional value of the "joint" property.
         *     Use {@link org.mujoco.xml.MuJoCoDefault.JointType.Builder#end()} to return to the current builder.
         */
        public JointType.Builder<? extends DefaultType.Builder<_B>> addJoint() {
            if (this.meshOrMaterialOrJoint == null) {
                this.meshOrMaterialOrJoint = new ArrayList<Buildable>();
            }
            final JointType.Builder<DefaultType.Builder<_B>> joint_Builder = new JointType.Builder<DefaultType.Builder<_B>>(this, null, false);
            this.meshOrMaterialOrJoint.add(joint_Builder);
            return joint_Builder;
        }

        /**
         * Adds the given items to the value of "geom_"
         * 
         * @param geom_
         *     Items to add to the value of the "geom_" property
         */
        public DefaultType.Builder<_B> addGeom(final Iterable<? extends GeomType> geom_) {
            if (geom_!= null) {
                if (this.meshOrMaterialOrJoint == null) {
                    this.meshOrMaterialOrJoint = new ArrayList<Buildable>();
                }
                for (GeomType _item: geom_) {
                    this.meshOrMaterialOrJoint.add(new GeomType.Builder<DefaultType.Builder<_B>>(this, _item, true));
                }
            }
            return this;
        }

        /**
         * Adds the given items to the value of "geom_"
         * 
         * @param geom_
         *     Items to add to the value of the "geom_" property
         */
        public DefaultType.Builder<_B> addGeom(GeomType... geom_) {
            return addGeom(Arrays.asList(geom_));
        }

        /**
         * Returns a new builder to build an additional value of the "geom" property.
         * Use {@link org.mujoco.xml.MuJoCoDefault.GeomType.Builder#end()} to return to the current builder.
         * 
         * @return
         *     a new builder to build an additional value of the "geom" property.
         *     Use {@link org.mujoco.xml.MuJoCoDefault.GeomType.Builder#end()} to return to the current builder.
         */
        public GeomType.Builder<? extends DefaultType.Builder<_B>> addGeom() {
            if (this.meshOrMaterialOrJoint == null) {
                this.meshOrMaterialOrJoint = new ArrayList<Buildable>();
            }
            final GeomType.Builder<DefaultType.Builder<_B>> geom_Builder = new GeomType.Builder<DefaultType.Builder<_B>>(this, null, false);
            this.meshOrMaterialOrJoint.add(geom_Builder);
            return geom_Builder;
        }

        /**
         * Adds the given items to the value of "site_"
         * 
         * @param site_
         *     Items to add to the value of the "site_" property
         */
        public DefaultType.Builder<_B> addSite(final Iterable<? extends SiteType> site_) {
            if (site_!= null) {
                if (this.meshOrMaterialOrJoint == null) {
                    this.meshOrMaterialOrJoint = new ArrayList<Buildable>();
                }
                for (SiteType _item: site_) {
                    this.meshOrMaterialOrJoint.add(new SiteType.Builder<DefaultType.Builder<_B>>(this, _item, true));
                }
            }
            return this;
        }

        /**
         * Adds the given items to the value of "site_"
         * 
         * @param site_
         *     Items to add to the value of the "site_" property
         */
        public DefaultType.Builder<_B> addSite(SiteType... site_) {
            return addSite(Arrays.asList(site_));
        }

        /**
         * Returns a new builder to build an additional value of the "site" property.
         * Use {@link org.mujoco.xml.MuJoCoDefault.SiteType.Builder#end()} to return to the current builder.
         * 
         * @return
         *     a new builder to build an additional value of the "site" property.
         *     Use {@link org.mujoco.xml.MuJoCoDefault.SiteType.Builder#end()} to return to the current builder.
         */
        public SiteType.Builder<? extends DefaultType.Builder<_B>> addSite() {
            if (this.meshOrMaterialOrJoint == null) {
                this.meshOrMaterialOrJoint = new ArrayList<Buildable>();
            }
            final SiteType.Builder<DefaultType.Builder<_B>> site_Builder = new SiteType.Builder<DefaultType.Builder<_B>>(this, null, false);
            this.meshOrMaterialOrJoint.add(site_Builder);
            return site_Builder;
        }

        /**
         * Adds the given items to the value of "camera_"
         * 
         * @param camera_
         *     Items to add to the value of the "camera_" property
         */
        public DefaultType.Builder<_B> addCamera(final Iterable<? extends CameraType> camera_) {
            if (camera_!= null) {
                if (this.meshOrMaterialOrJoint == null) {
                    this.meshOrMaterialOrJoint = new ArrayList<Buildable>();
                }
                for (CameraType _item: camera_) {
                    this.meshOrMaterialOrJoint.add(new CameraType.Builder<DefaultType.Builder<_B>>(this, _item, true));
                }
            }
            return this;
        }

        /**
         * Adds the given items to the value of "camera_"
         * 
         * @param camera_
         *     Items to add to the value of the "camera_" property
         */
        public DefaultType.Builder<_B> addCamera(CameraType... camera_) {
            return addCamera(Arrays.asList(camera_));
        }

        /**
         * Returns a new builder to build an additional value of the "camera" property.
         * Use {@link org.mujoco.xml.MuJoCoDefault.CameraType.Builder#end()} to return to the current builder.
         * 
         * @return
         *     a new builder to build an additional value of the "camera" property.
         *     Use {@link org.mujoco.xml.MuJoCoDefault.CameraType.Builder#end()} to return to the current builder.
         */
        public CameraType.Builder<? extends DefaultType.Builder<_B>> addCamera() {
            if (this.meshOrMaterialOrJoint == null) {
                this.meshOrMaterialOrJoint = new ArrayList<Buildable>();
            }
            final CameraType.Builder<DefaultType.Builder<_B>> camera_Builder = new CameraType.Builder<DefaultType.Builder<_B>>(this, null, false);
            this.meshOrMaterialOrJoint.add(camera_Builder);
            return camera_Builder;
        }

        /**
         * Adds the given items to the value of "light_"
         * 
         * @param light_
         *     Items to add to the value of the "light_" property
         */
        public DefaultType.Builder<_B> addLight(final Iterable<? extends LightType> light_) {
            if (light_!= null) {
                if (this.meshOrMaterialOrJoint == null) {
                    this.meshOrMaterialOrJoint = new ArrayList<Buildable>();
                }
                for (LightType _item: light_) {
                    this.meshOrMaterialOrJoint.add(new LightType.Builder<DefaultType.Builder<_B>>(this, _item, true));
                }
            }
            return this;
        }

        /**
         * Adds the given items to the value of "light_"
         * 
         * @param light_
         *     Items to add to the value of the "light_" property
         */
        public DefaultType.Builder<_B> addLight(LightType... light_) {
            return addLight(Arrays.asList(light_));
        }

        /**
         * Returns a new builder to build an additional value of the "light" property.
         * Use {@link org.mujoco.xml.MuJoCoDefault.LightType.Builder#end()} to return to the current builder.
         * 
         * @return
         *     a new builder to build an additional value of the "light" property.
         *     Use {@link org.mujoco.xml.MuJoCoDefault.LightType.Builder#end()} to return to the current builder.
         */
        public LightType.Builder<? extends DefaultType.Builder<_B>> addLight() {
            if (this.meshOrMaterialOrJoint == null) {
                this.meshOrMaterialOrJoint = new ArrayList<Buildable>();
            }
            final LightType.Builder<DefaultType.Builder<_B>> light_Builder = new LightType.Builder<DefaultType.Builder<_B>>(this, null, false);
            this.meshOrMaterialOrJoint.add(light_Builder);
            return light_Builder;
        }

        /**
         * Adds the given items to the value of "pair_"
         * 
         * @param pair_
         *     Items to add to the value of the "pair_" property
         */
        public DefaultType.Builder<_B> addPair(final Iterable<? extends PairType> pair_) {
            if (pair_!= null) {
                if (this.meshOrMaterialOrJoint == null) {
                    this.meshOrMaterialOrJoint = new ArrayList<Buildable>();
                }
                for (PairType _item: pair_) {
                    this.meshOrMaterialOrJoint.add(new PairType.Builder<DefaultType.Builder<_B>>(this, _item, true));
                }
            }
            return this;
        }

        /**
         * Adds the given items to the value of "pair_"
         * 
         * @param pair_
         *     Items to add to the value of the "pair_" property
         */
        public DefaultType.Builder<_B> addPair(PairType... pair_) {
            return addPair(Arrays.asList(pair_));
        }

        /**
         * Returns a new builder to build an additional value of the "pair" property.
         * Use {@link org.mujoco.xml.MuJoCoDefault.PairType.Builder#end()} to return to the current builder.
         * 
         * @return
         *     a new builder to build an additional value of the "pair" property.
         *     Use {@link org.mujoco.xml.MuJoCoDefault.PairType.Builder#end()} to return to the current builder.
         */
        public PairType.Builder<? extends DefaultType.Builder<_B>> addPair() {
            if (this.meshOrMaterialOrJoint == null) {
                this.meshOrMaterialOrJoint = new ArrayList<Buildable>();
            }
            final PairType.Builder<DefaultType.Builder<_B>> pair_Builder = new PairType.Builder<DefaultType.Builder<_B>>(this, null, false);
            this.meshOrMaterialOrJoint.add(pair_Builder);
            return pair_Builder;
        }

        /**
         * Adds the given items to the value of "equality_"
         * 
         * @param equality_
         *     Items to add to the value of the "equality_" property
         */
        public DefaultType.Builder<_B> addEquality(final Iterable<? extends EqualityType> equality_) {
            if (equality_!= null) {
                if (this.meshOrMaterialOrJoint == null) {
                    this.meshOrMaterialOrJoint = new ArrayList<Buildable>();
                }
                for (EqualityType _item: equality_) {
                    this.meshOrMaterialOrJoint.add(new EqualityType.Builder<DefaultType.Builder<_B>>(this, _item, true));
                }
            }
            return this;
        }

        /**
         * Adds the given items to the value of "equality_"
         * 
         * @param equality_
         *     Items to add to the value of the "equality_" property
         */
        public DefaultType.Builder<_B> addEquality(EqualityType... equality_) {
            return addEquality(Arrays.asList(equality_));
        }

        /**
         * Returns a new builder to build an additional value of the "equality" property.
         * Use {@link org.mujoco.xml.MuJoCoDefault.EqualityType.Builder#end()} to return to the current builder.
         * 
         * @return
         *     a new builder to build an additional value of the "equality" property.
         *     Use {@link org.mujoco.xml.MuJoCoDefault.EqualityType.Builder#end()} to return to the current builder.
         */
        public EqualityType.Builder<? extends DefaultType.Builder<_B>> addEquality() {
            if (this.meshOrMaterialOrJoint == null) {
                this.meshOrMaterialOrJoint = new ArrayList<Buildable>();
            }
            final EqualityType.Builder<DefaultType.Builder<_B>> equality_Builder = new EqualityType.Builder<DefaultType.Builder<_B>>(this, null, false);
            this.meshOrMaterialOrJoint.add(equality_Builder);
            return equality_Builder;
        }

        /**
         * Adds the given items to the value of "tendon_"
         * 
         * @param tendon_
         *     Items to add to the value of the "tendon_" property
         */
        public DefaultType.Builder<_B> addTendon(final Iterable<? extends TendonType> tendon_) {
            if (tendon_!= null) {
                if (this.meshOrMaterialOrJoint == null) {
                    this.meshOrMaterialOrJoint = new ArrayList<Buildable>();
                }
                for (TendonType _item: tendon_) {
                    this.meshOrMaterialOrJoint.add(new TendonType.Builder<DefaultType.Builder<_B>>(this, _item, true));
                }
            }
            return this;
        }

        /**
         * Adds the given items to the value of "tendon_"
         * 
         * @param tendon_
         *     Items to add to the value of the "tendon_" property
         */
        public DefaultType.Builder<_B> addTendon(TendonType... tendon_) {
            return addTendon(Arrays.asList(tendon_));
        }

        /**
         * Returns a new builder to build an additional value of the "tendon" property.
         * Use {@link org.mujoco.xml.MuJoCoDefault.TendonType.Builder#end()} to return to the current builder.
         * 
         * @return
         *     a new builder to build an additional value of the "tendon" property.
         *     Use {@link org.mujoco.xml.MuJoCoDefault.TendonType.Builder#end()} to return to the current builder.
         */
        public TendonType.Builder<? extends DefaultType.Builder<_B>> addTendon() {
            if (this.meshOrMaterialOrJoint == null) {
                this.meshOrMaterialOrJoint = new ArrayList<Buildable>();
            }
            final TendonType.Builder<DefaultType.Builder<_B>> tendon_Builder = new TendonType.Builder<DefaultType.Builder<_B>>(this, null, false);
            this.meshOrMaterialOrJoint.add(tendon_Builder);
            return tendon_Builder;
        }

        /**
         * Adds the given items to the value of "general_"
         * 
         * @param general_
         *     Items to add to the value of the "general_" property
         */
        public DefaultType.Builder<_B> addGeneral(final Iterable<? extends GeneralType> general_) {
            if (general_!= null) {
                if (this.meshOrMaterialOrJoint == null) {
                    this.meshOrMaterialOrJoint = new ArrayList<Buildable>();
                }
                for (GeneralType _item: general_) {
                    this.meshOrMaterialOrJoint.add(new GeneralType.Builder<DefaultType.Builder<_B>>(this, _item, true));
                }
            }
            return this;
        }

        /**
         * Adds the given items to the value of "general_"
         * 
         * @param general_
         *     Items to add to the value of the "general_" property
         */
        public DefaultType.Builder<_B> addGeneral(GeneralType... general_) {
            return addGeneral(Arrays.asList(general_));
        }

        /**
         * Returns a new builder to build an additional value of the "general" property.
         * Use {@link org.mujoco.xml.MuJoCoDefault.GeneralType.Builder#end()} to return to the current builder.
         * 
         * @return
         *     a new builder to build an additional value of the "general" property.
         *     Use {@link org.mujoco.xml.MuJoCoDefault.GeneralType.Builder#end()} to return to the current builder.
         */
        public GeneralType.Builder<? extends DefaultType.Builder<_B>> addGeneral() {
            if (this.meshOrMaterialOrJoint == null) {
                this.meshOrMaterialOrJoint = new ArrayList<Buildable>();
            }
            final GeneralType.Builder<DefaultType.Builder<_B>> general_Builder = new GeneralType.Builder<DefaultType.Builder<_B>>(this, null, false);
            this.meshOrMaterialOrJoint.add(general_Builder);
            return general_Builder;
        }

        /**
         * Adds the given items to the value of "motor_"
         * 
         * @param motor_
         *     Items to add to the value of the "motor_" property
         */
        public DefaultType.Builder<_B> addMotor(final Iterable<? extends MotorType> motor_) {
            if (motor_!= null) {
                if (this.meshOrMaterialOrJoint == null) {
                    this.meshOrMaterialOrJoint = new ArrayList<Buildable>();
                }
                for (MotorType _item: motor_) {
                    this.meshOrMaterialOrJoint.add(new MotorType.Builder<DefaultType.Builder<_B>>(this, _item, true));
                }
            }
            return this;
        }

        /**
         * Adds the given items to the value of "motor_"
         * 
         * @param motor_
         *     Items to add to the value of the "motor_" property
         */
        public DefaultType.Builder<_B> addMotor(MotorType... motor_) {
            return addMotor(Arrays.asList(motor_));
        }

        /**
         * Returns a new builder to build an additional value of the "motor" property.
         * Use {@link org.mujoco.xml.MuJoCoDefault.MotorType.Builder#end()} to return to the current builder.
         * 
         * @return
         *     a new builder to build an additional value of the "motor" property.
         *     Use {@link org.mujoco.xml.MuJoCoDefault.MotorType.Builder#end()} to return to the current builder.
         */
        public MotorType.Builder<? extends DefaultType.Builder<_B>> addMotor() {
            if (this.meshOrMaterialOrJoint == null) {
                this.meshOrMaterialOrJoint = new ArrayList<Buildable>();
            }
            final MotorType.Builder<DefaultType.Builder<_B>> motor_Builder = new MotorType.Builder<DefaultType.Builder<_B>>(this, null, false);
            this.meshOrMaterialOrJoint.add(motor_Builder);
            return motor_Builder;
        }

        /**
         * Adds the given items to the value of "position_"
         * 
         * @param position_
         *     Items to add to the value of the "position_" property
         */
        public DefaultType.Builder<_B> addPosition(final Iterable<? extends PositionType> position_) {
            if (position_!= null) {
                if (this.meshOrMaterialOrJoint == null) {
                    this.meshOrMaterialOrJoint = new ArrayList<Buildable>();
                }
                for (PositionType _item: position_) {
                    this.meshOrMaterialOrJoint.add(new PositionType.Builder<DefaultType.Builder<_B>>(this, _item, true));
                }
            }
            return this;
        }

        /**
         * Adds the given items to the value of "position_"
         * 
         * @param position_
         *     Items to add to the value of the "position_" property
         */
        public DefaultType.Builder<_B> addPosition(PositionType... position_) {
            return addPosition(Arrays.asList(position_));
        }

        /**
         * Returns a new builder to build an additional value of the "position" property.
         * Use {@link org.mujoco.xml.MuJoCoDefault.PositionType.Builder#end()} to return to the current builder.
         * 
         * @return
         *     a new builder to build an additional value of the "position" property.
         *     Use {@link org.mujoco.xml.MuJoCoDefault.PositionType.Builder#end()} to return to the current builder.
         */
        public PositionType.Builder<? extends DefaultType.Builder<_B>> addPosition() {
            if (this.meshOrMaterialOrJoint == null) {
                this.meshOrMaterialOrJoint = new ArrayList<Buildable>();
            }
            final PositionType.Builder<DefaultType.Builder<_B>> position_Builder = new PositionType.Builder<DefaultType.Builder<_B>>(this, null, false);
            this.meshOrMaterialOrJoint.add(position_Builder);
            return position_Builder;
        }

        /**
         * Adds the given items to the value of "velocity_"
         * 
         * @param velocity_
         *     Items to add to the value of the "velocity_" property
         */
        public DefaultType.Builder<_B> addVelocity(final Iterable<? extends VelocityType> velocity_) {
            if (velocity_!= null) {
                if (this.meshOrMaterialOrJoint == null) {
                    this.meshOrMaterialOrJoint = new ArrayList<Buildable>();
                }
                for (VelocityType _item: velocity_) {
                    this.meshOrMaterialOrJoint.add(new VelocityType.Builder<DefaultType.Builder<_B>>(this, _item, true));
                }
            }
            return this;
        }

        /**
         * Adds the given items to the value of "velocity_"
         * 
         * @param velocity_
         *     Items to add to the value of the "velocity_" property
         */
        public DefaultType.Builder<_B> addVelocity(VelocityType... velocity_) {
            return addVelocity(Arrays.asList(velocity_));
        }

        /**
         * Returns a new builder to build an additional value of the "velocity" property.
         * Use {@link org.mujoco.xml.MuJoCoDefault.VelocityType.Builder#end()} to return to the current builder.
         * 
         * @return
         *     a new builder to build an additional value of the "velocity" property.
         *     Use {@link org.mujoco.xml.MuJoCoDefault.VelocityType.Builder#end()} to return to the current builder.
         */
        public VelocityType.Builder<? extends DefaultType.Builder<_B>> addVelocity() {
            if (this.meshOrMaterialOrJoint == null) {
                this.meshOrMaterialOrJoint = new ArrayList<Buildable>();
            }
            final VelocityType.Builder<DefaultType.Builder<_B>> velocity_Builder = new VelocityType.Builder<DefaultType.Builder<_B>>(this, null, false);
            this.meshOrMaterialOrJoint.add(velocity_Builder);
            return velocity_Builder;
        }

        /**
         * Adds the given items to the value of "cylinder_"
         * 
         * @param cylinder_
         *     Items to add to the value of the "cylinder_" property
         */
        public DefaultType.Builder<_B> addCylinder(final Iterable<? extends CylinderType> cylinder_) {
            if (cylinder_!= null) {
                if (this.meshOrMaterialOrJoint == null) {
                    this.meshOrMaterialOrJoint = new ArrayList<Buildable>();
                }
                for (CylinderType _item: cylinder_) {
                    this.meshOrMaterialOrJoint.add(new CylinderType.Builder<DefaultType.Builder<_B>>(this, _item, true));
                }
            }
            return this;
        }

        /**
         * Adds the given items to the value of "cylinder_"
         * 
         * @param cylinder_
         *     Items to add to the value of the "cylinder_" property
         */
        public DefaultType.Builder<_B> addCylinder(CylinderType... cylinder_) {
            return addCylinder(Arrays.asList(cylinder_));
        }

        /**
         * Returns a new builder to build an additional value of the "cylinder" property.
         * Use {@link org.mujoco.xml.MuJoCoDefault.CylinderType.Builder#end()} to return to the current builder.
         * 
         * @return
         *     a new builder to build an additional value of the "cylinder" property.
         *     Use {@link org.mujoco.xml.MuJoCoDefault.CylinderType.Builder#end()} to return to the current builder.
         */
        public CylinderType.Builder<? extends DefaultType.Builder<_B>> addCylinder() {
            if (this.meshOrMaterialOrJoint == null) {
                this.meshOrMaterialOrJoint = new ArrayList<Buildable>();
            }
            final CylinderType.Builder<DefaultType.Builder<_B>> cylinder_Builder = new CylinderType.Builder<DefaultType.Builder<_B>>(this, null, false);
            this.meshOrMaterialOrJoint.add(cylinder_Builder);
            return cylinder_Builder;
        }

        /**
         * Adds the given items to the value of "muscle_"
         * 
         * @param muscle_
         *     Items to add to the value of the "muscle_" property
         */
        public DefaultType.Builder<_B> addMuscle(final Iterable<? extends MuscleType> muscle_) {
            if (muscle_!= null) {
                if (this.meshOrMaterialOrJoint == null) {
                    this.meshOrMaterialOrJoint = new ArrayList<Buildable>();
                }
                for (MuscleType _item: muscle_) {
                    this.meshOrMaterialOrJoint.add(new MuscleType.Builder<DefaultType.Builder<_B>>(this, _item, true));
                }
            }
            return this;
        }

        /**
         * Adds the given items to the value of "muscle_"
         * 
         * @param muscle_
         *     Items to add to the value of the "muscle_" property
         */
        public DefaultType.Builder<_B> addMuscle(MuscleType... muscle_) {
            return addMuscle(Arrays.asList(muscle_));
        }

        /**
         * Returns a new builder to build an additional value of the "muscle" property.
         * Use {@link org.mujoco.xml.MuJoCoDefault.MuscleType.Builder#end()} to return to the current builder.
         * 
         * @return
         *     a new builder to build an additional value of the "muscle" property.
         *     Use {@link org.mujoco.xml.MuJoCoDefault.MuscleType.Builder#end()} to return to the current builder.
         */
        public MuscleType.Builder<? extends DefaultType.Builder<_B>> addMuscle() {
            if (this.meshOrMaterialOrJoint == null) {
                this.meshOrMaterialOrJoint = new ArrayList<Buildable>();
            }
            final MuscleType.Builder<DefaultType.Builder<_B>> muscle_Builder = new MuscleType.Builder<DefaultType.Builder<_B>>(this, null, false);
            this.meshOrMaterialOrJoint.add(muscle_Builder);
            return muscle_Builder;
        }

        /**
         * Adds the given items to the value of "default_"
         * 
         * @param default_
         *     Items to add to the value of the "default_" property
         */
        public DefaultType.Builder<_B> addDefault(final Iterable<? extends DefaultType> default_) {
            if (default_!= null) {
                if (this.meshOrMaterialOrJoint == null) {
                    this.meshOrMaterialOrJoint = new ArrayList<Buildable>();
                }
                for (DefaultType _item: default_) {
                    this.meshOrMaterialOrJoint.add(new DefaultType.Builder<DefaultType.Builder<_B>>(this, _item, true));
                }
            }
            return this;
        }

        /**
         * Adds the given items to the value of "default_"
         * 
         * @param default_
         *     Items to add to the value of the "default_" property
         */
        public DefaultType.Builder<_B> addDefault(DefaultType... default_) {
            return addDefault(Arrays.asList(default_));
        }

        /**
         * Returns a new builder to build an additional value of the "default" property.
         * Use {@link org.mujoco.xml.DefaultType.Builder#end()} to return to the current builder.
         * 
         * @return
         *     a new builder to build an additional value of the "default" property.
         *     Use {@link org.mujoco.xml.DefaultType.Builder#end()} to return to the current builder.
         */
        public DefaultType.Builder<? extends DefaultType.Builder<_B>> addDefault() {
            if (this.meshOrMaterialOrJoint == null) {
                this.meshOrMaterialOrJoint = new ArrayList<Buildable>();
            }
            final DefaultType.Builder<DefaultType.Builder<_B>> default_Builder = new DefaultType.Builder<DefaultType.Builder<_B>>(this, null, false);
            this.meshOrMaterialOrJoint.add(default_Builder);
            return default_Builder;
        }

        /**
         * Adds the given items to the value of "include_"
         * 
         * @param include_
         *     Items to add to the value of the "include_" property
         */
        public DefaultType.Builder<_B> addInclude(final Iterable<? extends IncludeType> include_) {
            if (include_!= null) {
                if (this.meshOrMaterialOrJoint == null) {
                    this.meshOrMaterialOrJoint = new ArrayList<Buildable>();
                }
                for (IncludeType _item: include_) {
                    this.meshOrMaterialOrJoint.add(new IncludeType.Builder<DefaultType.Builder<_B>>(this, _item, true));
                }
            }
            return this;
        }

        /**
         * Adds the given items to the value of "include_"
         * 
         * @param include_
         *     Items to add to the value of the "include_" property
         */
        public DefaultType.Builder<_B> addInclude(IncludeType... include_) {
            return addInclude(Arrays.asList(include_));
        }

        /**
         * Returns a new builder to build an additional value of the "include" property.
         * Use {@link org.mujoco.xml.root.IncludeType.Builder#end()} to return to the current builder.
         * 
         * @return
         *     a new builder to build an additional value of the "include" property.
         *     Use {@link org.mujoco.xml.root.IncludeType.Builder#end()} to return to the current builder.
         */
        public IncludeType.Builder<? extends DefaultType.Builder<_B>> addInclude() {
            if (this.meshOrMaterialOrJoint == null) {
                this.meshOrMaterialOrJoint = new ArrayList<Buildable>();
            }
            final IncludeType.Builder<DefaultType.Builder<_B>> include_Builder = new IncludeType.Builder<DefaultType.Builder<_B>>(this, null, false);
            this.meshOrMaterialOrJoint.add(include_Builder);
            return include_Builder;
        }

        /**
         * Sets the new value of "clazz" (any previous value will be replaced)
         * 
         * @param clazz
         *     New value of the "clazz" property.
         */
        @Override
        public DefaultType.Builder<_B> withClazz(final String clazz) {
            super.withClazz(clazz);
            return this;
        }

        @Override
        public DefaultType build() {
            return this.init(new DefaultType());
        }

        public DefaultType.Builder<_B> copyOf(final DefaultType _other) {
            _other.copyTo(this);
            return this;
        }

        public DefaultType.Builder<_B> copyOf(final DefaultType.Builder _other) {
            return copyOf(_other.build());
        }

    }

    public static class PropInfo {

        public final static transient String MESH_OR_MATERIAL_OR_JOINT = "meshOrMaterialOrJoint";

    }

    public static class Select
        extends DefaultType.Selector<DefaultType.Select, Void>
    {


        Select() {
            super(null, null, null);
        }

        public static DefaultType.Select _root() {
            return new DefaultType.Select();
        }

    }

    public static class Selector<TRoot extends com.kscs.util.jaxb.Selector<TRoot, ?> , TParent >
        extends org.mujoco.xml.MuJoCoDefault.DefaultType.Selector<TRoot, TParent>
    {

        private com.kscs.util.jaxb.Selector<TRoot, DefaultType.Selector<TRoot, TParent>> meshOrMaterialOrJoint = null;

        public Selector(final TRoot root, final TParent parent, final String propertyName) {
            super(root, parent, propertyName);
        }

        @Override
        public Map<String, PropertyTree> buildChildren() {
            final Map<String, PropertyTree> products = new HashMap<String, PropertyTree>();
            products.putAll(super.buildChildren());
            if (this.meshOrMaterialOrJoint!= null) {
                products.put("meshOrMaterialOrJoint", this.meshOrMaterialOrJoint.init());
            }
            return products;
        }

        public com.kscs.util.jaxb.Selector<TRoot, DefaultType.Selector<TRoot, TParent>> meshOrMaterialOrJoint() {
            return ((this.meshOrMaterialOrJoint == null)?this.meshOrMaterialOrJoint = new com.kscs.util.jaxb.Selector<TRoot, DefaultType.Selector<TRoot, TParent>>(this._root, this, "meshOrMaterialOrJoint"):this.meshOrMaterialOrJoint);
        }

    }

}
