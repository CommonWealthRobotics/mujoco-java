//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.3.0 
// See <a href="https://javaee.github.io/jaxb-v2/">https://javaee.github.io/jaxb-v2/</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2024.03.13 at 04:36:46 PM EDT 
//


package org.mujoco.xml.body;

import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeSupport;
import java.beans.PropertyVetoException;
import java.beans.VetoableChangeListener;
import java.beans.VetoableChangeSupport;
import java.math.BigDecimal;
import java.util.HashMap;
import java.util.Map;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlType;
import com.kscs.util.jaxb.Buildable;
import com.kscs.util.jaxb.Copyable;
import com.kscs.util.jaxb.PartialCopyable;
import com.kscs.util.jaxb.PropertyTree;
import com.kscs.util.jaxb.PropertyTreeUse;
import com.kscs.util.jaxb.PropertyVisitor;


/**
 * <p>Java class for inertialType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="inertialType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;attribute name="pos" use="required" type="{attributeTypes}threeRealsType" /&gt;
 *       &lt;attribute name="quat" type="{attributeTypes}fourRealsType" default="1 0 0 0" /&gt;
 *       &lt;attribute name="axisangle" type="{attributeTypes}fourRealsType" /&gt;
 *       &lt;attribute name="euler" type="{attributeTypes}threeRealsType" /&gt;
 *       &lt;attribute name="xyaxes" type="{attributeTypes}sixRealsType" /&gt;
 *       &lt;attribute name="zaxis" type="{attributeTypes}threeRealsType" /&gt;
 *       &lt;attribute name="mass" use="required" type="{http://www.w3.org/2001/XMLSchema}decimal" /&gt;
 *       &lt;attribute name="diaginertia" type="{attributeTypes}threeRealsType" /&gt;
 *       &lt;attribute name="fullinertia" type="{attributeTypes}sixRealsType" /&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "inertialType")
public class InertialType implements Cloneable, Copyable, PartialCopyable
{

    @XmlAttribute(name = "pos", required = true)
    protected String pos;
    @XmlAttribute(name = "quat")
    protected String quat;
    @XmlAttribute(name = "axisangle")
    protected String axisangle;
    @XmlAttribute(name = "euler")
    protected String euler;
    @XmlAttribute(name = "xyaxes")
    protected String xyaxes;
    @XmlAttribute(name = "zaxis")
    protected String zaxis;
    @XmlAttribute(name = "mass", required = true)
    protected BigDecimal mass;
    @XmlAttribute(name = "diaginertia")
    protected String diaginertia;
    @XmlAttribute(name = "fullinertia")
    protected String fullinertia;
    protected final transient VetoableChangeSupport vetoableChange__Support = new VetoableChangeSupport(this);
    protected final transient PropertyChangeSupport propertyChange__Support = new PropertyChangeSupport(this);

    /**
     * Generated by copy-constructor plugin, JAXB requires public no-arg constructor.
     * 
     */
    public InertialType() {
        // Generated by copy-constructor plugin, JAXB requires public no-arg constructor.
    }

    /**
     * Instantiates a InertialType copying the state of another InertialType
     * 
     * @param _other
     *     The original InertialType from which to copy state.
     */
    public InertialType(final InertialType _other) {
        this.pos = _other.pos;
        this.quat = _other.quat;
        this.axisangle = _other.axisangle;
        this.euler = _other.euler;
        this.xyaxes = _other.xyaxes;
        this.zaxis = _other.zaxis;
        this.mass = _other.mass;
        this.diaginertia = _other.diaginertia;
        this.fullinertia = _other.fullinertia;
    }

    /**
     * Instantiates a InertialType copying the state of another InertialType
     * 
     * @param _propertyTreeUse
     *     Meaning of the {@link PropertyPath}: Exclude or include members contained in property path.
     * @param _propertyTree
     *     A restricting {@link PropertyPath} that defines which nodes of the source object tree should actually be copied.
     * @param _other
     *     The original InertialType from which to copy state.
     */
    public InertialType(final InertialType _other, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        final PropertyTree posPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("pos"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(posPropertyTree!= null):((posPropertyTree == null)||(!posPropertyTree.isLeaf())))) {
            this.pos = _other.pos;
        }
        final PropertyTree quatPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("quat"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(quatPropertyTree!= null):((quatPropertyTree == null)||(!quatPropertyTree.isLeaf())))) {
            this.quat = _other.quat;
        }
        final PropertyTree axisanglePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("axisangle"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(axisanglePropertyTree!= null):((axisanglePropertyTree == null)||(!axisanglePropertyTree.isLeaf())))) {
            this.axisangle = _other.axisangle;
        }
        final PropertyTree eulerPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("euler"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(eulerPropertyTree!= null):((eulerPropertyTree == null)||(!eulerPropertyTree.isLeaf())))) {
            this.euler = _other.euler;
        }
        final PropertyTree xyaxesPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("xyaxes"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(xyaxesPropertyTree!= null):((xyaxesPropertyTree == null)||(!xyaxesPropertyTree.isLeaf())))) {
            this.xyaxes = _other.xyaxes;
        }
        final PropertyTree zaxisPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("zaxis"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(zaxisPropertyTree!= null):((zaxisPropertyTree == null)||(!zaxisPropertyTree.isLeaf())))) {
            this.zaxis = _other.zaxis;
        }
        final PropertyTree massPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("mass"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(massPropertyTree!= null):((massPropertyTree == null)||(!massPropertyTree.isLeaf())))) {
            this.mass = _other.mass;
        }
        final PropertyTree diaginertiaPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("diaginertia"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(diaginertiaPropertyTree!= null):((diaginertiaPropertyTree == null)||(!diaginertiaPropertyTree.isLeaf())))) {
            this.diaginertia = _other.diaginertia;
        }
        final PropertyTree fullinertiaPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("fullinertia"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(fullinertiaPropertyTree!= null):((fullinertiaPropertyTree == null)||(!fullinertiaPropertyTree.isLeaf())))) {
            this.fullinertia = _other.fullinertia;
        }
    }

    /**
     * Gets the value of the pos property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getPos() {
        return pos;
    }

    /**
     * Gets the value of the quat property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getQuat() {
        if (quat == null) {
            return "1 0 0 0";
        } else {
            return quat;
        }
    }

    /**
     * Gets the value of the axisangle property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getAxisangle() {
        return axisangle;
    }

    /**
     * Gets the value of the euler property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getEuler() {
        return euler;
    }

    /**
     * Gets the value of the xyaxes property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getXyaxes() {
        return xyaxes;
    }

    /**
     * Gets the value of the zaxis property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getZaxis() {
        return zaxis;
    }

    /**
     * Gets the value of the mass property.
     * 
     * @return
     *     possible object is
     *     {@link BigDecimal }
     *     
     */
    public BigDecimal getMass() {
        return mass;
    }

    /**
     * Gets the value of the diaginertia property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getDiaginertia() {
        return diaginertia;
    }

    /**
     * Gets the value of the fullinertia property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getFullinertia() {
        return fullinertia;
    }

    public void addVetoableChangeListener(final VetoableChangeListener vetoableChangeListener) {
        this.vetoableChange__Support.addVetoableChangeListener(vetoableChangeListener);
    }

    public void removeVetoableChangeListener(final VetoableChangeListener vetoableChangeListener) {
        this.vetoableChange__Support.removeVetoableChangeListener(vetoableChangeListener);
    }

    public InertialType withVetoableChangeListener(final VetoableChangeListener vetoableChangeListener) {
        addVetoableChangeListener(vetoableChangeListener);
        return this;
    }

    public void addPropertyChangeListener(final PropertyChangeListener propertyChangeListener) {
        this.propertyChange__Support.addPropertyChangeListener(propertyChangeListener);
    }

    public void removePropertyChangeListener(final PropertyChangeListener propertyChangeListener) {
        this.propertyChange__Support.removePropertyChangeListener(propertyChangeListener);
    }

    public InertialType withPropertyChangeListener(final PropertyChangeListener propertyChangeListener) {
        addPropertyChangeListener(propertyChangeListener);
        return this;
    }

    public void setPos(final String value) {
        final String __oldValue = this.pos;
        try {
            this.vetoableChange__Support.fireVetoableChange("pos", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.pos = value;
        this.propertyChange__Support.firePropertyChange("pos", __oldValue, value);
    }

    public void setQuat(final String value) {
        final String __oldValue = this.quat;
        try {
            this.vetoableChange__Support.fireVetoableChange("quat", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.quat = value;
        this.propertyChange__Support.firePropertyChange("quat", __oldValue, value);
    }

    public void setAxisangle(final String value) {
        final String __oldValue = this.axisangle;
        try {
            this.vetoableChange__Support.fireVetoableChange("axisangle", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.axisangle = value;
        this.propertyChange__Support.firePropertyChange("axisangle", __oldValue, value);
    }

    public void setEuler(final String value) {
        final String __oldValue = this.euler;
        try {
            this.vetoableChange__Support.fireVetoableChange("euler", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.euler = value;
        this.propertyChange__Support.firePropertyChange("euler", __oldValue, value);
    }

    public void setXyaxes(final String value) {
        final String __oldValue = this.xyaxes;
        try {
            this.vetoableChange__Support.fireVetoableChange("xyaxes", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.xyaxes = value;
        this.propertyChange__Support.firePropertyChange("xyaxes", __oldValue, value);
    }

    public void setZaxis(final String value) {
        final String __oldValue = this.zaxis;
        try {
            this.vetoableChange__Support.fireVetoableChange("zaxis", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.zaxis = value;
        this.propertyChange__Support.firePropertyChange("zaxis", __oldValue, value);
    }

    public void setMass(final BigDecimal value) {
        final BigDecimal __oldValue = this.mass;
        try {
            this.vetoableChange__Support.fireVetoableChange("mass", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.mass = value;
        this.propertyChange__Support.firePropertyChange("mass", __oldValue, value);
    }

    public void setDiaginertia(final String value) {
        final String __oldValue = this.diaginertia;
        try {
            this.vetoableChange__Support.fireVetoableChange("diaginertia", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.diaginertia = value;
        this.propertyChange__Support.firePropertyChange("diaginertia", __oldValue, value);
    }

    public void setFullinertia(final String value) {
        final String __oldValue = this.fullinertia;
        try {
            this.vetoableChange__Support.fireVetoableChange("fullinertia", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.fullinertia = value;
        this.propertyChange__Support.firePropertyChange("fullinertia", __oldValue, value);
    }

    @Override
    public InertialType clone() {
        final InertialType _newObject;
        try {
            _newObject = ((InertialType) super.clone());
        } catch (CloneNotSupportedException e) {
            throw new RuntimeException(e);
        }
        return _newObject;
    }

    @Override
    public InertialType createCopy() {
        final InertialType _newObject;
        try {
            _newObject = ((InertialType) super.clone());
        } catch (CloneNotSupportedException e) {
            throw new RuntimeException(e);
        }
        _newObject.pos = this.pos;
        _newObject.quat = this.quat;
        _newObject.axisangle = this.axisangle;
        _newObject.euler = this.euler;
        _newObject.xyaxes = this.xyaxes;
        _newObject.zaxis = this.zaxis;
        _newObject.mass = this.mass;
        _newObject.diaginertia = this.diaginertia;
        _newObject.fullinertia = this.fullinertia;
        return _newObject;
    }

    @Override
    public InertialType createCopy(final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        final InertialType _newObject;
        try {
            _newObject = ((InertialType) super.clone());
        } catch (CloneNotSupportedException e) {
            throw new RuntimeException(e);
        }
        final PropertyTree posPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("pos"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(posPropertyTree!= null):((posPropertyTree == null)||(!posPropertyTree.isLeaf())))) {
            _newObject.pos = this.pos;
        }
        final PropertyTree quatPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("quat"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(quatPropertyTree!= null):((quatPropertyTree == null)||(!quatPropertyTree.isLeaf())))) {
            _newObject.quat = this.quat;
        }
        final PropertyTree axisanglePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("axisangle"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(axisanglePropertyTree!= null):((axisanglePropertyTree == null)||(!axisanglePropertyTree.isLeaf())))) {
            _newObject.axisangle = this.axisangle;
        }
        final PropertyTree eulerPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("euler"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(eulerPropertyTree!= null):((eulerPropertyTree == null)||(!eulerPropertyTree.isLeaf())))) {
            _newObject.euler = this.euler;
        }
        final PropertyTree xyaxesPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("xyaxes"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(xyaxesPropertyTree!= null):((xyaxesPropertyTree == null)||(!xyaxesPropertyTree.isLeaf())))) {
            _newObject.xyaxes = this.xyaxes;
        }
        final PropertyTree zaxisPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("zaxis"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(zaxisPropertyTree!= null):((zaxisPropertyTree == null)||(!zaxisPropertyTree.isLeaf())))) {
            _newObject.zaxis = this.zaxis;
        }
        final PropertyTree massPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("mass"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(massPropertyTree!= null):((massPropertyTree == null)||(!massPropertyTree.isLeaf())))) {
            _newObject.mass = this.mass;
        }
        final PropertyTree diaginertiaPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("diaginertia"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(diaginertiaPropertyTree!= null):((diaginertiaPropertyTree == null)||(!diaginertiaPropertyTree.isLeaf())))) {
            _newObject.diaginertia = this.diaginertia;
        }
        final PropertyTree fullinertiaPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("fullinertia"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(fullinertiaPropertyTree!= null):((fullinertiaPropertyTree == null)||(!fullinertiaPropertyTree.isLeaf())))) {
            _newObject.fullinertia = this.fullinertia;
        }
        return _newObject;
    }

    @Override
    public InertialType copyExcept(final PropertyTree _propertyTree) {
        return createCopy(_propertyTree, PropertyTreeUse.EXCLUDE);
    }

    @Override
    public InertialType copyOnly(final PropertyTree _propertyTree) {
        return createCopy(_propertyTree, PropertyTreeUse.INCLUDE);
    }

    /**
     * Copies all state of this object to a builder. This method is used by the {@link #copyOf} method and should not be called directly by client code.
     * 
     * @param _other
     *     A builder instance to which the state of this object will be copied.
     */
    public<_B >void copyTo(final InertialType.Builder<_B> _other) {
        _other.pos = this.pos;
        _other.quat = this.quat;
        _other.axisangle = this.axisangle;
        _other.euler = this.euler;
        _other.xyaxes = this.xyaxes;
        _other.zaxis = this.zaxis;
        _other.mass = this.mass;
        _other.diaginertia = this.diaginertia;
        _other.fullinertia = this.fullinertia;
    }

    public<_B >InertialType.Builder<_B> newCopyBuilder(final _B _parentBuilder) {
        return new InertialType.Builder<_B>(_parentBuilder, this, true);
    }

    public InertialType.Builder<Void> newCopyBuilder() {
        return newCopyBuilder(null);
    }

    public static InertialType.Builder<Void> builder() {
        return new InertialType.Builder<Void>(null, null, false);
    }

    public static<_B >InertialType.Builder<_B> copyOf(final InertialType _other) {
        final InertialType.Builder<_B> _newBuilder = new InertialType.Builder<_B>(null, null, false);
        _other.copyTo(_newBuilder);
        return _newBuilder;
    }

    /**
     * Copies all state of this object to a builder. This method is used by the {@link #copyOf} method and should not be called directly by client code.
     * 
     * @param _other
     *     A builder instance to which the state of this object will be copied.
     */
    public<_B >void copyTo(final InertialType.Builder<_B> _other, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        final PropertyTree posPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("pos"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(posPropertyTree!= null):((posPropertyTree == null)||(!posPropertyTree.isLeaf())))) {
            _other.pos = this.pos;
        }
        final PropertyTree quatPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("quat"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(quatPropertyTree!= null):((quatPropertyTree == null)||(!quatPropertyTree.isLeaf())))) {
            _other.quat = this.quat;
        }
        final PropertyTree axisanglePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("axisangle"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(axisanglePropertyTree!= null):((axisanglePropertyTree == null)||(!axisanglePropertyTree.isLeaf())))) {
            _other.axisangle = this.axisangle;
        }
        final PropertyTree eulerPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("euler"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(eulerPropertyTree!= null):((eulerPropertyTree == null)||(!eulerPropertyTree.isLeaf())))) {
            _other.euler = this.euler;
        }
        final PropertyTree xyaxesPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("xyaxes"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(xyaxesPropertyTree!= null):((xyaxesPropertyTree == null)||(!xyaxesPropertyTree.isLeaf())))) {
            _other.xyaxes = this.xyaxes;
        }
        final PropertyTree zaxisPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("zaxis"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(zaxisPropertyTree!= null):((zaxisPropertyTree == null)||(!zaxisPropertyTree.isLeaf())))) {
            _other.zaxis = this.zaxis;
        }
        final PropertyTree massPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("mass"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(massPropertyTree!= null):((massPropertyTree == null)||(!massPropertyTree.isLeaf())))) {
            _other.mass = this.mass;
        }
        final PropertyTree diaginertiaPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("diaginertia"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(diaginertiaPropertyTree!= null):((diaginertiaPropertyTree == null)||(!diaginertiaPropertyTree.isLeaf())))) {
            _other.diaginertia = this.diaginertia;
        }
        final PropertyTree fullinertiaPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("fullinertia"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(fullinertiaPropertyTree!= null):((fullinertiaPropertyTree == null)||(!fullinertiaPropertyTree.isLeaf())))) {
            _other.fullinertia = this.fullinertia;
        }
    }

    public<_B >InertialType.Builder<_B> newCopyBuilder(final _B _parentBuilder, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        return new InertialType.Builder<_B>(_parentBuilder, this, true, _propertyTree, _propertyTreeUse);
    }

    public InertialType.Builder<Void> newCopyBuilder(final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        return newCopyBuilder(null, _propertyTree, _propertyTreeUse);
    }

    public static<_B >InertialType.Builder<_B> copyOf(final InertialType _other, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        final InertialType.Builder<_B> _newBuilder = new InertialType.Builder<_B>(null, null, false);
        _other.copyTo(_newBuilder, _propertyTree, _propertyTreeUse);
        return _newBuilder;
    }

    public static InertialType.Builder<Void> copyExcept(final InertialType _other, final PropertyTree _propertyTree) {
        return copyOf(_other, _propertyTree, PropertyTreeUse.EXCLUDE);
    }

    public static InertialType.Builder<Void> copyOnly(final InertialType _other, final PropertyTree _propertyTree) {
        return copyOf(_other, _propertyTree, PropertyTreeUse.INCLUDE);
    }

    public InertialType visit(final PropertyVisitor _visitor_) {
        _visitor_.visit(this);
        return this;
    }

    public static class Builder<_B >implements Buildable
    {

        protected final _B _parentBuilder;
        private String pos;
        private String quat;
        private String axisangle;
        private String euler;
        private String xyaxes;
        private String zaxis;
        private BigDecimal mass;
        private String diaginertia;
        private String fullinertia;

        public Builder(final _B _parentBuilder, final InertialType _other, final boolean _copy) {
            this._parentBuilder = _parentBuilder;
            if (_other!= null) {
                this.pos = _other.pos;
                this.quat = _other.quat;
                this.axisangle = _other.axisangle;
                this.euler = _other.euler;
                this.xyaxes = _other.xyaxes;
                this.zaxis = _other.zaxis;
                this.mass = _other.mass;
                this.diaginertia = _other.diaginertia;
                this.fullinertia = _other.fullinertia;
            }
        }

        public Builder(final _B _parentBuilder, final InertialType _other, final boolean _copy, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
            this._parentBuilder = _parentBuilder;
            if (_other!= null) {
                final PropertyTree posPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("pos"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(posPropertyTree!= null):((posPropertyTree == null)||(!posPropertyTree.isLeaf())))) {
                    this.pos = _other.pos;
                }
                final PropertyTree quatPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("quat"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(quatPropertyTree!= null):((quatPropertyTree == null)||(!quatPropertyTree.isLeaf())))) {
                    this.quat = _other.quat;
                }
                final PropertyTree axisanglePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("axisangle"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(axisanglePropertyTree!= null):((axisanglePropertyTree == null)||(!axisanglePropertyTree.isLeaf())))) {
                    this.axisangle = _other.axisangle;
                }
                final PropertyTree eulerPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("euler"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(eulerPropertyTree!= null):((eulerPropertyTree == null)||(!eulerPropertyTree.isLeaf())))) {
                    this.euler = _other.euler;
                }
                final PropertyTree xyaxesPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("xyaxes"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(xyaxesPropertyTree!= null):((xyaxesPropertyTree == null)||(!xyaxesPropertyTree.isLeaf())))) {
                    this.xyaxes = _other.xyaxes;
                }
                final PropertyTree zaxisPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("zaxis"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(zaxisPropertyTree!= null):((zaxisPropertyTree == null)||(!zaxisPropertyTree.isLeaf())))) {
                    this.zaxis = _other.zaxis;
                }
                final PropertyTree massPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("mass"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(massPropertyTree!= null):((massPropertyTree == null)||(!massPropertyTree.isLeaf())))) {
                    this.mass = _other.mass;
                }
                final PropertyTree diaginertiaPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("diaginertia"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(diaginertiaPropertyTree!= null):((diaginertiaPropertyTree == null)||(!diaginertiaPropertyTree.isLeaf())))) {
                    this.diaginertia = _other.diaginertia;
                }
                final PropertyTree fullinertiaPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("fullinertia"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(fullinertiaPropertyTree!= null):((fullinertiaPropertyTree == null)||(!fullinertiaPropertyTree.isLeaf())))) {
                    this.fullinertia = _other.fullinertia;
                }
            }
        }

        public _B end() {
            return this._parentBuilder;
        }

        protected<_P extends InertialType >_P init(final _P _product) {
            _product.pos = this.pos;
            _product.quat = this.quat;
            _product.axisangle = this.axisangle;
            _product.euler = this.euler;
            _product.xyaxes = this.xyaxes;
            _product.zaxis = this.zaxis;
            _product.mass = this.mass;
            _product.diaginertia = this.diaginertia;
            _product.fullinertia = this.fullinertia;
            return _product;
        }

        /**
         * Sets the new value of "pos" (any previous value will be replaced)
         * 
         * @param pos
         *     New value of the "pos" property.
         */
        public InertialType.Builder<_B> withPos(final String pos) {
            this.pos = pos;
            return this;
        }

        /**
         * Sets the new value of "quat" (any previous value will be replaced)
         * 
         * @param quat
         *     New value of the "quat" property.
         */
        public InertialType.Builder<_B> withQuat(final String quat) {
            this.quat = quat;
            return this;
        }

        /**
         * Sets the new value of "axisangle" (any previous value will be replaced)
         * 
         * @param axisangle
         *     New value of the "axisangle" property.
         */
        public InertialType.Builder<_B> withAxisangle(final String axisangle) {
            this.axisangle = axisangle;
            return this;
        }

        /**
         * Sets the new value of "euler" (any previous value will be replaced)
         * 
         * @param euler
         *     New value of the "euler" property.
         */
        public InertialType.Builder<_B> withEuler(final String euler) {
            this.euler = euler;
            return this;
        }

        /**
         * Sets the new value of "xyaxes" (any previous value will be replaced)
         * 
         * @param xyaxes
         *     New value of the "xyaxes" property.
         */
        public InertialType.Builder<_B> withXyaxes(final String xyaxes) {
            this.xyaxes = xyaxes;
            return this;
        }

        /**
         * Sets the new value of "zaxis" (any previous value will be replaced)
         * 
         * @param zaxis
         *     New value of the "zaxis" property.
         */
        public InertialType.Builder<_B> withZaxis(final String zaxis) {
            this.zaxis = zaxis;
            return this;
        }

        /**
         * Sets the new value of "mass" (any previous value will be replaced)
         * 
         * @param mass
         *     New value of the "mass" property.
         */
        public InertialType.Builder<_B> withMass(final BigDecimal mass) {
            this.mass = mass;
            return this;
        }

        /**
         * Sets the new value of "diaginertia" (any previous value will be replaced)
         * 
         * @param diaginertia
         *     New value of the "diaginertia" property.
         */
        public InertialType.Builder<_B> withDiaginertia(final String diaginertia) {
            this.diaginertia = diaginertia;
            return this;
        }

        /**
         * Sets the new value of "fullinertia" (any previous value will be replaced)
         * 
         * @param fullinertia
         *     New value of the "fullinertia" property.
         */
        public InertialType.Builder<_B> withFullinertia(final String fullinertia) {
            this.fullinertia = fullinertia;
            return this;
        }

        @Override
        public InertialType build() {
            return this.init(new InertialType());
        }

        public InertialType.Builder<_B> copyOf(final InertialType _other) {
            _other.copyTo(this);
            return this;
        }

        public InertialType.Builder<_B> copyOf(final InertialType.Builder _other) {
            return copyOf(_other.build());
        }

    }

    public static class PropInfo {

        public final static transient String POS = "pos";
        public final static transient String QUAT = "quat";
        public final static transient String AXISANGLE = "axisangle";
        public final static transient String EULER = "euler";
        public final static transient String XYAXES = "xyaxes";
        public final static transient String ZAXIS = "zaxis";
        public final static transient String MASS = "mass";
        public final static transient String DIAGINERTIA = "diaginertia";
        public final static transient String FULLINERTIA = "fullinertia";

    }

    public static class Select
        extends InertialType.Selector<InertialType.Select, Void>
    {


        Select() {
            super(null, null, null);
        }

        public static InertialType.Select _root() {
            return new InertialType.Select();
        }

    }

    public static class Selector<TRoot extends com.kscs.util.jaxb.Selector<TRoot, ?> , TParent >
        extends com.kscs.util.jaxb.Selector<TRoot, TParent>
    {

        private com.kscs.util.jaxb.Selector<TRoot, InertialType.Selector<TRoot, TParent>> pos = null;
        private com.kscs.util.jaxb.Selector<TRoot, InertialType.Selector<TRoot, TParent>> quat = null;
        private com.kscs.util.jaxb.Selector<TRoot, InertialType.Selector<TRoot, TParent>> axisangle = null;
        private com.kscs.util.jaxb.Selector<TRoot, InertialType.Selector<TRoot, TParent>> euler = null;
        private com.kscs.util.jaxb.Selector<TRoot, InertialType.Selector<TRoot, TParent>> xyaxes = null;
        private com.kscs.util.jaxb.Selector<TRoot, InertialType.Selector<TRoot, TParent>> zaxis = null;
        private com.kscs.util.jaxb.Selector<TRoot, InertialType.Selector<TRoot, TParent>> mass = null;
        private com.kscs.util.jaxb.Selector<TRoot, InertialType.Selector<TRoot, TParent>> diaginertia = null;
        private com.kscs.util.jaxb.Selector<TRoot, InertialType.Selector<TRoot, TParent>> fullinertia = null;

        public Selector(final TRoot root, final TParent parent, final String propertyName) {
            super(root, parent, propertyName);
        }

        @Override
        public Map<String, PropertyTree> buildChildren() {
            final Map<String, PropertyTree> products = new HashMap<String, PropertyTree>();
            products.putAll(super.buildChildren());
            if (this.pos!= null) {
                products.put("pos", this.pos.init());
            }
            if (this.quat!= null) {
                products.put("quat", this.quat.init());
            }
            if (this.axisangle!= null) {
                products.put("axisangle", this.axisangle.init());
            }
            if (this.euler!= null) {
                products.put("euler", this.euler.init());
            }
            if (this.xyaxes!= null) {
                products.put("xyaxes", this.xyaxes.init());
            }
            if (this.zaxis!= null) {
                products.put("zaxis", this.zaxis.init());
            }
            if (this.mass!= null) {
                products.put("mass", this.mass.init());
            }
            if (this.diaginertia!= null) {
                products.put("diaginertia", this.diaginertia.init());
            }
            if (this.fullinertia!= null) {
                products.put("fullinertia", this.fullinertia.init());
            }
            return products;
        }

        public com.kscs.util.jaxb.Selector<TRoot, InertialType.Selector<TRoot, TParent>> pos() {
            return ((this.pos == null)?this.pos = new com.kscs.util.jaxb.Selector<TRoot, InertialType.Selector<TRoot, TParent>>(this._root, this, "pos"):this.pos);
        }

        public com.kscs.util.jaxb.Selector<TRoot, InertialType.Selector<TRoot, TParent>> quat() {
            return ((this.quat == null)?this.quat = new com.kscs.util.jaxb.Selector<TRoot, InertialType.Selector<TRoot, TParent>>(this._root, this, "quat"):this.quat);
        }

        public com.kscs.util.jaxb.Selector<TRoot, InertialType.Selector<TRoot, TParent>> axisangle() {
            return ((this.axisangle == null)?this.axisangle = new com.kscs.util.jaxb.Selector<TRoot, InertialType.Selector<TRoot, TParent>>(this._root, this, "axisangle"):this.axisangle);
        }

        public com.kscs.util.jaxb.Selector<TRoot, InertialType.Selector<TRoot, TParent>> euler() {
            return ((this.euler == null)?this.euler = new com.kscs.util.jaxb.Selector<TRoot, InertialType.Selector<TRoot, TParent>>(this._root, this, "euler"):this.euler);
        }

        public com.kscs.util.jaxb.Selector<TRoot, InertialType.Selector<TRoot, TParent>> xyaxes() {
            return ((this.xyaxes == null)?this.xyaxes = new com.kscs.util.jaxb.Selector<TRoot, InertialType.Selector<TRoot, TParent>>(this._root, this, "xyaxes"):this.xyaxes);
        }

        public com.kscs.util.jaxb.Selector<TRoot, InertialType.Selector<TRoot, TParent>> zaxis() {
            return ((this.zaxis == null)?this.zaxis = new com.kscs.util.jaxb.Selector<TRoot, InertialType.Selector<TRoot, TParent>>(this._root, this, "zaxis"):this.zaxis);
        }

        public com.kscs.util.jaxb.Selector<TRoot, InertialType.Selector<TRoot, TParent>> mass() {
            return ((this.mass == null)?this.mass = new com.kscs.util.jaxb.Selector<TRoot, InertialType.Selector<TRoot, TParent>>(this._root, this, "mass"):this.mass);
        }

        public com.kscs.util.jaxb.Selector<TRoot, InertialType.Selector<TRoot, TParent>> diaginertia() {
            return ((this.diaginertia == null)?this.diaginertia = new com.kscs.util.jaxb.Selector<TRoot, InertialType.Selector<TRoot, TParent>>(this._root, this, "diaginertia"):this.diaginertia);
        }

        public com.kscs.util.jaxb.Selector<TRoot, InertialType.Selector<TRoot, TParent>> fullinertia() {
            return ((this.fullinertia == null)?this.fullinertia = new com.kscs.util.jaxb.Selector<TRoot, InertialType.Selector<TRoot, TParent>>(this._root, this, "fullinertia"):this.fullinertia);
        }

    }

}
