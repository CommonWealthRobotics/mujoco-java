//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.3.0 
// See <a href="https://javaee.github.io/jaxb-v2/">https://javaee.github.io/jaxb-v2/</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
//


package org.mujoco.xml.option;

import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeSupport;
import java.beans.PropertyVetoException;
import java.beans.VetoableChangeListener;
import java.beans.VetoableChangeSupport;
import java.util.HashMap;
import java.util.Map;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlType;
import com.kscs.util.jaxb.Buildable;
import com.kscs.util.jaxb.Copyable;
import com.kscs.util.jaxb.PartialCopyable;
import com.kscs.util.jaxb.PropertyTree;
import com.kscs.util.jaxb.PropertyTreeUse;
import com.kscs.util.jaxb.PropertyVisitor;
import org.mujoco.xml.attributetypes.FlagSimpleType;


/**
 * <p>Java class for flagType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="flagType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;attribute name="constraint" type="{attributeTypes}flagSimpleType" default="enable" /&gt;
 *       &lt;attribute name="equality" type="{attributeTypes}flagSimpleType" default="enable" /&gt;
 *       &lt;attribute name="frictionloss" type="{attributeTypes}flagSimpleType" default="enable" /&gt;
 *       &lt;attribute name="limit" type="{attributeTypes}flagSimpleType" default="enable" /&gt;
 *       &lt;attribute name="contact" type="{attributeTypes}flagSimpleType" default="enable" /&gt;
 *       &lt;attribute name="passive" type="{attributeTypes}flagSimpleType" default="enable" /&gt;
 *       &lt;attribute name="gravity" type="{attributeTypes}flagSimpleType" default="enable" /&gt;
 *       &lt;attribute name="clampctrl" type="{attributeTypes}flagSimpleType" default="enable" /&gt;
 *       &lt;attribute name="warmstart" type="{attributeTypes}flagSimpleType" default="enable" /&gt;
 *       &lt;attribute name="filterparent" type="{attributeTypes}flagSimpleType" default="enable" /&gt;
 *       &lt;attribute name="actuation" type="{attributeTypes}flagSimpleType" default="enable" /&gt;
 *       &lt;attribute name="refsafe" type="{attributeTypes}flagSimpleType" default="enable" /&gt;
 *       &lt;attribute name="sensor" type="{attributeTypes}flagSimpleType" default="enable" /&gt;
 *       &lt;attribute name="midphase" type="{attributeTypes}flagSimpleType" default="enable" /&gt;
 *       &lt;attribute name="eulerdamp" type="{attributeTypes}flagSimpleType" default="enable" /&gt;
 *       &lt;attribute name="override" type="{attributeTypes}flagSimpleType" default="disable" /&gt;
 *       &lt;attribute name="energy" type="{attributeTypes}flagSimpleType" default="disable" /&gt;
 *       &lt;attribute name="fwdinv" type="{attributeTypes}flagSimpleType" default="disable" /&gt;
 *       &lt;attribute name="invdiscrete" type="{attributeTypes}flagSimpleType" default="disable" /&gt;
 *       &lt;attribute name="sensornoise" type="{attributeTypes}flagSimpleType" default="disable" /&gt;
 *       &lt;attribute name="multiccd" type="{attributeTypes}flagSimpleType" default="disable" /&gt;
 *       &lt;attribute name="island" type="{attributeTypes}flagSimpleType" default="disable" /&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "flagType")
public class FlagType implements Cloneable, Copyable, PartialCopyable
{

    @XmlAttribute(name = "constraint")
    protected FlagSimpleType constraint;
    @XmlAttribute(name = "equality")
    protected FlagSimpleType equality;
    @XmlAttribute(name = "frictionloss")
    protected FlagSimpleType frictionloss;
    @XmlAttribute(name = "limit")
    protected FlagSimpleType limit;
    @XmlAttribute(name = "contact")
    protected FlagSimpleType contact;
    @XmlAttribute(name = "passive")
    protected FlagSimpleType passive;
    @XmlAttribute(name = "gravity")
    protected FlagSimpleType gravity;
    @XmlAttribute(name = "clampctrl")
    protected FlagSimpleType clampctrl;
    @XmlAttribute(name = "warmstart")
    protected FlagSimpleType warmstart;
    @XmlAttribute(name = "filterparent")
    protected FlagSimpleType filterparent;
    @XmlAttribute(name = "actuation")
    protected FlagSimpleType actuation;
    @XmlAttribute(name = "refsafe")
    protected FlagSimpleType refsafe;
    @XmlAttribute(name = "sensor")
    protected FlagSimpleType sensor;
    @XmlAttribute(name = "midphase")
    protected FlagSimpleType midphase;
    @XmlAttribute(name = "eulerdamp")
    protected FlagSimpleType eulerdamp;
    @XmlAttribute(name = "override")
    protected FlagSimpleType override;
    @XmlAttribute(name = "energy")
    protected FlagSimpleType energy;
    @XmlAttribute(name = "fwdinv")
    protected FlagSimpleType fwdinv;
    @XmlAttribute(name = "invdiscrete")
    protected FlagSimpleType invdiscrete;
    @XmlAttribute(name = "sensornoise")
    protected FlagSimpleType sensornoise;
    @XmlAttribute(name = "multiccd")
    protected FlagSimpleType multiccd;
    @XmlAttribute(name = "island")
    protected FlagSimpleType island;
    protected final transient VetoableChangeSupport vetoableChange__Support = new VetoableChangeSupport(this);
    protected final transient PropertyChangeSupport propertyChange__Support = new PropertyChangeSupport(this);

    /**
     * Generated by copy-constructor plugin, JAXB requires public no-arg constructor.
     * 
     */
    public FlagType() {
        // Generated by copy-constructor plugin, JAXB requires public no-arg constructor.
    }

    /**
     * Instantiates a FlagType copying the state of another FlagType
     * 
     * @param _other
     *     The original FlagType from which to copy state.
     */
    public FlagType(final FlagType _other) {
        this.constraint = _other.constraint;
        this.equality = _other.equality;
        this.frictionloss = _other.frictionloss;
        this.limit = _other.limit;
        this.contact = _other.contact;
        this.passive = _other.passive;
        this.gravity = _other.gravity;
        this.clampctrl = _other.clampctrl;
        this.warmstart = _other.warmstart;
        this.filterparent = _other.filterparent;
        this.actuation = _other.actuation;
        this.refsafe = _other.refsafe;
        this.sensor = _other.sensor;
        this.midphase = _other.midphase;
        this.eulerdamp = _other.eulerdamp;
        this.override = _other.override;
        this.energy = _other.energy;
        this.fwdinv = _other.fwdinv;
        this.invdiscrete = _other.invdiscrete;
        this.sensornoise = _other.sensornoise;
        this.multiccd = _other.multiccd;
        this.island = _other.island;
    }

    /**
     * Instantiates a FlagType copying the state of another FlagType
     * 
     * @param _propertyTreeUse
     *     Meaning of the : Exclude or include members contained in property path.
     * @param _propertyTree
     *     A restricting  that defines which nodes of the source object tree should actually be copied.
     * @param _other
     *     The original FlagType from which to copy state.
     */
    public FlagType(final FlagType _other, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        final PropertyTree constraintPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("constraint"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(constraintPropertyTree!= null):((constraintPropertyTree == null)||(!constraintPropertyTree.isLeaf())))) {
            this.constraint = _other.constraint;
        }
        final PropertyTree equalityPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("equality"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(equalityPropertyTree!= null):((equalityPropertyTree == null)||(!equalityPropertyTree.isLeaf())))) {
            this.equality = _other.equality;
        }
        final PropertyTree frictionlossPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("frictionloss"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(frictionlossPropertyTree!= null):((frictionlossPropertyTree == null)||(!frictionlossPropertyTree.isLeaf())))) {
            this.frictionloss = _other.frictionloss;
        }
        final PropertyTree limitPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("limit"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(limitPropertyTree!= null):((limitPropertyTree == null)||(!limitPropertyTree.isLeaf())))) {
            this.limit = _other.limit;
        }
        final PropertyTree contactPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("contact"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(contactPropertyTree!= null):((contactPropertyTree == null)||(!contactPropertyTree.isLeaf())))) {
            this.contact = _other.contact;
        }
        final PropertyTree passivePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("passive"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(passivePropertyTree!= null):((passivePropertyTree == null)||(!passivePropertyTree.isLeaf())))) {
            this.passive = _other.passive;
        }
        final PropertyTree gravityPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("gravity"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(gravityPropertyTree!= null):((gravityPropertyTree == null)||(!gravityPropertyTree.isLeaf())))) {
            this.gravity = _other.gravity;
        }
        final PropertyTree clampctrlPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("clampctrl"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(clampctrlPropertyTree!= null):((clampctrlPropertyTree == null)||(!clampctrlPropertyTree.isLeaf())))) {
            this.clampctrl = _other.clampctrl;
        }
        final PropertyTree warmstartPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("warmstart"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(warmstartPropertyTree!= null):((warmstartPropertyTree == null)||(!warmstartPropertyTree.isLeaf())))) {
            this.warmstart = _other.warmstart;
        }
        final PropertyTree filterparentPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("filterparent"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(filterparentPropertyTree!= null):((filterparentPropertyTree == null)||(!filterparentPropertyTree.isLeaf())))) {
            this.filterparent = _other.filterparent;
        }
        final PropertyTree actuationPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("actuation"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(actuationPropertyTree!= null):((actuationPropertyTree == null)||(!actuationPropertyTree.isLeaf())))) {
            this.actuation = _other.actuation;
        }
        final PropertyTree refsafePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("refsafe"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(refsafePropertyTree!= null):((refsafePropertyTree == null)||(!refsafePropertyTree.isLeaf())))) {
            this.refsafe = _other.refsafe;
        }
        final PropertyTree sensorPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("sensor"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(sensorPropertyTree!= null):((sensorPropertyTree == null)||(!sensorPropertyTree.isLeaf())))) {
            this.sensor = _other.sensor;
        }
        final PropertyTree midphasePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("midphase"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(midphasePropertyTree!= null):((midphasePropertyTree == null)||(!midphasePropertyTree.isLeaf())))) {
            this.midphase = _other.midphase;
        }
        final PropertyTree eulerdampPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("eulerdamp"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(eulerdampPropertyTree!= null):((eulerdampPropertyTree == null)||(!eulerdampPropertyTree.isLeaf())))) {
            this.eulerdamp = _other.eulerdamp;
        }
        final PropertyTree overridePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("override"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(overridePropertyTree!= null):((overridePropertyTree == null)||(!overridePropertyTree.isLeaf())))) {
            this.override = _other.override;
        }
        final PropertyTree energyPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("energy"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(energyPropertyTree!= null):((energyPropertyTree == null)||(!energyPropertyTree.isLeaf())))) {
            this.energy = _other.energy;
        }
        final PropertyTree fwdinvPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("fwdinv"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(fwdinvPropertyTree!= null):((fwdinvPropertyTree == null)||(!fwdinvPropertyTree.isLeaf())))) {
            this.fwdinv = _other.fwdinv;
        }
        final PropertyTree invdiscretePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("invdiscrete"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(invdiscretePropertyTree!= null):((invdiscretePropertyTree == null)||(!invdiscretePropertyTree.isLeaf())))) {
            this.invdiscrete = _other.invdiscrete;
        }
        final PropertyTree sensornoisePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("sensornoise"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(sensornoisePropertyTree!= null):((sensornoisePropertyTree == null)||(!sensornoisePropertyTree.isLeaf())))) {
            this.sensornoise = _other.sensornoise;
        }
        final PropertyTree multiccdPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("multiccd"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(multiccdPropertyTree!= null):((multiccdPropertyTree == null)||(!multiccdPropertyTree.isLeaf())))) {
            this.multiccd = _other.multiccd;
        }
        final PropertyTree islandPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("island"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(islandPropertyTree!= null):((islandPropertyTree == null)||(!islandPropertyTree.isLeaf())))) {
            this.island = _other.island;
        }
    }

    /**
     * Gets the value of the constraint property.
     * 
     * @return
     *     possible object is
     *     {@link FlagSimpleType }
     *     
     */
    public FlagSimpleType getConstraint() {
        if (constraint == null) {
            return FlagSimpleType.ENABLE;
        } else {
            return constraint;
        }
    }

    /**
     * Gets the value of the equality property.
     * 
     * @return
     *     possible object is
     *     {@link FlagSimpleType }
     *     
     */
    public FlagSimpleType getEquality() {
        if (equality == null) {
            return FlagSimpleType.ENABLE;
        } else {
            return equality;
        }
    }

    /**
     * Gets the value of the frictionloss property.
     * 
     * @return
     *     possible object is
     *     {@link FlagSimpleType }
     *     
     */
    public FlagSimpleType getFrictionloss() {
        if (frictionloss == null) {
            return FlagSimpleType.ENABLE;
        } else {
            return frictionloss;
        }
    }

    /**
     * Gets the value of the limit property.
     * 
     * @return
     *     possible object is
     *     {@link FlagSimpleType }
     *     
     */
    public FlagSimpleType getLimit() {
        if (limit == null) {
            return FlagSimpleType.ENABLE;
        } else {
            return limit;
        }
    }

    /**
     * Gets the value of the contact property.
     * 
     * @return
     *     possible object is
     *     {@link FlagSimpleType }
     *     
     */
    public FlagSimpleType getContact() {
        if (contact == null) {
            return FlagSimpleType.ENABLE;
        } else {
            return contact;
        }
    }

    /**
     * Gets the value of the passive property.
     * 
     * @return
     *     possible object is
     *     {@link FlagSimpleType }
     *     
     */
    public FlagSimpleType getPassive() {
        if (passive == null) {
            return FlagSimpleType.ENABLE;
        } else {
            return passive;
        }
    }

    /**
     * Gets the value of the gravity property.
     * 
     * @return
     *     possible object is
     *     {@link FlagSimpleType }
     *     
     */
    public FlagSimpleType getGravity() {
        if (gravity == null) {
            return FlagSimpleType.ENABLE;
        } else {
            return gravity;
        }
    }

    /**
     * Gets the value of the clampctrl property.
     * 
     * @return
     *     possible object is
     *     {@link FlagSimpleType }
     *     
     */
    public FlagSimpleType getClampctrl() {
        if (clampctrl == null) {
            return FlagSimpleType.ENABLE;
        } else {
            return clampctrl;
        }
    }

    /**
     * Gets the value of the warmstart property.
     * 
     * @return
     *     possible object is
     *     {@link FlagSimpleType }
     *     
     */
    public FlagSimpleType getWarmstart() {
        if (warmstart == null) {
            return FlagSimpleType.ENABLE;
        } else {
            return warmstart;
        }
    }

    /**
     * Gets the value of the filterparent property.
     * 
     * @return
     *     possible object is
     *     {@link FlagSimpleType }
     *     
     */
    public FlagSimpleType getFilterparent() {
        if (filterparent == null) {
            return FlagSimpleType.ENABLE;
        } else {
            return filterparent;
        }
    }

    /**
     * Gets the value of the actuation property.
     * 
     * @return
     *     possible object is
     *     {@link FlagSimpleType }
     *     
     */
    public FlagSimpleType getActuation() {
        if (actuation == null) {
            return FlagSimpleType.ENABLE;
        } else {
            return actuation;
        }
    }

    /**
     * Gets the value of the refsafe property.
     * 
     * @return
     *     possible object is
     *     {@link FlagSimpleType }
     *     
     */
    public FlagSimpleType getRefsafe() {
        if (refsafe == null) {
            return FlagSimpleType.ENABLE;
        } else {
            return refsafe;
        }
    }

    /**
     * Gets the value of the sensor property.
     * 
     * @return
     *     possible object is
     *     {@link FlagSimpleType }
     *     
     */
    public FlagSimpleType getSensor() {
        if (sensor == null) {
            return FlagSimpleType.ENABLE;
        } else {
            return sensor;
        }
    }

    /**
     * Gets the value of the midphase property.
     * 
     * @return
     *     possible object is
     *     {@link FlagSimpleType }
     *     
     */
    public FlagSimpleType getMidphase() {
        if (midphase == null) {
            return FlagSimpleType.ENABLE;
        } else {
            return midphase;
        }
    }

    /**
     * Gets the value of the eulerdamp property.
     * 
     * @return
     *     possible object is
     *     {@link FlagSimpleType }
     *     
     */
    public FlagSimpleType getEulerdamp() {
        if (eulerdamp == null) {
            return FlagSimpleType.ENABLE;
        } else {
            return eulerdamp;
        }
    }

    /**
     * Gets the value of the override property.
     * 
     * @return
     *     possible object is
     *     {@link FlagSimpleType }
     *     
     */
    public FlagSimpleType getOverride() {
        if (override == null) {
            return FlagSimpleType.DISABLE;
        } else {
            return override;
        }
    }

    /**
     * Gets the value of the energy property.
     * 
     * @return
     *     possible object is
     *     {@link FlagSimpleType }
     *     
     */
    public FlagSimpleType getEnergy() {
        if (energy == null) {
            return FlagSimpleType.DISABLE;
        } else {
            return energy;
        }
    }

    /**
     * Gets the value of the fwdinv property.
     * 
     * @return
     *     possible object is
     *     {@link FlagSimpleType }
     *     
     */
    public FlagSimpleType getFwdinv() {
        if (fwdinv == null) {
            return FlagSimpleType.DISABLE;
        } else {
            return fwdinv;
        }
    }

    /**
     * Gets the value of the invdiscrete property.
     * 
     * @return
     *     possible object is
     *     {@link FlagSimpleType }
     *     
     */
    public FlagSimpleType getInvdiscrete() {
        if (invdiscrete == null) {
            return FlagSimpleType.DISABLE;
        } else {
            return invdiscrete;
        }
    }

    /**
     * Gets the value of the sensornoise property.
     * 
     * @return
     *     possible object is
     *     {@link FlagSimpleType }
     *     
     */
    public FlagSimpleType getSensornoise() {
        if (sensornoise == null) {
            return FlagSimpleType.DISABLE;
        } else {
            return sensornoise;
        }
    }

    /**
     * Gets the value of the multiccd property.
     * 
     * @return
     *     possible object is
     *     {@link FlagSimpleType }
     *     
     */
    public FlagSimpleType getMulticcd() {
        if (multiccd == null) {
            return FlagSimpleType.DISABLE;
        } else {
            return multiccd;
        }
    }

    /**
     * Gets the value of the island property.
     * 
     * @return
     *     possible object is
     *     {@link FlagSimpleType }
     *     
     */
    public FlagSimpleType getIsland() {
        if (island == null) {
            return FlagSimpleType.DISABLE;
        } else {
            return island;
        }
    }

    public void addVetoableChangeListener(final VetoableChangeListener vetoableChangeListener) {
        this.vetoableChange__Support.addVetoableChangeListener(vetoableChangeListener);
    }

    public void removeVetoableChangeListener(final VetoableChangeListener vetoableChangeListener) {
        this.vetoableChange__Support.removeVetoableChangeListener(vetoableChangeListener);
    }

    public FlagType withVetoableChangeListener(final VetoableChangeListener vetoableChangeListener) {
        addVetoableChangeListener(vetoableChangeListener);
        return this;
    }

    public void addPropertyChangeListener(final PropertyChangeListener propertyChangeListener) {
        this.propertyChange__Support.addPropertyChangeListener(propertyChangeListener);
    }

    public void removePropertyChangeListener(final PropertyChangeListener propertyChangeListener) {
        this.propertyChange__Support.removePropertyChangeListener(propertyChangeListener);
    }

    public FlagType withPropertyChangeListener(final PropertyChangeListener propertyChangeListener) {
        addPropertyChangeListener(propertyChangeListener);
        return this;
    }

    public void setConstraint(final FlagSimpleType value) {
        final FlagSimpleType __oldValue = this.constraint;
        try {
            this.vetoableChange__Support.fireVetoableChange("constraint", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.constraint = value;
        this.propertyChange__Support.firePropertyChange("constraint", __oldValue, value);
    }

    public void setEquality(final FlagSimpleType value) {
        final FlagSimpleType __oldValue = this.equality;
        try {
            this.vetoableChange__Support.fireVetoableChange("equality", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.equality = value;
        this.propertyChange__Support.firePropertyChange("equality", __oldValue, value);
    }

    public void setFrictionloss(final FlagSimpleType value) {
        final FlagSimpleType __oldValue = this.frictionloss;
        try {
            this.vetoableChange__Support.fireVetoableChange("frictionloss", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.frictionloss = value;
        this.propertyChange__Support.firePropertyChange("frictionloss", __oldValue, value);
    }

    public void setLimit(final FlagSimpleType value) {
        final FlagSimpleType __oldValue = this.limit;
        try {
            this.vetoableChange__Support.fireVetoableChange("limit", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.limit = value;
        this.propertyChange__Support.firePropertyChange("limit", __oldValue, value);
    }

    public void setContact(final FlagSimpleType value) {
        final FlagSimpleType __oldValue = this.contact;
        try {
            this.vetoableChange__Support.fireVetoableChange("contact", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.contact = value;
        this.propertyChange__Support.firePropertyChange("contact", __oldValue, value);
    }

    public void setPassive(final FlagSimpleType value) {
        final FlagSimpleType __oldValue = this.passive;
        try {
            this.vetoableChange__Support.fireVetoableChange("passive", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.passive = value;
        this.propertyChange__Support.firePropertyChange("passive", __oldValue, value);
    }

    public void setGravity(final FlagSimpleType value) {
        final FlagSimpleType __oldValue = this.gravity;
        try {
            this.vetoableChange__Support.fireVetoableChange("gravity", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.gravity = value;
        this.propertyChange__Support.firePropertyChange("gravity", __oldValue, value);
    }

    public void setClampctrl(final FlagSimpleType value) {
        final FlagSimpleType __oldValue = this.clampctrl;
        try {
            this.vetoableChange__Support.fireVetoableChange("clampctrl", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.clampctrl = value;
        this.propertyChange__Support.firePropertyChange("clampctrl", __oldValue, value);
    }

    public void setWarmstart(final FlagSimpleType value) {
        final FlagSimpleType __oldValue = this.warmstart;
        try {
            this.vetoableChange__Support.fireVetoableChange("warmstart", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.warmstart = value;
        this.propertyChange__Support.firePropertyChange("warmstart", __oldValue, value);
    }

    public void setFilterparent(final FlagSimpleType value) {
        final FlagSimpleType __oldValue = this.filterparent;
        try {
            this.vetoableChange__Support.fireVetoableChange("filterparent", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.filterparent = value;
        this.propertyChange__Support.firePropertyChange("filterparent", __oldValue, value);
    }

    public void setActuation(final FlagSimpleType value) {
        final FlagSimpleType __oldValue = this.actuation;
        try {
            this.vetoableChange__Support.fireVetoableChange("actuation", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.actuation = value;
        this.propertyChange__Support.firePropertyChange("actuation", __oldValue, value);
    }

    public void setRefsafe(final FlagSimpleType value) {
        final FlagSimpleType __oldValue = this.refsafe;
        try {
            this.vetoableChange__Support.fireVetoableChange("refsafe", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.refsafe = value;
        this.propertyChange__Support.firePropertyChange("refsafe", __oldValue, value);
    }

    public void setSensor(final FlagSimpleType value) {
        final FlagSimpleType __oldValue = this.sensor;
        try {
            this.vetoableChange__Support.fireVetoableChange("sensor", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.sensor = value;
        this.propertyChange__Support.firePropertyChange("sensor", __oldValue, value);
    }

    public void setMidphase(final FlagSimpleType value) {
        final FlagSimpleType __oldValue = this.midphase;
        try {
            this.vetoableChange__Support.fireVetoableChange("midphase", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.midphase = value;
        this.propertyChange__Support.firePropertyChange("midphase", __oldValue, value);
    }

    public void setEulerdamp(final FlagSimpleType value) {
        final FlagSimpleType __oldValue = this.eulerdamp;
        try {
            this.vetoableChange__Support.fireVetoableChange("eulerdamp", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.eulerdamp = value;
        this.propertyChange__Support.firePropertyChange("eulerdamp", __oldValue, value);
    }

    public void setOverride(final FlagSimpleType value) {
        final FlagSimpleType __oldValue = this.override;
        try {
            this.vetoableChange__Support.fireVetoableChange("override", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.override = value;
        this.propertyChange__Support.firePropertyChange("override", __oldValue, value);
    }

    public void setEnergy(final FlagSimpleType value) {
        final FlagSimpleType __oldValue = this.energy;
        try {
            this.vetoableChange__Support.fireVetoableChange("energy", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.energy = value;
        this.propertyChange__Support.firePropertyChange("energy", __oldValue, value);
    }

    public void setFwdinv(final FlagSimpleType value) {
        final FlagSimpleType __oldValue = this.fwdinv;
        try {
            this.vetoableChange__Support.fireVetoableChange("fwdinv", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.fwdinv = value;
        this.propertyChange__Support.firePropertyChange("fwdinv", __oldValue, value);
    }

    public void setInvdiscrete(final FlagSimpleType value) {
        final FlagSimpleType __oldValue = this.invdiscrete;
        try {
            this.vetoableChange__Support.fireVetoableChange("invdiscrete", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.invdiscrete = value;
        this.propertyChange__Support.firePropertyChange("invdiscrete", __oldValue, value);
    }

    public void setSensornoise(final FlagSimpleType value) {
        final FlagSimpleType __oldValue = this.sensornoise;
        try {
            this.vetoableChange__Support.fireVetoableChange("sensornoise", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.sensornoise = value;
        this.propertyChange__Support.firePropertyChange("sensornoise", __oldValue, value);
    }

    public void setMulticcd(final FlagSimpleType value) {
        final FlagSimpleType __oldValue = this.multiccd;
        try {
            this.vetoableChange__Support.fireVetoableChange("multiccd", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.multiccd = value;
        this.propertyChange__Support.firePropertyChange("multiccd", __oldValue, value);
    }

    public void setIsland(final FlagSimpleType value) {
        final FlagSimpleType __oldValue = this.island;
        try {
            this.vetoableChange__Support.fireVetoableChange("island", __oldValue, value);
        } catch (PropertyVetoException x) {
            throw new RuntimeException(x);
        }
        this.island = value;
        this.propertyChange__Support.firePropertyChange("island", __oldValue, value);
    }

    @Override
    public FlagType clone() {
        final FlagType _newObject;
        try {
            _newObject = ((FlagType) super.clone());
        } catch (CloneNotSupportedException e) {
            throw new RuntimeException(e);
        }
        return _newObject;
    }

    @Override
    public FlagType createCopy() {
        final FlagType _newObject;
        try {
            _newObject = ((FlagType) super.clone());
        } catch (CloneNotSupportedException e) {
            throw new RuntimeException(e);
        }
        _newObject.constraint = this.constraint;
        _newObject.equality = this.equality;
        _newObject.frictionloss = this.frictionloss;
        _newObject.limit = this.limit;
        _newObject.contact = this.contact;
        _newObject.passive = this.passive;
        _newObject.gravity = this.gravity;
        _newObject.clampctrl = this.clampctrl;
        _newObject.warmstart = this.warmstart;
        _newObject.filterparent = this.filterparent;
        _newObject.actuation = this.actuation;
        _newObject.refsafe = this.refsafe;
        _newObject.sensor = this.sensor;
        _newObject.midphase = this.midphase;
        _newObject.eulerdamp = this.eulerdamp;
        _newObject.override = this.override;
        _newObject.energy = this.energy;
        _newObject.fwdinv = this.fwdinv;
        _newObject.invdiscrete = this.invdiscrete;
        _newObject.sensornoise = this.sensornoise;
        _newObject.multiccd = this.multiccd;
        _newObject.island = this.island;
        return _newObject;
    }

    @Override
    public FlagType createCopy(final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        final FlagType _newObject;
        try {
            _newObject = ((FlagType) super.clone());
        } catch (CloneNotSupportedException e) {
            throw new RuntimeException(e);
        }
        final PropertyTree constraintPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("constraint"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(constraintPropertyTree!= null):((constraintPropertyTree == null)||(!constraintPropertyTree.isLeaf())))) {
            _newObject.constraint = this.constraint;
        }
        final PropertyTree equalityPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("equality"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(equalityPropertyTree!= null):((equalityPropertyTree == null)||(!equalityPropertyTree.isLeaf())))) {
            _newObject.equality = this.equality;
        }
        final PropertyTree frictionlossPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("frictionloss"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(frictionlossPropertyTree!= null):((frictionlossPropertyTree == null)||(!frictionlossPropertyTree.isLeaf())))) {
            _newObject.frictionloss = this.frictionloss;
        }
        final PropertyTree limitPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("limit"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(limitPropertyTree!= null):((limitPropertyTree == null)||(!limitPropertyTree.isLeaf())))) {
            _newObject.limit = this.limit;
        }
        final PropertyTree contactPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("contact"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(contactPropertyTree!= null):((contactPropertyTree == null)||(!contactPropertyTree.isLeaf())))) {
            _newObject.contact = this.contact;
        }
        final PropertyTree passivePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("passive"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(passivePropertyTree!= null):((passivePropertyTree == null)||(!passivePropertyTree.isLeaf())))) {
            _newObject.passive = this.passive;
        }
        final PropertyTree gravityPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("gravity"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(gravityPropertyTree!= null):((gravityPropertyTree == null)||(!gravityPropertyTree.isLeaf())))) {
            _newObject.gravity = this.gravity;
        }
        final PropertyTree clampctrlPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("clampctrl"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(clampctrlPropertyTree!= null):((clampctrlPropertyTree == null)||(!clampctrlPropertyTree.isLeaf())))) {
            _newObject.clampctrl = this.clampctrl;
        }
        final PropertyTree warmstartPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("warmstart"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(warmstartPropertyTree!= null):((warmstartPropertyTree == null)||(!warmstartPropertyTree.isLeaf())))) {
            _newObject.warmstart = this.warmstart;
        }
        final PropertyTree filterparentPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("filterparent"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(filterparentPropertyTree!= null):((filterparentPropertyTree == null)||(!filterparentPropertyTree.isLeaf())))) {
            _newObject.filterparent = this.filterparent;
        }
        final PropertyTree actuationPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("actuation"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(actuationPropertyTree!= null):((actuationPropertyTree == null)||(!actuationPropertyTree.isLeaf())))) {
            _newObject.actuation = this.actuation;
        }
        final PropertyTree refsafePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("refsafe"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(refsafePropertyTree!= null):((refsafePropertyTree == null)||(!refsafePropertyTree.isLeaf())))) {
            _newObject.refsafe = this.refsafe;
        }
        final PropertyTree sensorPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("sensor"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(sensorPropertyTree!= null):((sensorPropertyTree == null)||(!sensorPropertyTree.isLeaf())))) {
            _newObject.sensor = this.sensor;
        }
        final PropertyTree midphasePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("midphase"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(midphasePropertyTree!= null):((midphasePropertyTree == null)||(!midphasePropertyTree.isLeaf())))) {
            _newObject.midphase = this.midphase;
        }
        final PropertyTree eulerdampPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("eulerdamp"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(eulerdampPropertyTree!= null):((eulerdampPropertyTree == null)||(!eulerdampPropertyTree.isLeaf())))) {
            _newObject.eulerdamp = this.eulerdamp;
        }
        final PropertyTree overridePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("override"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(overridePropertyTree!= null):((overridePropertyTree == null)||(!overridePropertyTree.isLeaf())))) {
            _newObject.override = this.override;
        }
        final PropertyTree energyPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("energy"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(energyPropertyTree!= null):((energyPropertyTree == null)||(!energyPropertyTree.isLeaf())))) {
            _newObject.energy = this.energy;
        }
        final PropertyTree fwdinvPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("fwdinv"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(fwdinvPropertyTree!= null):((fwdinvPropertyTree == null)||(!fwdinvPropertyTree.isLeaf())))) {
            _newObject.fwdinv = this.fwdinv;
        }
        final PropertyTree invdiscretePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("invdiscrete"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(invdiscretePropertyTree!= null):((invdiscretePropertyTree == null)||(!invdiscretePropertyTree.isLeaf())))) {
            _newObject.invdiscrete = this.invdiscrete;
        }
        final PropertyTree sensornoisePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("sensornoise"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(sensornoisePropertyTree!= null):((sensornoisePropertyTree == null)||(!sensornoisePropertyTree.isLeaf())))) {
            _newObject.sensornoise = this.sensornoise;
        }
        final PropertyTree multiccdPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("multiccd"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(multiccdPropertyTree!= null):((multiccdPropertyTree == null)||(!multiccdPropertyTree.isLeaf())))) {
            _newObject.multiccd = this.multiccd;
        }
        final PropertyTree islandPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("island"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(islandPropertyTree!= null):((islandPropertyTree == null)||(!islandPropertyTree.isLeaf())))) {
            _newObject.island = this.island;
        }
        return _newObject;
    }

    @Override
    public FlagType copyExcept(final PropertyTree _propertyTree) {
        return createCopy(_propertyTree, PropertyTreeUse.EXCLUDE);
    }

    @Override
    public FlagType copyOnly(final PropertyTree _propertyTree) {
        return createCopy(_propertyTree, PropertyTreeUse.INCLUDE);
    }

    /**
     * Copies all state of this object to a builder. This method is used by the {@link #copyOf} method and should not be called directly by client code.
     * 
     * @param _other
     *     A builder instance to which the state of this object will be copied.
     */
    public<_B >void copyTo(final FlagType.Builder<_B> _other) {
        _other.constraint = this.constraint;
        _other.equality = this.equality;
        _other.frictionloss = this.frictionloss;
        _other.limit = this.limit;
        _other.contact = this.contact;
        _other.passive = this.passive;
        _other.gravity = this.gravity;
        _other.clampctrl = this.clampctrl;
        _other.warmstart = this.warmstart;
        _other.filterparent = this.filterparent;
        _other.actuation = this.actuation;
        _other.refsafe = this.refsafe;
        _other.sensor = this.sensor;
        _other.midphase = this.midphase;
        _other.eulerdamp = this.eulerdamp;
        _other.override = this.override;
        _other.energy = this.energy;
        _other.fwdinv = this.fwdinv;
        _other.invdiscrete = this.invdiscrete;
        _other.sensornoise = this.sensornoise;
        _other.multiccd = this.multiccd;
        _other.island = this.island;
    }

    public<_B >FlagType.Builder<_B> newCopyBuilder(final _B _parentBuilder) {
        return new FlagType.Builder<_B>(_parentBuilder, this, true);
    }

    public FlagType.Builder<Void> newCopyBuilder() {
        return newCopyBuilder(null);
    }

    public static FlagType.Builder<Void> builder() {
        return new FlagType.Builder<Void>(null, null, false);
    }

    public static<_B >FlagType.Builder<_B> copyOf(final FlagType _other) {
        final FlagType.Builder<_B> _newBuilder = new FlagType.Builder<_B>(null, null, false);
        _other.copyTo(_newBuilder);
        return _newBuilder;
    }

    /**
     * Copies all state of this object to a builder. This method is used by the {@link #copyOf} method and should not be called directly by client code.
     * 
     * @param _other
     *     A builder instance to which the state of this object will be copied.
     */
    public<_B >void copyTo(final FlagType.Builder<_B> _other, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        final PropertyTree constraintPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("constraint"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(constraintPropertyTree!= null):((constraintPropertyTree == null)||(!constraintPropertyTree.isLeaf())))) {
            _other.constraint = this.constraint;
        }
        final PropertyTree equalityPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("equality"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(equalityPropertyTree!= null):((equalityPropertyTree == null)||(!equalityPropertyTree.isLeaf())))) {
            _other.equality = this.equality;
        }
        final PropertyTree frictionlossPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("frictionloss"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(frictionlossPropertyTree!= null):((frictionlossPropertyTree == null)||(!frictionlossPropertyTree.isLeaf())))) {
            _other.frictionloss = this.frictionloss;
        }
        final PropertyTree limitPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("limit"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(limitPropertyTree!= null):((limitPropertyTree == null)||(!limitPropertyTree.isLeaf())))) {
            _other.limit = this.limit;
        }
        final PropertyTree contactPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("contact"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(contactPropertyTree!= null):((contactPropertyTree == null)||(!contactPropertyTree.isLeaf())))) {
            _other.contact = this.contact;
        }
        final PropertyTree passivePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("passive"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(passivePropertyTree!= null):((passivePropertyTree == null)||(!passivePropertyTree.isLeaf())))) {
            _other.passive = this.passive;
        }
        final PropertyTree gravityPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("gravity"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(gravityPropertyTree!= null):((gravityPropertyTree == null)||(!gravityPropertyTree.isLeaf())))) {
            _other.gravity = this.gravity;
        }
        final PropertyTree clampctrlPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("clampctrl"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(clampctrlPropertyTree!= null):((clampctrlPropertyTree == null)||(!clampctrlPropertyTree.isLeaf())))) {
            _other.clampctrl = this.clampctrl;
        }
        final PropertyTree warmstartPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("warmstart"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(warmstartPropertyTree!= null):((warmstartPropertyTree == null)||(!warmstartPropertyTree.isLeaf())))) {
            _other.warmstart = this.warmstart;
        }
        final PropertyTree filterparentPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("filterparent"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(filterparentPropertyTree!= null):((filterparentPropertyTree == null)||(!filterparentPropertyTree.isLeaf())))) {
            _other.filterparent = this.filterparent;
        }
        final PropertyTree actuationPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("actuation"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(actuationPropertyTree!= null):((actuationPropertyTree == null)||(!actuationPropertyTree.isLeaf())))) {
            _other.actuation = this.actuation;
        }
        final PropertyTree refsafePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("refsafe"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(refsafePropertyTree!= null):((refsafePropertyTree == null)||(!refsafePropertyTree.isLeaf())))) {
            _other.refsafe = this.refsafe;
        }
        final PropertyTree sensorPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("sensor"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(sensorPropertyTree!= null):((sensorPropertyTree == null)||(!sensorPropertyTree.isLeaf())))) {
            _other.sensor = this.sensor;
        }
        final PropertyTree midphasePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("midphase"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(midphasePropertyTree!= null):((midphasePropertyTree == null)||(!midphasePropertyTree.isLeaf())))) {
            _other.midphase = this.midphase;
        }
        final PropertyTree eulerdampPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("eulerdamp"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(eulerdampPropertyTree!= null):((eulerdampPropertyTree == null)||(!eulerdampPropertyTree.isLeaf())))) {
            _other.eulerdamp = this.eulerdamp;
        }
        final PropertyTree overridePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("override"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(overridePropertyTree!= null):((overridePropertyTree == null)||(!overridePropertyTree.isLeaf())))) {
            _other.override = this.override;
        }
        final PropertyTree energyPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("energy"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(energyPropertyTree!= null):((energyPropertyTree == null)||(!energyPropertyTree.isLeaf())))) {
            _other.energy = this.energy;
        }
        final PropertyTree fwdinvPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("fwdinv"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(fwdinvPropertyTree!= null):((fwdinvPropertyTree == null)||(!fwdinvPropertyTree.isLeaf())))) {
            _other.fwdinv = this.fwdinv;
        }
        final PropertyTree invdiscretePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("invdiscrete"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(invdiscretePropertyTree!= null):((invdiscretePropertyTree == null)||(!invdiscretePropertyTree.isLeaf())))) {
            _other.invdiscrete = this.invdiscrete;
        }
        final PropertyTree sensornoisePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("sensornoise"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(sensornoisePropertyTree!= null):((sensornoisePropertyTree == null)||(!sensornoisePropertyTree.isLeaf())))) {
            _other.sensornoise = this.sensornoise;
        }
        final PropertyTree multiccdPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("multiccd"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(multiccdPropertyTree!= null):((multiccdPropertyTree == null)||(!multiccdPropertyTree.isLeaf())))) {
            _other.multiccd = this.multiccd;
        }
        final PropertyTree islandPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("island"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(islandPropertyTree!= null):((islandPropertyTree == null)||(!islandPropertyTree.isLeaf())))) {
            _other.island = this.island;
        }
    }

    public<_B >FlagType.Builder<_B> newCopyBuilder(final _B _parentBuilder, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        return new FlagType.Builder<_B>(_parentBuilder, this, true, _propertyTree, _propertyTreeUse);
    }

    public FlagType.Builder<Void> newCopyBuilder(final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        return newCopyBuilder(null, _propertyTree, _propertyTreeUse);
    }

    public static<_B >FlagType.Builder<_B> copyOf(final FlagType _other, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        final FlagType.Builder<_B> _newBuilder = new FlagType.Builder<_B>(null, null, false);
        _other.copyTo(_newBuilder, _propertyTree, _propertyTreeUse);
        return _newBuilder;
    }

    public static FlagType.Builder<Void> copyExcept(final FlagType _other, final PropertyTree _propertyTree) {
        return copyOf(_other, _propertyTree, PropertyTreeUse.EXCLUDE);
    }

    public static FlagType.Builder<Void> copyOnly(final FlagType _other, final PropertyTree _propertyTree) {
        return copyOf(_other, _propertyTree, PropertyTreeUse.INCLUDE);
    }

    public FlagType visit(final PropertyVisitor _visitor_) {
        _visitor_.visit(this);
        return this;
    }

    public static class Builder<_B >implements Buildable
    {

        protected final _B _parentBuilder;
        private FlagSimpleType constraint;
        private FlagSimpleType equality;
        private FlagSimpleType frictionloss;
        private FlagSimpleType limit;
        private FlagSimpleType contact;
        private FlagSimpleType passive;
        private FlagSimpleType gravity;
        private FlagSimpleType clampctrl;
        private FlagSimpleType warmstart;
        private FlagSimpleType filterparent;
        private FlagSimpleType actuation;
        private FlagSimpleType refsafe;
        private FlagSimpleType sensor;
        private FlagSimpleType midphase;
        private FlagSimpleType eulerdamp;
        private FlagSimpleType override;
        private FlagSimpleType energy;
        private FlagSimpleType fwdinv;
        private FlagSimpleType invdiscrete;
        private FlagSimpleType sensornoise;
        private FlagSimpleType multiccd;
        private FlagSimpleType island;

        public Builder(final _B _parentBuilder, final FlagType _other, final boolean _copy) {
            this._parentBuilder = _parentBuilder;
            if (_other!= null) {
                this.constraint = _other.constraint;
                this.equality = _other.equality;
                this.frictionloss = _other.frictionloss;
                this.limit = _other.limit;
                this.contact = _other.contact;
                this.passive = _other.passive;
                this.gravity = _other.gravity;
                this.clampctrl = _other.clampctrl;
                this.warmstart = _other.warmstart;
                this.filterparent = _other.filterparent;
                this.actuation = _other.actuation;
                this.refsafe = _other.refsafe;
                this.sensor = _other.sensor;
                this.midphase = _other.midphase;
                this.eulerdamp = _other.eulerdamp;
                this.override = _other.override;
                this.energy = _other.energy;
                this.fwdinv = _other.fwdinv;
                this.invdiscrete = _other.invdiscrete;
                this.sensornoise = _other.sensornoise;
                this.multiccd = _other.multiccd;
                this.island = _other.island;
            }
        }

        public Builder(final _B _parentBuilder, final FlagType _other, final boolean _copy, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
            this._parentBuilder = _parentBuilder;
            if (_other!= null) {
                final PropertyTree constraintPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("constraint"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(constraintPropertyTree!= null):((constraintPropertyTree == null)||(!constraintPropertyTree.isLeaf())))) {
                    this.constraint = _other.constraint;
                }
                final PropertyTree equalityPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("equality"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(equalityPropertyTree!= null):((equalityPropertyTree == null)||(!equalityPropertyTree.isLeaf())))) {
                    this.equality = _other.equality;
                }
                final PropertyTree frictionlossPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("frictionloss"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(frictionlossPropertyTree!= null):((frictionlossPropertyTree == null)||(!frictionlossPropertyTree.isLeaf())))) {
                    this.frictionloss = _other.frictionloss;
                }
                final PropertyTree limitPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("limit"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(limitPropertyTree!= null):((limitPropertyTree == null)||(!limitPropertyTree.isLeaf())))) {
                    this.limit = _other.limit;
                }
                final PropertyTree contactPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("contact"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(contactPropertyTree!= null):((contactPropertyTree == null)||(!contactPropertyTree.isLeaf())))) {
                    this.contact = _other.contact;
                }
                final PropertyTree passivePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("passive"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(passivePropertyTree!= null):((passivePropertyTree == null)||(!passivePropertyTree.isLeaf())))) {
                    this.passive = _other.passive;
                }
                final PropertyTree gravityPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("gravity"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(gravityPropertyTree!= null):((gravityPropertyTree == null)||(!gravityPropertyTree.isLeaf())))) {
                    this.gravity = _other.gravity;
                }
                final PropertyTree clampctrlPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("clampctrl"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(clampctrlPropertyTree!= null):((clampctrlPropertyTree == null)||(!clampctrlPropertyTree.isLeaf())))) {
                    this.clampctrl = _other.clampctrl;
                }
                final PropertyTree warmstartPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("warmstart"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(warmstartPropertyTree!= null):((warmstartPropertyTree == null)||(!warmstartPropertyTree.isLeaf())))) {
                    this.warmstart = _other.warmstart;
                }
                final PropertyTree filterparentPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("filterparent"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(filterparentPropertyTree!= null):((filterparentPropertyTree == null)||(!filterparentPropertyTree.isLeaf())))) {
                    this.filterparent = _other.filterparent;
                }
                final PropertyTree actuationPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("actuation"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(actuationPropertyTree!= null):((actuationPropertyTree == null)||(!actuationPropertyTree.isLeaf())))) {
                    this.actuation = _other.actuation;
                }
                final PropertyTree refsafePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("refsafe"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(refsafePropertyTree!= null):((refsafePropertyTree == null)||(!refsafePropertyTree.isLeaf())))) {
                    this.refsafe = _other.refsafe;
                }
                final PropertyTree sensorPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("sensor"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(sensorPropertyTree!= null):((sensorPropertyTree == null)||(!sensorPropertyTree.isLeaf())))) {
                    this.sensor = _other.sensor;
                }
                final PropertyTree midphasePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("midphase"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(midphasePropertyTree!= null):((midphasePropertyTree == null)||(!midphasePropertyTree.isLeaf())))) {
                    this.midphase = _other.midphase;
                }
                final PropertyTree eulerdampPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("eulerdamp"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(eulerdampPropertyTree!= null):((eulerdampPropertyTree == null)||(!eulerdampPropertyTree.isLeaf())))) {
                    this.eulerdamp = _other.eulerdamp;
                }
                final PropertyTree overridePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("override"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(overridePropertyTree!= null):((overridePropertyTree == null)||(!overridePropertyTree.isLeaf())))) {
                    this.override = _other.override;
                }
                final PropertyTree energyPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("energy"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(energyPropertyTree!= null):((energyPropertyTree == null)||(!energyPropertyTree.isLeaf())))) {
                    this.energy = _other.energy;
                }
                final PropertyTree fwdinvPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("fwdinv"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(fwdinvPropertyTree!= null):((fwdinvPropertyTree == null)||(!fwdinvPropertyTree.isLeaf())))) {
                    this.fwdinv = _other.fwdinv;
                }
                final PropertyTree invdiscretePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("invdiscrete"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(invdiscretePropertyTree!= null):((invdiscretePropertyTree == null)||(!invdiscretePropertyTree.isLeaf())))) {
                    this.invdiscrete = _other.invdiscrete;
                }
                final PropertyTree sensornoisePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("sensornoise"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(sensornoisePropertyTree!= null):((sensornoisePropertyTree == null)||(!sensornoisePropertyTree.isLeaf())))) {
                    this.sensornoise = _other.sensornoise;
                }
                final PropertyTree multiccdPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("multiccd"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(multiccdPropertyTree!= null):((multiccdPropertyTree == null)||(!multiccdPropertyTree.isLeaf())))) {
                    this.multiccd = _other.multiccd;
                }
                final PropertyTree islandPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("island"));
                if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(islandPropertyTree!= null):((islandPropertyTree == null)||(!islandPropertyTree.isLeaf())))) {
                    this.island = _other.island;
                }
            }
        }

        public _B end() {
            return this._parentBuilder;
        }

        protected<_P extends FlagType >_P init(final _P _product) {
            _product.constraint = this.constraint;
            _product.equality = this.equality;
            _product.frictionloss = this.frictionloss;
            _product.limit = this.limit;
            _product.contact = this.contact;
            _product.passive = this.passive;
            _product.gravity = this.gravity;
            _product.clampctrl = this.clampctrl;
            _product.warmstart = this.warmstart;
            _product.filterparent = this.filterparent;
            _product.actuation = this.actuation;
            _product.refsafe = this.refsafe;
            _product.sensor = this.sensor;
            _product.midphase = this.midphase;
            _product.eulerdamp = this.eulerdamp;
            _product.override = this.override;
            _product.energy = this.energy;
            _product.fwdinv = this.fwdinv;
            _product.invdiscrete = this.invdiscrete;
            _product.sensornoise = this.sensornoise;
            _product.multiccd = this.multiccd;
            _product.island = this.island;
            return _product;
        }

        /**
         * Sets the new value of "constraint" (any previous value will be replaced)
         * 
         * @param constraint
         *     New value of the "constraint" property.
         */
        public FlagType.Builder<_B> withConstraint(final FlagSimpleType constraint) {
            this.constraint = constraint;
            return this;
        }

        /**
         * Sets the new value of "equality" (any previous value will be replaced)
         * 
         * @param equality
         *     New value of the "equality" property.
         */
        public FlagType.Builder<_B> withEquality(final FlagSimpleType equality) {
            this.equality = equality;
            return this;
        }

        /**
         * Sets the new value of "frictionloss" (any previous value will be replaced)
         * 
         * @param frictionloss
         *     New value of the "frictionloss" property.
         */
        public FlagType.Builder<_B> withFrictionloss(final FlagSimpleType frictionloss) {
            this.frictionloss = frictionloss;
            return this;
        }

        /**
         * Sets the new value of "limit" (any previous value will be replaced)
         * 
         * @param limit
         *     New value of the "limit" property.
         */
        public FlagType.Builder<_B> withLimit(final FlagSimpleType limit) {
            this.limit = limit;
            return this;
        }

        /**
         * Sets the new value of "contact" (any previous value will be replaced)
         * 
         * @param contact
         *     New value of the "contact" property.
         */
        public FlagType.Builder<_B> withContact(final FlagSimpleType contact) {
            this.contact = contact;
            return this;
        }

        /**
         * Sets the new value of "passive" (any previous value will be replaced)
         * 
         * @param passive
         *     New value of the "passive" property.
         */
        public FlagType.Builder<_B> withPassive(final FlagSimpleType passive) {
            this.passive = passive;
            return this;
        }

        /**
         * Sets the new value of "gravity" (any previous value will be replaced)
         * 
         * @param gravity
         *     New value of the "gravity" property.
         */
        public FlagType.Builder<_B> withGravity(final FlagSimpleType gravity) {
            this.gravity = gravity;
            return this;
        }

        /**
         * Sets the new value of "clampctrl" (any previous value will be replaced)
         * 
         * @param clampctrl
         *     New value of the "clampctrl" property.
         */
        public FlagType.Builder<_B> withClampctrl(final FlagSimpleType clampctrl) {
            this.clampctrl = clampctrl;
            return this;
        }

        /**
         * Sets the new value of "warmstart" (any previous value will be replaced)
         * 
         * @param warmstart
         *     New value of the "warmstart" property.
         */
        public FlagType.Builder<_B> withWarmstart(final FlagSimpleType warmstart) {
            this.warmstart = warmstart;
            return this;
        }

        /**
         * Sets the new value of "filterparent" (any previous value will be replaced)
         * 
         * @param filterparent
         *     New value of the "filterparent" property.
         */
        public FlagType.Builder<_B> withFilterparent(final FlagSimpleType filterparent) {
            this.filterparent = filterparent;
            return this;
        }

        /**
         * Sets the new value of "actuation" (any previous value will be replaced)
         * 
         * @param actuation
         *     New value of the "actuation" property.
         */
        public FlagType.Builder<_B> withActuation(final FlagSimpleType actuation) {
            this.actuation = actuation;
            return this;
        }

        /**
         * Sets the new value of "refsafe" (any previous value will be replaced)
         * 
         * @param refsafe
         *     New value of the "refsafe" property.
         */
        public FlagType.Builder<_B> withRefsafe(final FlagSimpleType refsafe) {
            this.refsafe = refsafe;
            return this;
        }

        /**
         * Sets the new value of "sensor" (any previous value will be replaced)
         * 
         * @param sensor
         *     New value of the "sensor" property.
         */
        public FlagType.Builder<_B> withSensor(final FlagSimpleType sensor) {
            this.sensor = sensor;
            return this;
        }

        /**
         * Sets the new value of "midphase" (any previous value will be replaced)
         * 
         * @param midphase
         *     New value of the "midphase" property.
         */
        public FlagType.Builder<_B> withMidphase(final FlagSimpleType midphase) {
            this.midphase = midphase;
            return this;
        }

        /**
         * Sets the new value of "eulerdamp" (any previous value will be replaced)
         * 
         * @param eulerdamp
         *     New value of the "eulerdamp" property.
         */
        public FlagType.Builder<_B> withEulerdamp(final FlagSimpleType eulerdamp) {
            this.eulerdamp = eulerdamp;
            return this;
        }

        /**
         * Sets the new value of "override" (any previous value will be replaced)
         * 
         * @param override
         *     New value of the "override" property.
         */
        public FlagType.Builder<_B> withOverride(final FlagSimpleType override) {
            this.override = override;
            return this;
        }

        /**
         * Sets the new value of "energy" (any previous value will be replaced)
         * 
         * @param energy
         *     New value of the "energy" property.
         */
        public FlagType.Builder<_B> withEnergy(final FlagSimpleType energy) {
            this.energy = energy;
            return this;
        }

        /**
         * Sets the new value of "fwdinv" (any previous value will be replaced)
         * 
         * @param fwdinv
         *     New value of the "fwdinv" property.
         */
        public FlagType.Builder<_B> withFwdinv(final FlagSimpleType fwdinv) {
            this.fwdinv = fwdinv;
            return this;
        }

        /**
         * Sets the new value of "invdiscrete" (any previous value will be replaced)
         * 
         * @param invdiscrete
         *     New value of the "invdiscrete" property.
         */
        public FlagType.Builder<_B> withInvdiscrete(final FlagSimpleType invdiscrete) {
            this.invdiscrete = invdiscrete;
            return this;
        }

        /**
         * Sets the new value of "sensornoise" (any previous value will be replaced)
         * 
         * @param sensornoise
         *     New value of the "sensornoise" property.
         */
        public FlagType.Builder<_B> withSensornoise(final FlagSimpleType sensornoise) {
            this.sensornoise = sensornoise;
            return this;
        }

        /**
         * Sets the new value of "multiccd" (any previous value will be replaced)
         * 
         * @param multiccd
         *     New value of the "multiccd" property.
         */
        public FlagType.Builder<_B> withMulticcd(final FlagSimpleType multiccd) {
            this.multiccd = multiccd;
            return this;
        }

        /**
         * Sets the new value of "island" (any previous value will be replaced)
         * 
         * @param island
         *     New value of the "island" property.
         */
        public FlagType.Builder<_B> withIsland(final FlagSimpleType island) {
            this.island = island;
            return this;
        }

        @Override
        public FlagType build() {
            return this.init(new FlagType());
        }

        public FlagType.Builder<_B> copyOf(final FlagType _other) {
            _other.copyTo(this);
            return this;
        }

        public FlagType.Builder<_B> copyOf(final FlagType.Builder _other) {
            return copyOf(_other.build());
        }

    }

    public static class PropInfo {

        public final static transient String CONSTRAINT = "constraint";
        public final static transient String EQUALITY = "equality";
        public final static transient String FRICTIONLOSS = "frictionloss";
        public final static transient String LIMIT = "limit";
        public final static transient String CONTACT = "contact";
        public final static transient String PASSIVE = "passive";
        public final static transient String GRAVITY = "gravity";
        public final static transient String CLAMPCTRL = "clampctrl";
        public final static transient String WARMSTART = "warmstart";
        public final static transient String FILTERPARENT = "filterparent";
        public final static transient String ACTUATION = "actuation";
        public final static transient String REFSAFE = "refsafe";
        public final static transient String SENSOR = "sensor";
        public final static transient String MIDPHASE = "midphase";
        public final static transient String EULERDAMP = "eulerdamp";
        public final static transient String OVERRIDE = "override";
        public final static transient String ENERGY = "energy";
        public final static transient String FWDINV = "fwdinv";
        public final static transient String INVDISCRETE = "invdiscrete";
        public final static transient String SENSORNOISE = "sensornoise";
        public final static transient String MULTICCD = "multiccd";
        public final static transient String ISLAND = "island";

    }

    public static class Select
        extends FlagType.Selector<FlagType.Select, Void>
    {


        Select() {
            super(null, null, null);
        }

        public static FlagType.Select _root() {
            return new FlagType.Select();
        }

    }

    public static class Selector<TRoot extends com.kscs.util.jaxb.Selector<TRoot, ?> , TParent >
        extends com.kscs.util.jaxb.Selector<TRoot, TParent>
    {

        private com.kscs.util.jaxb.Selector<TRoot, FlagType.Selector<TRoot, TParent>> constraint = null;
        private com.kscs.util.jaxb.Selector<TRoot, FlagType.Selector<TRoot, TParent>> equality = null;
        private com.kscs.util.jaxb.Selector<TRoot, FlagType.Selector<TRoot, TParent>> frictionloss = null;
        private com.kscs.util.jaxb.Selector<TRoot, FlagType.Selector<TRoot, TParent>> limit = null;
        private com.kscs.util.jaxb.Selector<TRoot, FlagType.Selector<TRoot, TParent>> contact = null;
        private com.kscs.util.jaxb.Selector<TRoot, FlagType.Selector<TRoot, TParent>> passive = null;
        private com.kscs.util.jaxb.Selector<TRoot, FlagType.Selector<TRoot, TParent>> gravity = null;
        private com.kscs.util.jaxb.Selector<TRoot, FlagType.Selector<TRoot, TParent>> clampctrl = null;
        private com.kscs.util.jaxb.Selector<TRoot, FlagType.Selector<TRoot, TParent>> warmstart = null;
        private com.kscs.util.jaxb.Selector<TRoot, FlagType.Selector<TRoot, TParent>> filterparent = null;
        private com.kscs.util.jaxb.Selector<TRoot, FlagType.Selector<TRoot, TParent>> actuation = null;
        private com.kscs.util.jaxb.Selector<TRoot, FlagType.Selector<TRoot, TParent>> refsafe = null;
        private com.kscs.util.jaxb.Selector<TRoot, FlagType.Selector<TRoot, TParent>> sensor = null;
        private com.kscs.util.jaxb.Selector<TRoot, FlagType.Selector<TRoot, TParent>> midphase = null;
        private com.kscs.util.jaxb.Selector<TRoot, FlagType.Selector<TRoot, TParent>> eulerdamp = null;
        private com.kscs.util.jaxb.Selector<TRoot, FlagType.Selector<TRoot, TParent>> override = null;
        private com.kscs.util.jaxb.Selector<TRoot, FlagType.Selector<TRoot, TParent>> energy = null;
        private com.kscs.util.jaxb.Selector<TRoot, FlagType.Selector<TRoot, TParent>> fwdinv = null;
        private com.kscs.util.jaxb.Selector<TRoot, FlagType.Selector<TRoot, TParent>> invdiscrete = null;
        private com.kscs.util.jaxb.Selector<TRoot, FlagType.Selector<TRoot, TParent>> sensornoise = null;
        private com.kscs.util.jaxb.Selector<TRoot, FlagType.Selector<TRoot, TParent>> multiccd = null;
        private com.kscs.util.jaxb.Selector<TRoot, FlagType.Selector<TRoot, TParent>> island = null;

        public Selector(final TRoot root, final TParent parent, final String propertyName) {
            super(root, parent, propertyName);
        }

        @Override
        public Map<String, PropertyTree> buildChildren() {
            final Map<String, PropertyTree> products = new HashMap<String, PropertyTree>();
            products.putAll(super.buildChildren());
            if (this.constraint!= null) {
                products.put("constraint", this.constraint.init());
            }
            if (this.equality!= null) {
                products.put("equality", this.equality.init());
            }
            if (this.frictionloss!= null) {
                products.put("frictionloss", this.frictionloss.init());
            }
            if (this.limit!= null) {
                products.put("limit", this.limit.init());
            }
            if (this.contact!= null) {
                products.put("contact", this.contact.init());
            }
            if (this.passive!= null) {
                products.put("passive", this.passive.init());
            }
            if (this.gravity!= null) {
                products.put("gravity", this.gravity.init());
            }
            if (this.clampctrl!= null) {
                products.put("clampctrl", this.clampctrl.init());
            }
            if (this.warmstart!= null) {
                products.put("warmstart", this.warmstart.init());
            }
            if (this.filterparent!= null) {
                products.put("filterparent", this.filterparent.init());
            }
            if (this.actuation!= null) {
                products.put("actuation", this.actuation.init());
            }
            if (this.refsafe!= null) {
                products.put("refsafe", this.refsafe.init());
            }
            if (this.sensor!= null) {
                products.put("sensor", this.sensor.init());
            }
            if (this.midphase!= null) {
                products.put("midphase", this.midphase.init());
            }
            if (this.eulerdamp!= null) {
                products.put("eulerdamp", this.eulerdamp.init());
            }
            if (this.override!= null) {
                products.put("override", this.override.init());
            }
            if (this.energy!= null) {
                products.put("energy", this.energy.init());
            }
            if (this.fwdinv!= null) {
                products.put("fwdinv", this.fwdinv.init());
            }
            if (this.invdiscrete!= null) {
                products.put("invdiscrete", this.invdiscrete.init());
            }
            if (this.sensornoise!= null) {
                products.put("sensornoise", this.sensornoise.init());
            }
            if (this.multiccd!= null) {
                products.put("multiccd", this.multiccd.init());
            }
            if (this.island!= null) {
                products.put("island", this.island.init());
            }
            return products;
        }

        public com.kscs.util.jaxb.Selector<TRoot, FlagType.Selector<TRoot, TParent>> constraint() {
            return ((this.constraint == null)?this.constraint = new com.kscs.util.jaxb.Selector<TRoot, FlagType.Selector<TRoot, TParent>>(this._root, this, "constraint"):this.constraint);
        }

        public com.kscs.util.jaxb.Selector<TRoot, FlagType.Selector<TRoot, TParent>> equality() {
            return ((this.equality == null)?this.equality = new com.kscs.util.jaxb.Selector<TRoot, FlagType.Selector<TRoot, TParent>>(this._root, this, "equality"):this.equality);
        }

        public com.kscs.util.jaxb.Selector<TRoot, FlagType.Selector<TRoot, TParent>> frictionloss() {
            return ((this.frictionloss == null)?this.frictionloss = new com.kscs.util.jaxb.Selector<TRoot, FlagType.Selector<TRoot, TParent>>(this._root, this, "frictionloss"):this.frictionloss);
        }

        public com.kscs.util.jaxb.Selector<TRoot, FlagType.Selector<TRoot, TParent>> limit() {
            return ((this.limit == null)?this.limit = new com.kscs.util.jaxb.Selector<TRoot, FlagType.Selector<TRoot, TParent>>(this._root, this, "limit"):this.limit);
        }

        public com.kscs.util.jaxb.Selector<TRoot, FlagType.Selector<TRoot, TParent>> contact() {
            return ((this.contact == null)?this.contact = new com.kscs.util.jaxb.Selector<TRoot, FlagType.Selector<TRoot, TParent>>(this._root, this, "contact"):this.contact);
        }

        public com.kscs.util.jaxb.Selector<TRoot, FlagType.Selector<TRoot, TParent>> passive() {
            return ((this.passive == null)?this.passive = new com.kscs.util.jaxb.Selector<TRoot, FlagType.Selector<TRoot, TParent>>(this._root, this, "passive"):this.passive);
        }

        public com.kscs.util.jaxb.Selector<TRoot, FlagType.Selector<TRoot, TParent>> gravity() {
            return ((this.gravity == null)?this.gravity = new com.kscs.util.jaxb.Selector<TRoot, FlagType.Selector<TRoot, TParent>>(this._root, this, "gravity"):this.gravity);
        }

        public com.kscs.util.jaxb.Selector<TRoot, FlagType.Selector<TRoot, TParent>> clampctrl() {
            return ((this.clampctrl == null)?this.clampctrl = new com.kscs.util.jaxb.Selector<TRoot, FlagType.Selector<TRoot, TParent>>(this._root, this, "clampctrl"):this.clampctrl);
        }

        public com.kscs.util.jaxb.Selector<TRoot, FlagType.Selector<TRoot, TParent>> warmstart() {
            return ((this.warmstart == null)?this.warmstart = new com.kscs.util.jaxb.Selector<TRoot, FlagType.Selector<TRoot, TParent>>(this._root, this, "warmstart"):this.warmstart);
        }

        public com.kscs.util.jaxb.Selector<TRoot, FlagType.Selector<TRoot, TParent>> filterparent() {
            return ((this.filterparent == null)?this.filterparent = new com.kscs.util.jaxb.Selector<TRoot, FlagType.Selector<TRoot, TParent>>(this._root, this, "filterparent"):this.filterparent);
        }

        public com.kscs.util.jaxb.Selector<TRoot, FlagType.Selector<TRoot, TParent>> actuation() {
            return ((this.actuation == null)?this.actuation = new com.kscs.util.jaxb.Selector<TRoot, FlagType.Selector<TRoot, TParent>>(this._root, this, "actuation"):this.actuation);
        }

        public com.kscs.util.jaxb.Selector<TRoot, FlagType.Selector<TRoot, TParent>> refsafe() {
            return ((this.refsafe == null)?this.refsafe = new com.kscs.util.jaxb.Selector<TRoot, FlagType.Selector<TRoot, TParent>>(this._root, this, "refsafe"):this.refsafe);
        }

        public com.kscs.util.jaxb.Selector<TRoot, FlagType.Selector<TRoot, TParent>> sensor() {
            return ((this.sensor == null)?this.sensor = new com.kscs.util.jaxb.Selector<TRoot, FlagType.Selector<TRoot, TParent>>(this._root, this, "sensor"):this.sensor);
        }

        public com.kscs.util.jaxb.Selector<TRoot, FlagType.Selector<TRoot, TParent>> midphase() {
            return ((this.midphase == null)?this.midphase = new com.kscs.util.jaxb.Selector<TRoot, FlagType.Selector<TRoot, TParent>>(this._root, this, "midphase"):this.midphase);
        }

        public com.kscs.util.jaxb.Selector<TRoot, FlagType.Selector<TRoot, TParent>> eulerdamp() {
            return ((this.eulerdamp == null)?this.eulerdamp = new com.kscs.util.jaxb.Selector<TRoot, FlagType.Selector<TRoot, TParent>>(this._root, this, "eulerdamp"):this.eulerdamp);
        }

        public com.kscs.util.jaxb.Selector<TRoot, FlagType.Selector<TRoot, TParent>> override() {
            return ((this.override == null)?this.override = new com.kscs.util.jaxb.Selector<TRoot, FlagType.Selector<TRoot, TParent>>(this._root, this, "override"):this.override);
        }

        public com.kscs.util.jaxb.Selector<TRoot, FlagType.Selector<TRoot, TParent>> energy() {
            return ((this.energy == null)?this.energy = new com.kscs.util.jaxb.Selector<TRoot, FlagType.Selector<TRoot, TParent>>(this._root, this, "energy"):this.energy);
        }

        public com.kscs.util.jaxb.Selector<TRoot, FlagType.Selector<TRoot, TParent>> fwdinv() {
            return ((this.fwdinv == null)?this.fwdinv = new com.kscs.util.jaxb.Selector<TRoot, FlagType.Selector<TRoot, TParent>>(this._root, this, "fwdinv"):this.fwdinv);
        }

        public com.kscs.util.jaxb.Selector<TRoot, FlagType.Selector<TRoot, TParent>> invdiscrete() {
            return ((this.invdiscrete == null)?this.invdiscrete = new com.kscs.util.jaxb.Selector<TRoot, FlagType.Selector<TRoot, TParent>>(this._root, this, "invdiscrete"):this.invdiscrete);
        }

        public com.kscs.util.jaxb.Selector<TRoot, FlagType.Selector<TRoot, TParent>> sensornoise() {
            return ((this.sensornoise == null)?this.sensornoise = new com.kscs.util.jaxb.Selector<TRoot, FlagType.Selector<TRoot, TParent>>(this._root, this, "sensornoise"):this.sensornoise);
        }

        public com.kscs.util.jaxb.Selector<TRoot, FlagType.Selector<TRoot, TParent>> multiccd() {
            return ((this.multiccd == null)?this.multiccd = new com.kscs.util.jaxb.Selector<TRoot, FlagType.Selector<TRoot, TParent>>(this._root, this, "multiccd"):this.multiccd);
        }

        public com.kscs.util.jaxb.Selector<TRoot, FlagType.Selector<TRoot, TParent>> island() {
            return ((this.island == null)?this.island = new com.kscs.util.jaxb.Selector<TRoot, FlagType.Selector<TRoot, TParent>>(this._root, this, "island"):this.island);
        }

    }

}
